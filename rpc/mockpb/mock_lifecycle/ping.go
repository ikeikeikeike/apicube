// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ikeikeikeike/apicube/rpc/pb/apicube/lifecycle (interfaces: PingServiceServer,PingServiceClient)

// Package mock_lifecycle is a generated GoMock package.
package mock_lifecycle

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	lifecycle "github.com/ikeikeikeike/apicube/rpc/pb/apicube/lifecycle"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockPingServiceServer is a mock of PingServiceServer interface
type MockPingServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPingServiceServerMockRecorder
}

// MockPingServiceServerMockRecorder is the mock recorder for MockPingServiceServer
type MockPingServiceServerMockRecorder struct {
	mock *MockPingServiceServer
}

// NewMockPingServiceServer creates a new mock instance
func NewMockPingServiceServer(ctrl *gomock.Controller) *MockPingServiceServer {
	mock := &MockPingServiceServer{ctrl: ctrl}
	mock.recorder = &MockPingServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPingServiceServer) EXPECT() *MockPingServiceServerMockRecorder {
	return m.recorder
}

// GetPing mocks base method
func (m *MockPingServiceServer) GetPing(arg0 context.Context, arg1 *lifecycle.Ping) (*lifecycle.Ping, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPing", arg0, arg1)
	ret0, _ := ret[0].(*lifecycle.Ping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPing indicates an expected call of GetPing
func (mr *MockPingServiceServerMockRecorder) GetPing(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPing", reflect.TypeOf((*MockPingServiceServer)(nil).GetPing), arg0, arg1)
}

// MockPingServiceClient is a mock of PingServiceClient interface
type MockPingServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPingServiceClientMockRecorder
}

// MockPingServiceClientMockRecorder is the mock recorder for MockPingServiceClient
type MockPingServiceClientMockRecorder struct {
	mock *MockPingServiceClient
}

// NewMockPingServiceClient creates a new mock instance
func NewMockPingServiceClient(ctrl *gomock.Controller) *MockPingServiceClient {
	mock := &MockPingServiceClient{ctrl: ctrl}
	mock.recorder = &MockPingServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPingServiceClient) EXPECT() *MockPingServiceClientMockRecorder {
	return m.recorder
}

// GetPing mocks base method
func (m *MockPingServiceClient) GetPing(arg0 context.Context, arg1 *lifecycle.Ping, arg2 ...grpc.CallOption) (*lifecycle.Ping, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPing", varargs...)
	ret0, _ := ret[0].(*lifecycle.Ping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPing indicates an expected call of GetPing
func (mr *MockPingServiceClientMockRecorder) GetPing(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPing", reflect.TypeOf((*MockPingServiceClient)(nil).GetPing), varargs...)
}
