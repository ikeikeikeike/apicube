// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: apicube/product/product.proto

package product

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Product struct {
	ID   *types.Int64Value `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// string image = 3 [(validator.field) = {string_not_empty: true}];
	DescriptionDetail    *types.StringValue `protobuf:"bytes,4,opt,name=description_detail,json=descriptionDetail,proto3" json:"description_detail,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Product) Reset()         { *m = Product{} }
func (m *Product) String() string { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()    {}
func (*Product) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cbb7554f344b84c, []int{0}
}
func (m *Product) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Product) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Product.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Product) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Product.Merge(m, src)
}
func (m *Product) XXX_Size() int {
	return m.Size()
}
func (m *Product) XXX_DiscardUnknown() {
	xxx_messageInfo_Product.DiscardUnknown(m)
}

var xxx_messageInfo_Product proto.InternalMessageInfo

func (m *Product) GetID() *types.Int64Value {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *Product) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Product) GetDescriptionDetail() *types.StringValue {
	if m != nil {
		return m.DescriptionDetail
	}
	return nil
}

type ListSimilarsRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PageSize             int32    `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken            string   `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	P                    string   `protobuf:"bytes,100,opt,name=p,proto3" json:"p,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListSimilarsRequest) Reset()         { *m = ListSimilarsRequest{} }
func (m *ListSimilarsRequest) String() string { return proto.CompactTextString(m) }
func (*ListSimilarsRequest) ProtoMessage()    {}
func (*ListSimilarsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cbb7554f344b84c, []int{1}
}
func (m *ListSimilarsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSimilarsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSimilarsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSimilarsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSimilarsRequest.Merge(m, src)
}
func (m *ListSimilarsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListSimilarsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSimilarsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListSimilarsRequest proto.InternalMessageInfo

func (m *ListSimilarsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListSimilarsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListSimilarsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListSimilarsRequest) GetP() string {
	if m != nil {
		return m.P
	}
	return ""
}

type ListSimilarsResponse struct {
	Products             []*Product `protobuf:"bytes,1,rep,name=products,proto3" json:"products,omitempty"`
	NextPageToken        string     `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ListSimilarsResponse) Reset()         { *m = ListSimilarsResponse{} }
func (m *ListSimilarsResponse) String() string { return proto.CompactTextString(m) }
func (*ListSimilarsResponse) ProtoMessage()    {}
func (*ListSimilarsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cbb7554f344b84c, []int{2}
}
func (m *ListSimilarsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSimilarsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSimilarsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSimilarsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSimilarsResponse.Merge(m, src)
}
func (m *ListSimilarsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListSimilarsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSimilarsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListSimilarsResponse proto.InternalMessageInfo

func (m *ListSimilarsResponse) GetProducts() []*Product {
	if m != nil {
		return m.Products
	}
	return nil
}

func (m *ListSimilarsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func init() {
	proto.RegisterType((*Product)(nil), "apicube.product.Product")
	proto.RegisterType((*ListSimilarsRequest)(nil), "apicube.product.ListSimilarsRequest")
	proto.RegisterType((*ListSimilarsResponse)(nil), "apicube.product.ListSimilarsResponse")
}

func init() { proto.RegisterFile("apicube/product/product.proto", fileDescriptor_0cbb7554f344b84c) }

var fileDescriptor_0cbb7554f344b84c = []byte{
	// 512 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x51, 0x3f, 0x6f, 0xd3, 0x4e,
	0x18, 0xd6, 0xb9, 0xfd, 0xa5, 0xed, 0x35, 0x3f, 0x2a, 0x8e, 0x0e, 0x56, 0x9a, 0xba, 0x91, 0x05,
	0x28, 0x4b, 0x7d, 0x22, 0xad, 0xba, 0xb1, 0x44, 0x5d, 0x2a, 0x18, 0x22, 0x1b, 0x21, 0xc4, 0x12,
	0x5d, 0xec, 0xc3, 0x9c, 0xea, 0xf8, 0x8e, 0xbb, 0x73, 0x82, 0x1a, 0x75, 0x41, 0xe2, 0x13, 0xb0,
	0xf0, 0x0d, 0xe0, 0x23, 0x30, 0x32, 0x32, 0x22, 0xb1, 0xf3, 0xc7, 0xe2, 0x43, 0x30, 0x22, 0x9f,
	0xcf, 0x51, 0xa0, 0x95, 0x98, 0xfc, 0xfa, 0xf9, 0xa3, 0xe7, 0x79, 0xdf, 0x83, 0xfb, 0x44, 0xb0,
	0xb8, 0x98, 0x50, 0x2c, 0x24, 0x4f, 0x8a, 0x58, 0x37, 0xdf, 0x40, 0x48, 0xae, 0x39, 0xda, 0xb1,
	0x74, 0x60, 0xe1, 0x4e, 0x37, 0xe5, 0x3c, 0xcd, 0x28, 0x26, 0x82, 0x61, 0x92, 0xe7, 0x5c, 0x13,
	0xcd, 0x78, 0xae, 0x6a, 0x79, 0xc7, 0xb3, 0xac, 0xf9, 0x9b, 0x14, 0xcf, 0xf0, 0x5c, 0x12, 0x21,
	0xa8, 0x6c, 0xf8, 0xdd, 0x94, 0xa7, 0xdc, 0x8c, 0xb8, 0x9a, 0x2c, 0x7a, 0x92, 0x32, 0xfd, 0xbc,
	0x98, 0x04, 0x31, 0x9f, 0xe2, 0xe9, 0x9c, 0xe9, 0x73, 0x3e, 0xc7, 0x29, 0x3f, 0x34, 0xe4, 0xe1,
	0x8c, 0x64, 0x2c, 0x21, 0x9a, 0x4b, 0x85, 0x97, 0x63, 0xed, 0xf3, 0xdf, 0x01, 0xb8, 0x31, 0xaa,
	0x7b, 0xa1, 0x23, 0xe8, 0xb0, 0xc4, 0x05, 0x3d, 0xd0, 0xdf, 0x1e, 0xec, 0x05, 0x75, 0x8d, 0xa0,
	0xa9, 0x11, 0x9c, 0xe5, 0xfa, 0xe4, 0xf8, 0x31, 0xc9, 0x0a, 0x3a, 0x6c, 0x95, 0x5f, 0x0f, 0x9c,
	0xb3, 0xd3, 0xd0, 0x61, 0x09, 0xea, 0xc0, 0xf5, 0x9c, 0x4c, 0xa9, 0xeb, 0xf4, 0x40, 0x7f, 0x6b,
	0xd8, 0x2a, 0xbf, 0x1d, 0x38, 0x4f, 0x40, 0x68, 0x30, 0xf4, 0x00, 0xa2, 0x84, 0xaa, 0x58, 0x32,
	0x51, 0x2d, 0x38, 0x4e, 0xa8, 0x26, 0x2c, 0x73, 0xd7, 0x4d, 0x40, 0xf7, 0x4a, 0x40, 0xa4, 0x25,
	0xcb, 0x53, 0x93, 0x10, 0xde, 0x5c, 0xf1, 0x9d, 0x1a, 0x9b, 0xbf, 0x80, 0xb7, 0x1e, 0x32, 0xa5,
	0x23, 0x36, 0x65, 0x19, 0x91, 0x2a, 0xa4, 0x2f, 0x0a, 0xaa, 0xf4, 0x32, 0x1f, 0x5c, 0x93, 0xbf,
	0x07, 0xb7, 0x04, 0x49, 0xe9, 0x58, 0xb1, 0x8b, 0xba, 0xe0, 0x7f, 0xe1, 0x66, 0x05, 0x44, 0xec,
	0x82, 0xa2, 0x7d, 0x08, 0x0d, 0xa9, 0xf9, 0x39, 0xcd, 0xdd, 0xb5, 0xca, 0x1e, 0x1a, 0xf9, 0xa3,
	0x0a, 0x40, 0x6d, 0x08, 0x84, 0x9b, 0x18, 0x14, 0x08, 0x5f, 0xc3, 0xdd, 0x3f, 0xc3, 0x95, 0xe0,
	0xb9, 0xa2, 0xe8, 0x18, 0x6e, 0xda, 0x57, 0x55, 0x2e, 0xe8, 0xad, 0xf5, 0xb7, 0x07, 0x6e, 0xf0,
	0xd7, 0x73, 0x07, 0xf6, 0xbc, 0xe1, 0x52, 0x89, 0xee, 0xc2, 0x9d, 0x9c, 0xbe, 0xd4, 0xe3, 0x95,
	0x7c, 0x73, 0xbe, 0xf0, 0xff, 0x0a, 0x1e, 0x35, 0x1d, 0x06, 0x6f, 0x01, 0xbc, 0x61, 0xdd, 0x11,
	0x95, 0x33, 0x16, 0x53, 0xf4, 0x1a, 0xc0, 0xf6, 0x6a, 0x13, 0x74, 0xfb, 0x4a, 0xde, 0x35, 0x57,
	0xea, 0xdc, 0xf9, 0x87, 0xaa, 0x5e, 0xc7, 0xef, 0xbf, 0xfa, 0xf2, 0xf3, 0x8d, 0xe3, 0xa3, 0x1e,
	0x9e, 0xdd, 0xc3, 0x0b, 0x71, 0xbf, 0x69, 0x7c, 0x89, 0x17, 0xd5, 0x41, 0x2f, 0xb1, 0xb2, 0x8e,
	0x61, 0xf4, 0xeb, 0x87, 0x07, 0xde, 0x97, 0x1e, 0xf8, 0x50, 0x7a, 0xe0, 0x63, 0xe9, 0x81, 0x4f,
	0xa5, 0x07, 0x3e, 0x97, 0x1e, 0xf8, 0x5e, 0x7a, 0x00, 0x76, 0xb9, 0x4c, 0x57, 0x13, 0x35, 0x8f,
	0x79, 0xd6, 0x44, 0x0f, 0xdb, 0x76, 0xa7, 0x51, 0x45, 0x8c, 0xc0, 0xd3, 0x0d, 0x4b, 0x4c, 0x5a,
	0x46, 0x7a, 0xf4, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x79, 0xbe, 0xa2, 0x51, 0x03, 0x00, 0x00,
}

func (this *Product) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Product)
	if !ok {
		that2, ok := that.(Product)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.DescriptionDetail.Equal(that1.DescriptionDetail) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListSimilarsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListSimilarsRequest)
	if !ok {
		that2, ok := that.(ListSimilarsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.PageSize != that1.PageSize {
		return false
	}
	if this.PageToken != that1.PageToken {
		return false
	}
	if this.P != that1.P {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListSimilarsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListSimilarsResponse)
	if !ok {
		that2, ok := that.(ListSimilarsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Products) != len(that1.Products) {
		return false
	}
	for i := range this.Products {
		if !this.Products[i].Equal(that1.Products[i]) {
			return false
		}
	}
	if this.NextPageToken != that1.NextPageToken {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProductServiceClient interface {
	ListSimilars(ctx context.Context, in *ListSimilarsRequest, opts ...grpc.CallOption) (*ListSimilarsResponse, error)
}

type productServiceClient struct {
	cc *grpc.ClientConn
}

func NewProductServiceClient(cc *grpc.ClientConn) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) ListSimilars(ctx context.Context, in *ListSimilarsRequest, opts ...grpc.CallOption) (*ListSimilarsResponse, error) {
	out := new(ListSimilarsResponse)
	err := c.cc.Invoke(ctx, "/apicube.product.ProductService/ListSimilars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServiceServer is the server API for ProductService service.
type ProductServiceServer interface {
	ListSimilars(context.Context, *ListSimilarsRequest) (*ListSimilarsResponse, error)
}

func RegisterProductServiceServer(s *grpc.Server, srv ProductServiceServer) {
	s.RegisterService(&_ProductService_serviceDesc, srv)
}

func _ProductService_ListSimilars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSimilarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListSimilars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apicube.product.ProductService/ListSimilars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListSimilars(ctx, req.(*ListSimilarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProductService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apicube.product.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSimilars",
			Handler:    _ProductService_ListSimilars_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apicube/product/product.proto",
}

func (m *Product) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Product) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProduct(dAtA, i, uint64(m.ID.Size()))
		n1, err := m.ID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProduct(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.DescriptionDetail != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintProduct(dAtA, i, uint64(m.DescriptionDetail.Size()))
		n2, err := m.DescriptionDetail.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListSimilarsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSimilarsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProduct(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.PageSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProduct(dAtA, i, uint64(m.PageSize))
	}
	if len(m.PageToken) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProduct(dAtA, i, uint64(len(m.PageToken)))
		i += copy(dAtA[i:], m.PageToken)
	}
	if len(m.P) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintProduct(dAtA, i, uint64(len(m.P)))
		i += copy(dAtA[i:], m.P)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListSimilarsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSimilarsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Products) > 0 {
		for _, msg := range m.Products {
			dAtA[i] = 0xa
			i++
			i = encodeVarintProduct(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.NextPageToken) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProduct(dAtA, i, uint64(len(m.NextPageToken)))
		i += copy(dAtA[i:], m.NextPageToken)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintProduct(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedProduct(r randyProduct, easy bool) *Product {
	this := &Product{}
	if r.Intn(10) != 0 {
		this.ID = types.NewPopulatedInt64Value(r, easy)
	}
	this.Name = string(randStringProduct(r))
	if r.Intn(10) != 0 {
		this.DescriptionDetail = types.NewPopulatedStringValue(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedProduct(r, 5)
	}
	return this
}

func NewPopulatedListSimilarsRequest(r randyProduct, easy bool) *ListSimilarsRequest {
	this := &ListSimilarsRequest{}
	this.Name = string(randStringProduct(r))
	this.PageSize = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.PageSize *= -1
	}
	this.PageToken = string(randStringProduct(r))
	this.P = string(randStringProduct(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedProduct(r, 101)
	}
	return this
}

func NewPopulatedListSimilarsResponse(r randyProduct, easy bool) *ListSimilarsResponse {
	this := &ListSimilarsResponse{}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Products = make([]*Product, v1)
		for i := 0; i < v1; i++ {
			this.Products[i] = NewPopulatedProduct(r, easy)
		}
	}
	this.NextPageToken = string(randStringProduct(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedProduct(r, 3)
	}
	return this
}

type randyProduct interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneProduct(r randyProduct) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringProduct(r randyProduct) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneProduct(r)
	}
	return string(tmps)
}
func randUnrecognizedProduct(r randyProduct, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldProduct(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldProduct(dAtA []byte, r randyProduct, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateProduct(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateProduct(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateProduct(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateProduct(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateProduct(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateProduct(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateProduct(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Product) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovProduct(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	if m.DescriptionDetail != nil {
		l = m.DescriptionDetail.Size()
		n += 1 + l + sovProduct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListSimilarsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	if m.PageSize != 0 {
		n += 1 + sovProduct(uint64(m.PageSize))
	}
	l = len(m.PageToken)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	l = len(m.P)
	if l > 0 {
		n += 2 + l + sovProduct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListSimilarsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Products) > 0 {
		for _, e := range m.Products {
			l = e.Size()
			n += 1 + l + sovProduct(uint64(l))
		}
	}
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovProduct(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProduct(x uint64) (n int) {
	return sovProduct(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Product) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProduct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Product: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Product: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &types.Int64Value{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescriptionDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DescriptionDetail == nil {
				m.DescriptionDetail = &types.StringValue{}
			}
			if err := m.DescriptionDetail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProduct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProduct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSimilarsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProduct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSimilarsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSimilarsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PageToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.P = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProduct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProduct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSimilarsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProduct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSimilarsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSimilarsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Products", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Products = append(m.Products, &Product{})
			if err := m.Products[len(m.Products)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProduct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProduct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProduct(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProduct
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthProduct
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProduct
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProduct(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProduct = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProduct   = fmt.Errorf("proto: integer overflow")
)
