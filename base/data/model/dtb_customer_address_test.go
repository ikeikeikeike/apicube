// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDTBCustomerAddresses(t *testing.T) {
	t.Parallel()

	query := DTBCustomerAddresses()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDTBCustomerAddressesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBCustomerAddress{}
	if err = randomize.Struct(seed, o, dtbCustomerAddressDBTypes, true, dtbCustomerAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomerAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBCustomerAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBCustomerAddressesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBCustomerAddress{}
	if err = randomize.Struct(seed, o, dtbCustomerAddressDBTypes, true, dtbCustomerAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomerAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DTBCustomerAddresses().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBCustomerAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBCustomerAddressesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBCustomerAddress{}
	if err = randomize.Struct(seed, o, dtbCustomerAddressDBTypes, true, dtbCustomerAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomerAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBCustomerAddressSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBCustomerAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBCustomerAddressesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBCustomerAddress{}
	if err = randomize.Struct(seed, o, dtbCustomerAddressDBTypes, true, dtbCustomerAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomerAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DTBCustomerAddressExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DTBCustomerAddress exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DTBCustomerAddressExists to return true, but got false.")
	}
}

func testDTBCustomerAddressesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBCustomerAddress{}
	if err = randomize.Struct(seed, o, dtbCustomerAddressDBTypes, true, dtbCustomerAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomerAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dtbCustomerAddressFound, err := FindDTBCustomerAddress(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if dtbCustomerAddressFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDTBCustomerAddressesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBCustomerAddress{}
	if err = randomize.Struct(seed, o, dtbCustomerAddressDBTypes, true, dtbCustomerAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomerAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DTBCustomerAddresses().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDTBCustomerAddressesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBCustomerAddress{}
	if err = randomize.Struct(seed, o, dtbCustomerAddressDBTypes, true, dtbCustomerAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomerAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DTBCustomerAddresses().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDTBCustomerAddressesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtbCustomerAddressOne := &DTBCustomerAddress{}
	dtbCustomerAddressTwo := &DTBCustomerAddress{}
	if err = randomize.Struct(seed, dtbCustomerAddressOne, dtbCustomerAddressDBTypes, false, dtbCustomerAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomerAddress struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbCustomerAddressTwo, dtbCustomerAddressDBTypes, false, dtbCustomerAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomerAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbCustomerAddressOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbCustomerAddressTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBCustomerAddresses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDTBCustomerAddressesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dtbCustomerAddressOne := &DTBCustomerAddress{}
	dtbCustomerAddressTwo := &DTBCustomerAddress{}
	if err = randomize.Struct(seed, dtbCustomerAddressOne, dtbCustomerAddressDBTypes, false, dtbCustomerAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomerAddress struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbCustomerAddressTwo, dtbCustomerAddressDBTypes, false, dtbCustomerAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomerAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbCustomerAddressOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbCustomerAddressTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBCustomerAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dtbCustomerAddressBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBCustomerAddress) error {
	*o = DTBCustomerAddress{}
	return nil
}

func dtbCustomerAddressAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBCustomerAddress) error {
	*o = DTBCustomerAddress{}
	return nil
}

func dtbCustomerAddressAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DTBCustomerAddress) error {
	*o = DTBCustomerAddress{}
	return nil
}

func dtbCustomerAddressBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBCustomerAddress) error {
	*o = DTBCustomerAddress{}
	return nil
}

func dtbCustomerAddressAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBCustomerAddress) error {
	*o = DTBCustomerAddress{}
	return nil
}

func dtbCustomerAddressBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBCustomerAddress) error {
	*o = DTBCustomerAddress{}
	return nil
}

func dtbCustomerAddressAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBCustomerAddress) error {
	*o = DTBCustomerAddress{}
	return nil
}

func dtbCustomerAddressBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBCustomerAddress) error {
	*o = DTBCustomerAddress{}
	return nil
}

func dtbCustomerAddressAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBCustomerAddress) error {
	*o = DTBCustomerAddress{}
	return nil
}

func testDTBCustomerAddressesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DTBCustomerAddress{}
	o := &DTBCustomerAddress{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dtbCustomerAddressDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBCustomerAddress object: %s", err)
	}

	AddDTBCustomerAddressHook(boil.BeforeInsertHook, dtbCustomerAddressBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dtbCustomerAddressBeforeInsertHooks = []DTBCustomerAddressHook{}

	AddDTBCustomerAddressHook(boil.AfterInsertHook, dtbCustomerAddressAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dtbCustomerAddressAfterInsertHooks = []DTBCustomerAddressHook{}

	AddDTBCustomerAddressHook(boil.AfterSelectHook, dtbCustomerAddressAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dtbCustomerAddressAfterSelectHooks = []DTBCustomerAddressHook{}

	AddDTBCustomerAddressHook(boil.BeforeUpdateHook, dtbCustomerAddressBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dtbCustomerAddressBeforeUpdateHooks = []DTBCustomerAddressHook{}

	AddDTBCustomerAddressHook(boil.AfterUpdateHook, dtbCustomerAddressAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dtbCustomerAddressAfterUpdateHooks = []DTBCustomerAddressHook{}

	AddDTBCustomerAddressHook(boil.BeforeDeleteHook, dtbCustomerAddressBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dtbCustomerAddressBeforeDeleteHooks = []DTBCustomerAddressHook{}

	AddDTBCustomerAddressHook(boil.AfterDeleteHook, dtbCustomerAddressAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dtbCustomerAddressAfterDeleteHooks = []DTBCustomerAddressHook{}

	AddDTBCustomerAddressHook(boil.BeforeUpsertHook, dtbCustomerAddressBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dtbCustomerAddressBeforeUpsertHooks = []DTBCustomerAddressHook{}

	AddDTBCustomerAddressHook(boil.AfterUpsertHook, dtbCustomerAddressAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dtbCustomerAddressAfterUpsertHooks = []DTBCustomerAddressHook{}
}

func testDTBCustomerAddressesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBCustomerAddress{}
	if err = randomize.Struct(seed, o, dtbCustomerAddressDBTypes, true, dtbCustomerAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomerAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBCustomerAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBCustomerAddressesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBCustomerAddress{}
	if err = randomize.Struct(seed, o, dtbCustomerAddressDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DTBCustomerAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dtbCustomerAddressColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DTBCustomerAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBCustomerAddressToOneDTBCustomerUsingCustomer(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBCustomerAddress
	var foreign DTBCustomer

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbCustomerAddressDBTypes, true, dtbCustomerAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomerAddress struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dtbCustomerDBTypes, false, dtbCustomerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomer struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CustomerID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Customer().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBCustomerAddressSlice{&local}
	if err = local.L.LoadCustomer(ctx, tx, false, (*[]*DTBCustomerAddress)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Customer == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Customer = nil
	if err = local.L.LoadCustomer(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Customer == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBCustomerAddressToOneMTBPrefUsingPref(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBCustomerAddress
	var foreign MTBPref

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbCustomerAddressDBTypes, true, dtbCustomerAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomerAddress struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, mtbPrefDBTypes, false, mtbPrefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPref struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.PrefID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Pref().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBCustomerAddressSlice{&local}
	if err = local.L.LoadPref(ctx, tx, false, (*[]*DTBCustomerAddress)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Pref == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Pref = nil
	if err = local.L.LoadPref(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Pref == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBCustomerAddressToOneMTBCountryUsingCountry(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBCustomerAddress
	var foreign MTBCountry

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbCustomerAddressDBTypes, true, dtbCustomerAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomerAddress struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, mtbCountryDBTypes, false, mtbCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCountry struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CountryID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Country().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBCustomerAddressSlice{&local}
	if err = local.L.LoadCountry(ctx, tx, false, (*[]*DTBCustomerAddress)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Country == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Country = nil
	if err = local.L.LoadCountry(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Country == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBCustomerAddressToOneSetOpDTBCustomerUsingCustomer(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBCustomerAddress
	var b, c DTBCustomer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbCustomerAddressDBTypes, false, strmangle.SetComplement(dtbCustomerAddressPrimaryKeyColumns, dtbCustomerAddressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbCustomerDBTypes, false, strmangle.SetComplement(dtbCustomerPrimaryKeyColumns, dtbCustomerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbCustomerDBTypes, false, strmangle.SetComplement(dtbCustomerPrimaryKeyColumns, dtbCustomerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DTBCustomer{&b, &c} {
		err = a.SetCustomer(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Customer != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CustomerDTBCustomerAddresses[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CustomerID, x.ID) {
			t.Error("foreign key was wrong value", a.CustomerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CustomerID))
		reflect.Indirect(reflect.ValueOf(&a.CustomerID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CustomerID, x.ID) {
			t.Error("foreign key was wrong value", a.CustomerID, x.ID)
		}
	}
}

func testDTBCustomerAddressToOneRemoveOpDTBCustomerUsingCustomer(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBCustomerAddress
	var b DTBCustomer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbCustomerAddressDBTypes, false, strmangle.SetComplement(dtbCustomerAddressPrimaryKeyColumns, dtbCustomerAddressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbCustomerDBTypes, false, strmangle.SetComplement(dtbCustomerPrimaryKeyColumns, dtbCustomerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCustomer(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCustomer(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Customer().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Customer != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CustomerID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CustomerDTBCustomerAddresses) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBCustomerAddressToOneSetOpMTBPrefUsingPref(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBCustomerAddress
	var b, c MTBPref

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbCustomerAddressDBTypes, false, strmangle.SetComplement(dtbCustomerAddressPrimaryKeyColumns, dtbCustomerAddressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MTBPref{&b, &c} {
		err = a.SetPref(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Pref != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PrefDTBCustomerAddresses[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.PrefID, x.ID) {
			t.Error("foreign key was wrong value", a.PrefID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PrefID))
		reflect.Indirect(reflect.ValueOf(&a.PrefID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.PrefID, x.ID) {
			t.Error("foreign key was wrong value", a.PrefID, x.ID)
		}
	}
}

func testDTBCustomerAddressToOneRemoveOpMTBPrefUsingPref(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBCustomerAddress
	var b MTBPref

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbCustomerAddressDBTypes, false, strmangle.SetComplement(dtbCustomerAddressPrimaryKeyColumns, dtbCustomerAddressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetPref(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemovePref(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Pref().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Pref != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.PrefID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.PrefDTBCustomerAddresses) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBCustomerAddressToOneSetOpMTBCountryUsingCountry(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBCustomerAddress
	var b, c MTBCountry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbCustomerAddressDBTypes, false, strmangle.SetComplement(dtbCustomerAddressPrimaryKeyColumns, dtbCustomerAddressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbCountryDBTypes, false, strmangle.SetComplement(mtbCountryPrimaryKeyColumns, mtbCountryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mtbCountryDBTypes, false, strmangle.SetComplement(mtbCountryPrimaryKeyColumns, mtbCountryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MTBCountry{&b, &c} {
		err = a.SetCountry(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Country != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CountryDTBCustomerAddresses[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CountryID, x.ID) {
			t.Error("foreign key was wrong value", a.CountryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CountryID))
		reflect.Indirect(reflect.ValueOf(&a.CountryID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CountryID, x.ID) {
			t.Error("foreign key was wrong value", a.CountryID, x.ID)
		}
	}
}

func testDTBCustomerAddressToOneRemoveOpMTBCountryUsingCountry(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBCustomerAddress
	var b MTBCountry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbCustomerAddressDBTypes, false, strmangle.SetComplement(dtbCustomerAddressPrimaryKeyColumns, dtbCustomerAddressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbCountryDBTypes, false, strmangle.SetComplement(mtbCountryPrimaryKeyColumns, mtbCountryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCountry(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCountry(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Country().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Country != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CountryID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CountryDTBCustomerAddresses) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBCustomerAddressesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBCustomerAddress{}
	if err = randomize.Struct(seed, o, dtbCustomerAddressDBTypes, true, dtbCustomerAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomerAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBCustomerAddressesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBCustomerAddress{}
	if err = randomize.Struct(seed, o, dtbCustomerAddressDBTypes, true, dtbCustomerAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomerAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBCustomerAddressSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBCustomerAddressesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBCustomerAddress{}
	if err = randomize.Struct(seed, o, dtbCustomerAddressDBTypes, true, dtbCustomerAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomerAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBCustomerAddresses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dtbCustomerAddressDBTypes = map[string]string{`ID`: `int`, `CustomerID`: `int`, `CountryID`: `smallint`, `PrefID`: `smallint`, `Name01`: `varchar`, `Name02`: `varchar`, `Kana01`: `varchar`, `Kana02`: `varchar`, `CompanyName`: `varchar`, `PostalCode`: `varchar`, `Addr01`: `varchar`, `Addr02`: `varchar`, `PhoneNumber`: `varchar`, `CreateDate`: `datetime`, `UpdateDate`: `datetime`, `DiscriminatorType`: `varchar`}
	_                         = bytes.MinRead
)

func testDTBCustomerAddressesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dtbCustomerAddressPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dtbCustomerAddressColumns) == len(dtbCustomerAddressPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBCustomerAddress{}
	if err = randomize.Struct(seed, o, dtbCustomerAddressDBTypes, true, dtbCustomerAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomerAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBCustomerAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbCustomerAddressDBTypes, true, dtbCustomerAddressPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBCustomerAddress struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDTBCustomerAddressesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dtbCustomerAddressColumns) == len(dtbCustomerAddressPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBCustomerAddress{}
	if err = randomize.Struct(seed, o, dtbCustomerAddressDBTypes, true, dtbCustomerAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomerAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBCustomerAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbCustomerAddressDBTypes, true, dtbCustomerAddressPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBCustomerAddress struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dtbCustomerAddressColumns, dtbCustomerAddressPrimaryKeyColumns) {
		fields = dtbCustomerAddressColumns
	} else {
		fields = strmangle.SetComplement(
			dtbCustomerAddressColumns,
			dtbCustomerAddressPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DTBCustomerAddressSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDTBCustomerAddressesUpsert(t *testing.T) {
	t.Parallel()

	if len(dtbCustomerAddressColumns) == len(dtbCustomerAddressPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDTBCustomerAddressUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DTBCustomerAddress{}
	if err = randomize.Struct(seed, &o, dtbCustomerAddressDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBCustomerAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBCustomerAddress: %s", err)
	}

	count, err := DTBCustomerAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dtbCustomerAddressDBTypes, false, dtbCustomerAddressPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBCustomerAddress struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBCustomerAddress: %s", err)
	}

	count, err = DTBCustomerAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
