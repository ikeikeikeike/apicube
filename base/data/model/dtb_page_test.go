// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDTBPages(t *testing.T) {
	t.Parallel()

	query := DTBPages()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDTBPagesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPage{}
	if err = randomize.Struct(seed, o, dtbPageDBTypes, true, dtbPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBPages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBPagesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPage{}
	if err = randomize.Struct(seed, o, dtbPageDBTypes, true, dtbPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DTBPages().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBPages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBPagesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPage{}
	if err = randomize.Struct(seed, o, dtbPageDBTypes, true, dtbPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBPageSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBPages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBPagesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPage{}
	if err = randomize.Struct(seed, o, dtbPageDBTypes, true, dtbPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DTBPageExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DTBPage exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DTBPageExists to return true, but got false.")
	}
}

func testDTBPagesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPage{}
	if err = randomize.Struct(seed, o, dtbPageDBTypes, true, dtbPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dtbPageFound, err := FindDTBPage(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if dtbPageFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDTBPagesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPage{}
	if err = randomize.Struct(seed, o, dtbPageDBTypes, true, dtbPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DTBPages().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDTBPagesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPage{}
	if err = randomize.Struct(seed, o, dtbPageDBTypes, true, dtbPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DTBPages().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDTBPagesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtbPageOne := &DTBPage{}
	dtbPageTwo := &DTBPage{}
	if err = randomize.Struct(seed, dtbPageOne, dtbPageDBTypes, false, dtbPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPage struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbPageTwo, dtbPageDBTypes, false, dtbPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbPageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbPageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBPages().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDTBPagesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dtbPageOne := &DTBPage{}
	dtbPageTwo := &DTBPage{}
	if err = randomize.Struct(seed, dtbPageOne, dtbPageDBTypes, false, dtbPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPage struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbPageTwo, dtbPageDBTypes, false, dtbPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbPageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbPageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBPages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dtbPageBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBPage) error {
	*o = DTBPage{}
	return nil
}

func dtbPageAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBPage) error {
	*o = DTBPage{}
	return nil
}

func dtbPageAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DTBPage) error {
	*o = DTBPage{}
	return nil
}

func dtbPageBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBPage) error {
	*o = DTBPage{}
	return nil
}

func dtbPageAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBPage) error {
	*o = DTBPage{}
	return nil
}

func dtbPageBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBPage) error {
	*o = DTBPage{}
	return nil
}

func dtbPageAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBPage) error {
	*o = DTBPage{}
	return nil
}

func dtbPageBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBPage) error {
	*o = DTBPage{}
	return nil
}

func dtbPageAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBPage) error {
	*o = DTBPage{}
	return nil
}

func testDTBPagesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DTBPage{}
	o := &DTBPage{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dtbPageDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBPage object: %s", err)
	}

	AddDTBPageHook(boil.BeforeInsertHook, dtbPageBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dtbPageBeforeInsertHooks = []DTBPageHook{}

	AddDTBPageHook(boil.AfterInsertHook, dtbPageAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dtbPageAfterInsertHooks = []DTBPageHook{}

	AddDTBPageHook(boil.AfterSelectHook, dtbPageAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dtbPageAfterSelectHooks = []DTBPageHook{}

	AddDTBPageHook(boil.BeforeUpdateHook, dtbPageBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dtbPageBeforeUpdateHooks = []DTBPageHook{}

	AddDTBPageHook(boil.AfterUpdateHook, dtbPageAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dtbPageAfterUpdateHooks = []DTBPageHook{}

	AddDTBPageHook(boil.BeforeDeleteHook, dtbPageBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dtbPageBeforeDeleteHooks = []DTBPageHook{}

	AddDTBPageHook(boil.AfterDeleteHook, dtbPageAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dtbPageAfterDeleteHooks = []DTBPageHook{}

	AddDTBPageHook(boil.BeforeUpsertHook, dtbPageBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dtbPageBeforeUpsertHooks = []DTBPageHook{}

	AddDTBPageHook(boil.AfterUpsertHook, dtbPageAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dtbPageAfterUpsertHooks = []DTBPageHook{}
}

func testDTBPagesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPage{}
	if err = randomize.Struct(seed, o, dtbPageDBTypes, true, dtbPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBPages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBPagesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPage{}
	if err = randomize.Struct(seed, o, dtbPageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DTBPage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dtbPageColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DTBPages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBPageToManyMasterPageDTBPages(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBPage
	var b, c DTBPage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbPageDBTypes, true, dtbPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPage struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbPageDBTypes, false, dtbPageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbPageDBTypes, false, dtbPageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.MasterPageID, a.ID)
	queries.Assign(&c.MasterPageID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.MasterPageDTBPages().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.MasterPageID, b.MasterPageID) {
			bFound = true
		}
		if queries.Equal(v.MasterPageID, c.MasterPageID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBPageSlice{&a}
	if err = a.L.LoadMasterPageDTBPages(ctx, tx, false, (*[]*DTBPage)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MasterPageDTBPages); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MasterPageDTBPages = nil
	if err = a.L.LoadMasterPageDTBPages(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MasterPageDTBPages); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBPageToManyPageDTBPageLayouts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBPage
	var b, c DTBPageLayout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbPageDBTypes, true, dtbPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPage struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbPageLayoutDBTypes, false, dtbPageLayoutColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbPageLayoutDBTypes, false, dtbPageLayoutColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PageID = a.ID
	c.PageID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PageDTBPageLayouts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PageID == b.PageID {
			bFound = true
		}
		if v.PageID == c.PageID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBPageSlice{&a}
	if err = a.L.LoadPageDTBPageLayouts(ctx, tx, false, (*[]*DTBPage)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PageDTBPageLayouts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PageDTBPageLayouts = nil
	if err = a.L.LoadPageDTBPageLayouts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PageDTBPageLayouts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBPageToManyAddOpMasterPageDTBPages(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBPage
	var b, c, d, e DTBPage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbPageDBTypes, false, strmangle.SetComplement(dtbPagePrimaryKeyColumns, dtbPageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBPage{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbPageDBTypes, false, strmangle.SetComplement(dtbPagePrimaryKeyColumns, dtbPageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBPage{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMasterPageDTBPages(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.MasterPageID) {
			t.Error("foreign key was wrong value", a.ID, first.MasterPageID)
		}
		if !queries.Equal(a.ID, second.MasterPageID) {
			t.Error("foreign key was wrong value", a.ID, second.MasterPageID)
		}

		if first.R.MasterPage != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.MasterPage != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MasterPageDTBPages[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MasterPageDTBPages[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MasterPageDTBPages().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDTBPageToManySetOpMasterPageDTBPages(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBPage
	var b, c, d, e DTBPage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbPageDBTypes, false, strmangle.SetComplement(dtbPagePrimaryKeyColumns, dtbPageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBPage{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbPageDBTypes, false, strmangle.SetComplement(dtbPagePrimaryKeyColumns, dtbPageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetMasterPageDTBPages(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MasterPageDTBPages().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetMasterPageDTBPages(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MasterPageDTBPages().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.MasterPageID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.MasterPageID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.MasterPageID) {
		t.Error("foreign key was wrong value", a.ID, d.MasterPageID)
	}
	if !queries.Equal(a.ID, e.MasterPageID) {
		t.Error("foreign key was wrong value", a.ID, e.MasterPageID)
	}

	if b.R.MasterPage != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.MasterPage != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.MasterPage != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.MasterPage != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.MasterPageDTBPages[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.MasterPageDTBPages[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDTBPageToManyRemoveOpMasterPageDTBPages(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBPage
	var b, c, d, e DTBPage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbPageDBTypes, false, strmangle.SetComplement(dtbPagePrimaryKeyColumns, dtbPageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBPage{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbPageDBTypes, false, strmangle.SetComplement(dtbPagePrimaryKeyColumns, dtbPageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddMasterPageDTBPages(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MasterPageDTBPages().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveMasterPageDTBPages(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MasterPageDTBPages().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.MasterPageID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.MasterPageID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.MasterPage != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.MasterPage != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.MasterPage != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.MasterPage != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.MasterPageDTBPages) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.MasterPageDTBPages[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.MasterPageDTBPages[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDTBPageToManyAddOpPageDTBPageLayouts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBPage
	var b, c, d, e DTBPageLayout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbPageDBTypes, false, strmangle.SetComplement(dtbPagePrimaryKeyColumns, dtbPageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBPageLayout{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbPageLayoutDBTypes, false, strmangle.SetComplement(dtbPageLayoutPrimaryKeyColumns, dtbPageLayoutColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBPageLayout{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPageDTBPageLayouts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.PageID {
			t.Error("foreign key was wrong value", a.ID, first.PageID)
		}
		if a.ID != second.PageID {
			t.Error("foreign key was wrong value", a.ID, second.PageID)
		}

		if first.R.Page != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Page != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PageDTBPageLayouts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PageDTBPageLayouts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PageDTBPageLayouts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testDTBPageToOneDTBPageUsingMasterPage(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBPage
	var foreign DTBPage

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbPageDBTypes, true, dtbPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPage struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dtbPageDBTypes, false, dtbPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPage struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.MasterPageID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.MasterPage().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBPageSlice{&local}
	if err = local.L.LoadMasterPage(ctx, tx, false, (*[]*DTBPage)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.MasterPage == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.MasterPage = nil
	if err = local.L.LoadMasterPage(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.MasterPage == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBPageToOneSetOpDTBPageUsingMasterPage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBPage
	var b, c DTBPage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbPageDBTypes, false, strmangle.SetComplement(dtbPagePrimaryKeyColumns, dtbPageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbPageDBTypes, false, strmangle.SetComplement(dtbPagePrimaryKeyColumns, dtbPageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbPageDBTypes, false, strmangle.SetComplement(dtbPagePrimaryKeyColumns, dtbPageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DTBPage{&b, &c} {
		err = a.SetMasterPage(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.MasterPage != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MasterPageDTBPages[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.MasterPageID, x.ID) {
			t.Error("foreign key was wrong value", a.MasterPageID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MasterPageID))
		reflect.Indirect(reflect.ValueOf(&a.MasterPageID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.MasterPageID, x.ID) {
			t.Error("foreign key was wrong value", a.MasterPageID, x.ID)
		}
	}
}

func testDTBPageToOneRemoveOpDTBPageUsingMasterPage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBPage
	var b DTBPage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbPageDBTypes, false, strmangle.SetComplement(dtbPagePrimaryKeyColumns, dtbPageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbPageDBTypes, false, strmangle.SetComplement(dtbPagePrimaryKeyColumns, dtbPageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetMasterPage(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveMasterPage(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.MasterPage().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.MasterPage != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.MasterPageID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.MasterPageDTBPages) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBPagesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPage{}
	if err = randomize.Struct(seed, o, dtbPageDBTypes, true, dtbPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBPagesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPage{}
	if err = randomize.Struct(seed, o, dtbPageDBTypes, true, dtbPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBPageSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBPagesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPage{}
	if err = randomize.Struct(seed, o, dtbPageDBTypes, true, dtbPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBPages().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dtbPageDBTypes = map[string]string{`ID`: `int`, `MasterPageID`: `int`, `PageName`: `varchar`, `URL`: `varchar`, `FileName`: `varchar`, `EditType`: `smallint`, `Author`: `varchar`, `Description`: `varchar`, `Keyword`: `varchar`, `CreateDate`: `datetime`, `UpdateDate`: `datetime`, `MetaRobots`: `varchar`, `MetaTags`: `varchar`, `DiscriminatorType`: `varchar`}
	_              = bytes.MinRead
)

func testDTBPagesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dtbPagePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dtbPageColumns) == len(dtbPagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBPage{}
	if err = randomize.Struct(seed, o, dtbPageDBTypes, true, dtbPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBPages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbPageDBTypes, true, dtbPagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBPage struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDTBPagesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dtbPageColumns) == len(dtbPagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBPage{}
	if err = randomize.Struct(seed, o, dtbPageDBTypes, true, dtbPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBPages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbPageDBTypes, true, dtbPagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBPage struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dtbPageColumns, dtbPagePrimaryKeyColumns) {
		fields = dtbPageColumns
	} else {
		fields = strmangle.SetComplement(
			dtbPageColumns,
			dtbPagePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DTBPageSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDTBPagesUpsert(t *testing.T) {
	t.Parallel()

	if len(dtbPageColumns) == len(dtbPagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDTBPageUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DTBPage{}
	if err = randomize.Struct(seed, &o, dtbPageDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBPage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBPage: %s", err)
	}

	count, err := DTBPages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dtbPageDBTypes, false, dtbPagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBPage struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBPage: %s", err)
	}

	count, err = DTBPages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
