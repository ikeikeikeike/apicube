// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// DTBCustomerAddress is an object representing the database table.
type DTBCustomerAddress struct {
	ID                uint        `boil:"id" json:"id" toml:"id" yaml:"id"`
	CustomerID        null.Uint   `boil:"customer_id" json:"customer_id,omitempty" toml:"customer_id" yaml:"customer_id,omitempty"`
	CountryID         null.Uint16 `boil:"country_id" json:"country_id,omitempty" toml:"country_id" yaml:"country_id,omitempty"`
	PrefID            null.Uint16 `boil:"pref_id" json:"pref_id,omitempty" toml:"pref_id" yaml:"pref_id,omitempty"`
	Name01            string      `boil:"name01" json:"name01" toml:"name01" yaml:"name01"`
	Name02            string      `boil:"name02" json:"name02" toml:"name02" yaml:"name02"`
	Kana01            null.String `boil:"kana01" json:"kana01,omitempty" toml:"kana01" yaml:"kana01,omitempty"`
	Kana02            null.String `boil:"kana02" json:"kana02,omitempty" toml:"kana02" yaml:"kana02,omitempty"`
	CompanyName       null.String `boil:"company_name" json:"company_name,omitempty" toml:"company_name" yaml:"company_name,omitempty"`
	PostalCode        null.String `boil:"postal_code" json:"postal_code,omitempty" toml:"postal_code" yaml:"postal_code,omitempty"`
	Addr01            null.String `boil:"addr01" json:"addr01,omitempty" toml:"addr01" yaml:"addr01,omitempty"`
	Addr02            null.String `boil:"addr02" json:"addr02,omitempty" toml:"addr02" yaml:"addr02,omitempty"`
	PhoneNumber       null.String `boil:"phone_number" json:"phone_number,omitempty" toml:"phone_number" yaml:"phone_number,omitempty"`
	CreateDate        time.Time   `boil:"create_date" json:"create_date" toml:"create_date" yaml:"create_date"`
	UpdateDate        time.Time   `boil:"update_date" json:"update_date" toml:"update_date" yaml:"update_date"`
	DiscriminatorType string      `boil:"discriminator_type" json:"discriminator_type" toml:"discriminator_type" yaml:"discriminator_type"`

	R *dtbCustomerAddressR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dtbCustomerAddressL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DTBCustomerAddressColumns = struct {
	ID                string
	CustomerID        string
	CountryID         string
	PrefID            string
	Name01            string
	Name02            string
	Kana01            string
	Kana02            string
	CompanyName       string
	PostalCode        string
	Addr01            string
	Addr02            string
	PhoneNumber       string
	CreateDate        string
	UpdateDate        string
	DiscriminatorType string
}{
	ID:                "id",
	CustomerID:        "customer_id",
	CountryID:         "country_id",
	PrefID:            "pref_id",
	Name01:            "name01",
	Name02:            "name02",
	Kana01:            "kana01",
	Kana02:            "kana02",
	CompanyName:       "company_name",
	PostalCode:        "postal_code",
	Addr01:            "addr01",
	Addr02:            "addr02",
	PhoneNumber:       "phone_number",
	CreateDate:        "create_date",
	UpdateDate:        "update_date",
	DiscriminatorType: "discriminator_type",
}

// Generated where

var DTBCustomerAddressWhere = struct {
	ID                whereHelperuint
	CustomerID        whereHelpernull_Uint
	CountryID         whereHelpernull_Uint16
	PrefID            whereHelpernull_Uint16
	Name01            whereHelperstring
	Name02            whereHelperstring
	Kana01            whereHelpernull_String
	Kana02            whereHelpernull_String
	CompanyName       whereHelpernull_String
	PostalCode        whereHelpernull_String
	Addr01            whereHelpernull_String
	Addr02            whereHelpernull_String
	PhoneNumber       whereHelpernull_String
	CreateDate        whereHelpertime_Time
	UpdateDate        whereHelpertime_Time
	DiscriminatorType whereHelperstring
}{
	ID:                whereHelperuint{field: `id`},
	CustomerID:        whereHelpernull_Uint{field: `customer_id`},
	CountryID:         whereHelpernull_Uint16{field: `country_id`},
	PrefID:            whereHelpernull_Uint16{field: `pref_id`},
	Name01:            whereHelperstring{field: `name01`},
	Name02:            whereHelperstring{field: `name02`},
	Kana01:            whereHelpernull_String{field: `kana01`},
	Kana02:            whereHelpernull_String{field: `kana02`},
	CompanyName:       whereHelpernull_String{field: `company_name`},
	PostalCode:        whereHelpernull_String{field: `postal_code`},
	Addr01:            whereHelpernull_String{field: `addr01`},
	Addr02:            whereHelpernull_String{field: `addr02`},
	PhoneNumber:       whereHelpernull_String{field: `phone_number`},
	CreateDate:        whereHelpertime_Time{field: `create_date`},
	UpdateDate:        whereHelpertime_Time{field: `update_date`},
	DiscriminatorType: whereHelperstring{field: `discriminator_type`},
}

// DTBCustomerAddressRels is where relationship names are stored.
var DTBCustomerAddressRels = struct {
	Customer string
	Pref     string
	Country  string
}{
	Customer: "Customer",
	Pref:     "Pref",
	Country:  "Country",
}

// dtbCustomerAddressR is where relationships are stored.
type dtbCustomerAddressR struct {
	Customer *DTBCustomer
	Pref     *MTBPref
	Country  *MTBCountry
}

// NewStruct creates a new relationship struct
func (*dtbCustomerAddressR) NewStruct() *dtbCustomerAddressR {
	return &dtbCustomerAddressR{}
}

// dtbCustomerAddressL is where Load methods for each relationship are stored.
type dtbCustomerAddressL struct{}

var (
	dtbCustomerAddressColumns               = []string{"id", "customer_id", "country_id", "pref_id", "name01", "name02", "kana01", "kana02", "company_name", "postal_code", "addr01", "addr02", "phone_number", "create_date", "update_date", "discriminator_type"}
	dtbCustomerAddressColumnsWithoutDefault = []string{"customer_id", "country_id", "pref_id", "name01", "name02", "kana01", "kana02", "company_name", "postal_code", "addr01", "addr02", "phone_number", "create_date", "update_date", "discriminator_type"}
	dtbCustomerAddressColumnsWithDefault    = []string{"id"}
	dtbCustomerAddressPrimaryKeyColumns     = []string{"id"}
)

type (
	// DTBCustomerAddressSlice is an alias for a slice of pointers to DTBCustomerAddress.
	// This should generally be used opposed to []DTBCustomerAddress.
	DTBCustomerAddressSlice []*DTBCustomerAddress
	// DTBCustomerAddressHook is the signature for custom DTBCustomerAddress hook methods
	DTBCustomerAddressHook func(context.Context, boil.ContextExecutor, *DTBCustomerAddress) error

	dtbCustomerAddressQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dtbCustomerAddressType                 = reflect.TypeOf(&DTBCustomerAddress{})
	dtbCustomerAddressMapping              = queries.MakeStructMapping(dtbCustomerAddressType)
	dtbCustomerAddressPrimaryKeyMapping, _ = queries.BindMapping(dtbCustomerAddressType, dtbCustomerAddressMapping, dtbCustomerAddressPrimaryKeyColumns)
	dtbCustomerAddressInsertCacheMut       sync.RWMutex
	dtbCustomerAddressInsertCache          = make(map[string]insertCache)
	dtbCustomerAddressUpdateCacheMut       sync.RWMutex
	dtbCustomerAddressUpdateCache          = make(map[string]updateCache)
	dtbCustomerAddressUpsertCacheMut       sync.RWMutex
	dtbCustomerAddressUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dtbCustomerAddressBeforeInsertHooks []DTBCustomerAddressHook
var dtbCustomerAddressBeforeUpdateHooks []DTBCustomerAddressHook
var dtbCustomerAddressBeforeDeleteHooks []DTBCustomerAddressHook
var dtbCustomerAddressBeforeUpsertHooks []DTBCustomerAddressHook

var dtbCustomerAddressAfterInsertHooks []DTBCustomerAddressHook
var dtbCustomerAddressAfterSelectHooks []DTBCustomerAddressHook
var dtbCustomerAddressAfterUpdateHooks []DTBCustomerAddressHook
var dtbCustomerAddressAfterDeleteHooks []DTBCustomerAddressHook
var dtbCustomerAddressAfterUpsertHooks []DTBCustomerAddressHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DTBCustomerAddress) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCustomerAddressBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DTBCustomerAddress) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCustomerAddressBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DTBCustomerAddress) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCustomerAddressBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DTBCustomerAddress) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCustomerAddressBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DTBCustomerAddress) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCustomerAddressAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DTBCustomerAddress) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCustomerAddressAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DTBCustomerAddress) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCustomerAddressAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DTBCustomerAddress) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCustomerAddressAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DTBCustomerAddress) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCustomerAddressAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDTBCustomerAddressHook registers your hook function for all future operations.
func AddDTBCustomerAddressHook(hookPoint boil.HookPoint, dtbCustomerAddressHook DTBCustomerAddressHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		dtbCustomerAddressBeforeInsertHooks = append(dtbCustomerAddressBeforeInsertHooks, dtbCustomerAddressHook)
	case boil.BeforeUpdateHook:
		dtbCustomerAddressBeforeUpdateHooks = append(dtbCustomerAddressBeforeUpdateHooks, dtbCustomerAddressHook)
	case boil.BeforeDeleteHook:
		dtbCustomerAddressBeforeDeleteHooks = append(dtbCustomerAddressBeforeDeleteHooks, dtbCustomerAddressHook)
	case boil.BeforeUpsertHook:
		dtbCustomerAddressBeforeUpsertHooks = append(dtbCustomerAddressBeforeUpsertHooks, dtbCustomerAddressHook)
	case boil.AfterInsertHook:
		dtbCustomerAddressAfterInsertHooks = append(dtbCustomerAddressAfterInsertHooks, dtbCustomerAddressHook)
	case boil.AfterSelectHook:
		dtbCustomerAddressAfterSelectHooks = append(dtbCustomerAddressAfterSelectHooks, dtbCustomerAddressHook)
	case boil.AfterUpdateHook:
		dtbCustomerAddressAfterUpdateHooks = append(dtbCustomerAddressAfterUpdateHooks, dtbCustomerAddressHook)
	case boil.AfterDeleteHook:
		dtbCustomerAddressAfterDeleteHooks = append(dtbCustomerAddressAfterDeleteHooks, dtbCustomerAddressHook)
	case boil.AfterUpsertHook:
		dtbCustomerAddressAfterUpsertHooks = append(dtbCustomerAddressAfterUpsertHooks, dtbCustomerAddressHook)
	}
}

// One returns a single dtbCustomerAddress record from the query.
func (q dtbCustomerAddressQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DTBCustomerAddress, error) {
	o := &DTBCustomerAddress{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for dtb_customer_address")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DTBCustomerAddress records from the query.
func (q dtbCustomerAddressQuery) All(ctx context.Context, exec boil.ContextExecutor) (DTBCustomerAddressSlice, error) {
	var o []*DTBCustomerAddress

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to DTBCustomerAddress slice")
	}

	if len(dtbCustomerAddressAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DTBCustomerAddress records in the query.
func (q dtbCustomerAddressQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count dtb_customer_address rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dtbCustomerAddressQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if dtb_customer_address exists")
	}

	return count > 0, nil
}

// Customer pointed to by the foreign key.
func (o *DTBCustomerAddress) Customer(mods ...qm.QueryMod) dtbCustomerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.CustomerID),
	}

	queryMods = append(queryMods, mods...)

	query := DTBCustomers(queryMods...)
	queries.SetFrom(query.Query, "`dtb_customer`")

	return query
}

// Pref pointed to by the foreign key.
func (o *DTBCustomerAddress) Pref(mods ...qm.QueryMod) mtbPrefQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.PrefID),
	}

	queryMods = append(queryMods, mods...)

	query := MTBPrefs(queryMods...)
	queries.SetFrom(query.Query, "`mtb_pref`")

	return query
}

// Country pointed to by the foreign key.
func (o *DTBCustomerAddress) Country(mods ...qm.QueryMod) mtbCountryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.CountryID),
	}

	queryMods = append(queryMods, mods...)

	query := MTBCountries(queryMods...)
	queries.SetFrom(query.Query, "`mtb_country`")

	return query
}

// LoadCustomer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dtbCustomerAddressL) LoadCustomer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBCustomerAddress interface{}, mods queries.Applicator) error {
	var slice []*DTBCustomerAddress
	var object *DTBCustomerAddress

	if singular {
		object = maybeDTBCustomerAddress.(*DTBCustomerAddress)
	} else {
		slice = *maybeDTBCustomerAddress.(*[]*DTBCustomerAddress)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbCustomerAddressR{}
		}
		if !queries.IsNil(object.CustomerID) {
			args = append(args, object.CustomerID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbCustomerAddressR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CustomerID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CustomerID) {
				args = append(args, obj.CustomerID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_customer`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DTBCustomer")
	}

	var resultSlice []*DTBCustomer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DTBCustomer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dtb_customer")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_customer")
	}

	if len(dtbCustomerAddressAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Customer = foreign
		if foreign.R == nil {
			foreign.R = &dtbCustomerR{}
		}
		foreign.R.CustomerDTBCustomerAddresses = append(foreign.R.CustomerDTBCustomerAddresses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CustomerID, foreign.ID) {
				local.R.Customer = foreign
				if foreign.R == nil {
					foreign.R = &dtbCustomerR{}
				}
				foreign.R.CustomerDTBCustomerAddresses = append(foreign.R.CustomerDTBCustomerAddresses, local)
				break
			}
		}
	}

	return nil
}

// LoadPref allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dtbCustomerAddressL) LoadPref(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBCustomerAddress interface{}, mods queries.Applicator) error {
	var slice []*DTBCustomerAddress
	var object *DTBCustomerAddress

	if singular {
		object = maybeDTBCustomerAddress.(*DTBCustomerAddress)
	} else {
		slice = *maybeDTBCustomerAddress.(*[]*DTBCustomerAddress)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbCustomerAddressR{}
		}
		if !queries.IsNil(object.PrefID) {
			args = append(args, object.PrefID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbCustomerAddressR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PrefID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PrefID) {
				args = append(args, obj.PrefID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`mtb_pref`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MTBPref")
	}

	var resultSlice []*MTBPref
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MTBPref")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mtb_pref")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mtb_pref")
	}

	if len(dtbCustomerAddressAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Pref = foreign
		if foreign.R == nil {
			foreign.R = &mtbPrefR{}
		}
		foreign.R.PrefDTBCustomerAddresses = append(foreign.R.PrefDTBCustomerAddresses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PrefID, foreign.ID) {
				local.R.Pref = foreign
				if foreign.R == nil {
					foreign.R = &mtbPrefR{}
				}
				foreign.R.PrefDTBCustomerAddresses = append(foreign.R.PrefDTBCustomerAddresses, local)
				break
			}
		}
	}

	return nil
}

// LoadCountry allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dtbCustomerAddressL) LoadCountry(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBCustomerAddress interface{}, mods queries.Applicator) error {
	var slice []*DTBCustomerAddress
	var object *DTBCustomerAddress

	if singular {
		object = maybeDTBCustomerAddress.(*DTBCustomerAddress)
	} else {
		slice = *maybeDTBCustomerAddress.(*[]*DTBCustomerAddress)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbCustomerAddressR{}
		}
		if !queries.IsNil(object.CountryID) {
			args = append(args, object.CountryID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbCustomerAddressR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CountryID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CountryID) {
				args = append(args, obj.CountryID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`mtb_country`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MTBCountry")
	}

	var resultSlice []*MTBCountry
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MTBCountry")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mtb_country")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mtb_country")
	}

	if len(dtbCustomerAddressAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Country = foreign
		if foreign.R == nil {
			foreign.R = &mtbCountryR{}
		}
		foreign.R.CountryDTBCustomerAddresses = append(foreign.R.CountryDTBCustomerAddresses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CountryID, foreign.ID) {
				local.R.Country = foreign
				if foreign.R == nil {
					foreign.R = &mtbCountryR{}
				}
				foreign.R.CountryDTBCustomerAddresses = append(foreign.R.CountryDTBCustomerAddresses, local)
				break
			}
		}
	}

	return nil
}

// SetCustomer of the dtbCustomerAddress to the related item.
// Sets o.R.Customer to related.
// Adds o to related.R.CustomerDTBCustomerAddresses.
func (o *DTBCustomerAddress) SetCustomer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DTBCustomer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `dtb_customer_address` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"customer_id"}),
		strmangle.WhereClause("`", "`", 0, dtbCustomerAddressPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CustomerID, related.ID)
	if o.R == nil {
		o.R = &dtbCustomerAddressR{
			Customer: related,
		}
	} else {
		o.R.Customer = related
	}

	if related.R == nil {
		related.R = &dtbCustomerR{
			CustomerDTBCustomerAddresses: DTBCustomerAddressSlice{o},
		}
	} else {
		related.R.CustomerDTBCustomerAddresses = append(related.R.CustomerDTBCustomerAddresses, o)
	}

	return nil
}

// RemoveCustomer relationship.
// Sets o.R.Customer to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *DTBCustomerAddress) RemoveCustomer(ctx context.Context, exec boil.ContextExecutor, related *DTBCustomer) error {
	var err error

	queries.SetScanner(&o.CustomerID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("customer_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Customer = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CustomerDTBCustomerAddresses {
		if queries.Equal(o.CustomerID, ri.CustomerID) {
			continue
		}

		ln := len(related.R.CustomerDTBCustomerAddresses)
		if ln > 1 && i < ln-1 {
			related.R.CustomerDTBCustomerAddresses[i] = related.R.CustomerDTBCustomerAddresses[ln-1]
		}
		related.R.CustomerDTBCustomerAddresses = related.R.CustomerDTBCustomerAddresses[:ln-1]
		break
	}
	return nil
}

// SetPref of the dtbCustomerAddress to the related item.
// Sets o.R.Pref to related.
// Adds o to related.R.PrefDTBCustomerAddresses.
func (o *DTBCustomerAddress) SetPref(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MTBPref) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `dtb_customer_address` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"pref_id"}),
		strmangle.WhereClause("`", "`", 0, dtbCustomerAddressPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PrefID, related.ID)
	if o.R == nil {
		o.R = &dtbCustomerAddressR{
			Pref: related,
		}
	} else {
		o.R.Pref = related
	}

	if related.R == nil {
		related.R = &mtbPrefR{
			PrefDTBCustomerAddresses: DTBCustomerAddressSlice{o},
		}
	} else {
		related.R.PrefDTBCustomerAddresses = append(related.R.PrefDTBCustomerAddresses, o)
	}

	return nil
}

// RemovePref relationship.
// Sets o.R.Pref to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *DTBCustomerAddress) RemovePref(ctx context.Context, exec boil.ContextExecutor, related *MTBPref) error {
	var err error

	queries.SetScanner(&o.PrefID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("pref_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Pref = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PrefDTBCustomerAddresses {
		if queries.Equal(o.PrefID, ri.PrefID) {
			continue
		}

		ln := len(related.R.PrefDTBCustomerAddresses)
		if ln > 1 && i < ln-1 {
			related.R.PrefDTBCustomerAddresses[i] = related.R.PrefDTBCustomerAddresses[ln-1]
		}
		related.R.PrefDTBCustomerAddresses = related.R.PrefDTBCustomerAddresses[:ln-1]
		break
	}
	return nil
}

// SetCountry of the dtbCustomerAddress to the related item.
// Sets o.R.Country to related.
// Adds o to related.R.CountryDTBCustomerAddresses.
func (o *DTBCustomerAddress) SetCountry(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MTBCountry) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `dtb_customer_address` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"country_id"}),
		strmangle.WhereClause("`", "`", 0, dtbCustomerAddressPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CountryID, related.ID)
	if o.R == nil {
		o.R = &dtbCustomerAddressR{
			Country: related,
		}
	} else {
		o.R.Country = related
	}

	if related.R == nil {
		related.R = &mtbCountryR{
			CountryDTBCustomerAddresses: DTBCustomerAddressSlice{o},
		}
	} else {
		related.R.CountryDTBCustomerAddresses = append(related.R.CountryDTBCustomerAddresses, o)
	}

	return nil
}

// RemoveCountry relationship.
// Sets o.R.Country to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *DTBCustomerAddress) RemoveCountry(ctx context.Context, exec boil.ContextExecutor, related *MTBCountry) error {
	var err error

	queries.SetScanner(&o.CountryID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("country_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Country = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CountryDTBCustomerAddresses {
		if queries.Equal(o.CountryID, ri.CountryID) {
			continue
		}

		ln := len(related.R.CountryDTBCustomerAddresses)
		if ln > 1 && i < ln-1 {
			related.R.CountryDTBCustomerAddresses[i] = related.R.CountryDTBCustomerAddresses[ln-1]
		}
		related.R.CountryDTBCustomerAddresses = related.R.CountryDTBCustomerAddresses[:ln-1]
		break
	}
	return nil
}

// DTBCustomerAddresses retrieves all the records using an executor.
func DTBCustomerAddresses(mods ...qm.QueryMod) dtbCustomerAddressQuery {
	mods = append(mods, qm.From("`dtb_customer_address`"))
	return dtbCustomerAddressQuery{NewQuery(mods...)}
}

// FindDTBCustomerAddress retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDTBCustomerAddress(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*DTBCustomerAddress, error) {
	dtbCustomerAddressObj := &DTBCustomerAddress{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `dtb_customer_address` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, dtbCustomerAddressObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from dtb_customer_address")
	}

	return dtbCustomerAddressObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DTBCustomerAddress) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no dtb_customer_address provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dtbCustomerAddressColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dtbCustomerAddressInsertCacheMut.RLock()
	cache, cached := dtbCustomerAddressInsertCache[key]
	dtbCustomerAddressInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dtbCustomerAddressColumns,
			dtbCustomerAddressColumnsWithDefault,
			dtbCustomerAddressColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dtbCustomerAddressType, dtbCustomerAddressMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dtbCustomerAddressType, dtbCustomerAddressMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `dtb_customer_address` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `dtb_customer_address` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `dtb_customer_address` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dtbCustomerAddressPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into dtb_customer_address")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == dtbCustomerAddressMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for dtb_customer_address")
	}

CacheNoHooks:
	if !cached {
		dtbCustomerAddressInsertCacheMut.Lock()
		dtbCustomerAddressInsertCache[key] = cache
		dtbCustomerAddressInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DTBCustomerAddress.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DTBCustomerAddress) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dtbCustomerAddressUpdateCacheMut.RLock()
	cache, cached := dtbCustomerAddressUpdateCache[key]
	dtbCustomerAddressUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dtbCustomerAddressColumns,
			dtbCustomerAddressPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update dtb_customer_address, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `dtb_customer_address` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dtbCustomerAddressPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dtbCustomerAddressType, dtbCustomerAddressMapping, append(wl, dtbCustomerAddressPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update dtb_customer_address row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for dtb_customer_address")
	}

	if !cached {
		dtbCustomerAddressUpdateCacheMut.Lock()
		dtbCustomerAddressUpdateCache[key] = cache
		dtbCustomerAddressUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dtbCustomerAddressQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for dtb_customer_address")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for dtb_customer_address")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DTBCustomerAddressSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbCustomerAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `dtb_customer_address` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbCustomerAddressPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in dtbCustomerAddress slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all dtbCustomerAddress")
	}
	return rowsAff, nil
}

var mySQLDTBCustomerAddressUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DTBCustomerAddress) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no dtb_customer_address provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dtbCustomerAddressColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDTBCustomerAddressUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dtbCustomerAddressUpsertCacheMut.RLock()
	cache, cached := dtbCustomerAddressUpsertCache[key]
	dtbCustomerAddressUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dtbCustomerAddressColumns,
			dtbCustomerAddressColumnsWithDefault,
			dtbCustomerAddressColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			dtbCustomerAddressColumns,
			dtbCustomerAddressPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("model: unable to upsert dtb_customer_address, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "dtb_customer_address", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `dtb_customer_address` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dtbCustomerAddressType, dtbCustomerAddressMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dtbCustomerAddressType, dtbCustomerAddressMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for dtb_customer_address")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == dtbCustomerAddressMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dtbCustomerAddressType, dtbCustomerAddressMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for dtb_customer_address")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for dtb_customer_address")
	}

CacheNoHooks:
	if !cached {
		dtbCustomerAddressUpsertCacheMut.Lock()
		dtbCustomerAddressUpsertCache[key] = cache
		dtbCustomerAddressUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DTBCustomerAddress record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DTBCustomerAddress) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no DTBCustomerAddress provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dtbCustomerAddressPrimaryKeyMapping)
	sql := "DELETE FROM `dtb_customer_address` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from dtb_customer_address")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for dtb_customer_address")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dtbCustomerAddressQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no dtbCustomerAddressQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from dtb_customer_address")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for dtb_customer_address")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DTBCustomerAddressSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no DTBCustomerAddress slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(dtbCustomerAddressBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbCustomerAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `dtb_customer_address` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbCustomerAddressPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from dtbCustomerAddress slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for dtb_customer_address")
	}

	if len(dtbCustomerAddressAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DTBCustomerAddress) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDTBCustomerAddress(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DTBCustomerAddressSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DTBCustomerAddressSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbCustomerAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `dtb_customer_address`.* FROM `dtb_customer_address` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbCustomerAddressPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in DTBCustomerAddressSlice")
	}

	*o = slice

	return nil
}

// DTBCustomerAddressExists checks if the DTBCustomerAddress row exists.
func DTBCustomerAddressExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `dtb_customer_address` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if dtb_customer_address exists")
	}

	return exists, nil
}
