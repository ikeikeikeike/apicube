// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDTBMailHistories(t *testing.T) {
	t.Parallel()

	query := DTBMailHistories()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDTBMailHistoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBMailHistory{}
	if err = randomize.Struct(seed, o, dtbMailHistoryDBTypes, true, dtbMailHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMailHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBMailHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBMailHistoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBMailHistory{}
	if err = randomize.Struct(seed, o, dtbMailHistoryDBTypes, true, dtbMailHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMailHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DTBMailHistories().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBMailHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBMailHistoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBMailHistory{}
	if err = randomize.Struct(seed, o, dtbMailHistoryDBTypes, true, dtbMailHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMailHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBMailHistorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBMailHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBMailHistoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBMailHistory{}
	if err = randomize.Struct(seed, o, dtbMailHistoryDBTypes, true, dtbMailHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMailHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DTBMailHistoryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DTBMailHistory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DTBMailHistoryExists to return true, but got false.")
	}
}

func testDTBMailHistoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBMailHistory{}
	if err = randomize.Struct(seed, o, dtbMailHistoryDBTypes, true, dtbMailHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMailHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dtbMailHistoryFound, err := FindDTBMailHistory(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if dtbMailHistoryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDTBMailHistoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBMailHistory{}
	if err = randomize.Struct(seed, o, dtbMailHistoryDBTypes, true, dtbMailHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMailHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DTBMailHistories().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDTBMailHistoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBMailHistory{}
	if err = randomize.Struct(seed, o, dtbMailHistoryDBTypes, true, dtbMailHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMailHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DTBMailHistories().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDTBMailHistoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtbMailHistoryOne := &DTBMailHistory{}
	dtbMailHistoryTwo := &DTBMailHistory{}
	if err = randomize.Struct(seed, dtbMailHistoryOne, dtbMailHistoryDBTypes, false, dtbMailHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMailHistory struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbMailHistoryTwo, dtbMailHistoryDBTypes, false, dtbMailHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMailHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbMailHistoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbMailHistoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBMailHistories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDTBMailHistoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dtbMailHistoryOne := &DTBMailHistory{}
	dtbMailHistoryTwo := &DTBMailHistory{}
	if err = randomize.Struct(seed, dtbMailHistoryOne, dtbMailHistoryDBTypes, false, dtbMailHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMailHistory struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbMailHistoryTwo, dtbMailHistoryDBTypes, false, dtbMailHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMailHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbMailHistoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbMailHistoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBMailHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dtbMailHistoryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBMailHistory) error {
	*o = DTBMailHistory{}
	return nil
}

func dtbMailHistoryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBMailHistory) error {
	*o = DTBMailHistory{}
	return nil
}

func dtbMailHistoryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DTBMailHistory) error {
	*o = DTBMailHistory{}
	return nil
}

func dtbMailHistoryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBMailHistory) error {
	*o = DTBMailHistory{}
	return nil
}

func dtbMailHistoryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBMailHistory) error {
	*o = DTBMailHistory{}
	return nil
}

func dtbMailHistoryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBMailHistory) error {
	*o = DTBMailHistory{}
	return nil
}

func dtbMailHistoryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBMailHistory) error {
	*o = DTBMailHistory{}
	return nil
}

func dtbMailHistoryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBMailHistory) error {
	*o = DTBMailHistory{}
	return nil
}

func dtbMailHistoryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBMailHistory) error {
	*o = DTBMailHistory{}
	return nil
}

func testDTBMailHistoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DTBMailHistory{}
	o := &DTBMailHistory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dtbMailHistoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBMailHistory object: %s", err)
	}

	AddDTBMailHistoryHook(boil.BeforeInsertHook, dtbMailHistoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dtbMailHistoryBeforeInsertHooks = []DTBMailHistoryHook{}

	AddDTBMailHistoryHook(boil.AfterInsertHook, dtbMailHistoryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dtbMailHistoryAfterInsertHooks = []DTBMailHistoryHook{}

	AddDTBMailHistoryHook(boil.AfterSelectHook, dtbMailHistoryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dtbMailHistoryAfterSelectHooks = []DTBMailHistoryHook{}

	AddDTBMailHistoryHook(boil.BeforeUpdateHook, dtbMailHistoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dtbMailHistoryBeforeUpdateHooks = []DTBMailHistoryHook{}

	AddDTBMailHistoryHook(boil.AfterUpdateHook, dtbMailHistoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dtbMailHistoryAfterUpdateHooks = []DTBMailHistoryHook{}

	AddDTBMailHistoryHook(boil.BeforeDeleteHook, dtbMailHistoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dtbMailHistoryBeforeDeleteHooks = []DTBMailHistoryHook{}

	AddDTBMailHistoryHook(boil.AfterDeleteHook, dtbMailHistoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dtbMailHistoryAfterDeleteHooks = []DTBMailHistoryHook{}

	AddDTBMailHistoryHook(boil.BeforeUpsertHook, dtbMailHistoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dtbMailHistoryBeforeUpsertHooks = []DTBMailHistoryHook{}

	AddDTBMailHistoryHook(boil.AfterUpsertHook, dtbMailHistoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dtbMailHistoryAfterUpsertHooks = []DTBMailHistoryHook{}
}

func testDTBMailHistoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBMailHistory{}
	if err = randomize.Struct(seed, o, dtbMailHistoryDBTypes, true, dtbMailHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMailHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBMailHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBMailHistoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBMailHistory{}
	if err = randomize.Struct(seed, o, dtbMailHistoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DTBMailHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dtbMailHistoryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DTBMailHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBMailHistoryToOneDTBMemberUsingCreator(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBMailHistory
	var foreign DTBMember

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbMailHistoryDBTypes, true, dtbMailHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMailHistory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dtbMemberDBTypes, false, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CreatorID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Creator().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBMailHistorySlice{&local}
	if err = local.L.LoadCreator(ctx, tx, false, (*[]*DTBMailHistory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Creator == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Creator = nil
	if err = local.L.LoadCreator(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Creator == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBMailHistoryToOneDTBOrderUsingOrder(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBMailHistory
	var foreign DTBOrder

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbMailHistoryDBTypes, true, dtbMailHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMailHistory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dtbOrderDBTypes, false, dtbOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrder struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.OrderID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Order().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBMailHistorySlice{&local}
	if err = local.L.LoadOrder(ctx, tx, false, (*[]*DTBMailHistory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Order == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Order = nil
	if err = local.L.LoadOrder(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Order == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBMailHistoryToOneSetOpDTBMemberUsingCreator(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMailHistory
	var b, c DTBMember

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMailHistoryDBTypes, false, strmangle.SetComplement(dtbMailHistoryPrimaryKeyColumns, dtbMailHistoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DTBMember{&b, &c} {
		err = a.SetCreator(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Creator != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CreatorDTBMailHistories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CreatorID, x.ID) {
			t.Error("foreign key was wrong value", a.CreatorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CreatorID))
		reflect.Indirect(reflect.ValueOf(&a.CreatorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CreatorID, x.ID) {
			t.Error("foreign key was wrong value", a.CreatorID, x.ID)
		}
	}
}

func testDTBMailHistoryToOneRemoveOpDTBMemberUsingCreator(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMailHistory
	var b DTBMember

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMailHistoryDBTypes, false, strmangle.SetComplement(dtbMailHistoryPrimaryKeyColumns, dtbMailHistoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCreator(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCreator(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Creator().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Creator != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CreatorID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CreatorDTBMailHistories) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBMailHistoryToOneSetOpDTBOrderUsingOrder(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMailHistory
	var b, c DTBOrder

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMailHistoryDBTypes, false, strmangle.SetComplement(dtbMailHistoryPrimaryKeyColumns, dtbMailHistoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DTBOrder{&b, &c} {
		err = a.SetOrder(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Order != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OrderDTBMailHistories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.OrderID, x.ID) {
			t.Error("foreign key was wrong value", a.OrderID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OrderID))
		reflect.Indirect(reflect.ValueOf(&a.OrderID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.OrderID, x.ID) {
			t.Error("foreign key was wrong value", a.OrderID, x.ID)
		}
	}
}

func testDTBMailHistoryToOneRemoveOpDTBOrderUsingOrder(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMailHistory
	var b DTBOrder

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMailHistoryDBTypes, false, strmangle.SetComplement(dtbMailHistoryPrimaryKeyColumns, dtbMailHistoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetOrder(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveOrder(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Order().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Order != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.OrderID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.OrderDTBMailHistories) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBMailHistoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBMailHistory{}
	if err = randomize.Struct(seed, o, dtbMailHistoryDBTypes, true, dtbMailHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMailHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBMailHistoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBMailHistory{}
	if err = randomize.Struct(seed, o, dtbMailHistoryDBTypes, true, dtbMailHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMailHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBMailHistorySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBMailHistoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBMailHistory{}
	if err = randomize.Struct(seed, o, dtbMailHistoryDBTypes, true, dtbMailHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMailHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBMailHistories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dtbMailHistoryDBTypes = map[string]string{`ID`: `int`, `OrderID`: `int`, `CreatorID`: `int`, `SendDate`: `datetime`, `MailSubject`: `varchar`, `MailBody`: `longtext`, `MailHTMLBody`: `longtext`, `DiscriminatorType`: `varchar`}
	_                     = bytes.MinRead
)

func testDTBMailHistoriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dtbMailHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dtbMailHistoryColumns) == len(dtbMailHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBMailHistory{}
	if err = randomize.Struct(seed, o, dtbMailHistoryDBTypes, true, dtbMailHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMailHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBMailHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbMailHistoryDBTypes, true, dtbMailHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBMailHistory struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDTBMailHistoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dtbMailHistoryColumns) == len(dtbMailHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBMailHistory{}
	if err = randomize.Struct(seed, o, dtbMailHistoryDBTypes, true, dtbMailHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMailHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBMailHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbMailHistoryDBTypes, true, dtbMailHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBMailHistory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dtbMailHistoryColumns, dtbMailHistoryPrimaryKeyColumns) {
		fields = dtbMailHistoryColumns
	} else {
		fields = strmangle.SetComplement(
			dtbMailHistoryColumns,
			dtbMailHistoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DTBMailHistorySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDTBMailHistoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(dtbMailHistoryColumns) == len(dtbMailHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDTBMailHistoryUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DTBMailHistory{}
	if err = randomize.Struct(seed, &o, dtbMailHistoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBMailHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBMailHistory: %s", err)
	}

	count, err := DTBMailHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dtbMailHistoryDBTypes, false, dtbMailHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBMailHistory struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBMailHistory: %s", err)
	}

	count, err = DTBMailHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
