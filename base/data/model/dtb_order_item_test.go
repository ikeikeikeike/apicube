// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDTBOrderItems(t *testing.T) {
	t.Parallel()

	query := DTBOrderItems()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDTBOrderItemsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBOrderItem{}
	if err = randomize.Struct(seed, o, dtbOrderItemDBTypes, true, dtbOrderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBOrderItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBOrderItemsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBOrderItem{}
	if err = randomize.Struct(seed, o, dtbOrderItemDBTypes, true, dtbOrderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DTBOrderItems().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBOrderItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBOrderItemsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBOrderItem{}
	if err = randomize.Struct(seed, o, dtbOrderItemDBTypes, true, dtbOrderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBOrderItemSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBOrderItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBOrderItemsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBOrderItem{}
	if err = randomize.Struct(seed, o, dtbOrderItemDBTypes, true, dtbOrderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DTBOrderItemExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DTBOrderItem exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DTBOrderItemExists to return true, but got false.")
	}
}

func testDTBOrderItemsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBOrderItem{}
	if err = randomize.Struct(seed, o, dtbOrderItemDBTypes, true, dtbOrderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dtbOrderItemFound, err := FindDTBOrderItem(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if dtbOrderItemFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDTBOrderItemsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBOrderItem{}
	if err = randomize.Struct(seed, o, dtbOrderItemDBTypes, true, dtbOrderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DTBOrderItems().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDTBOrderItemsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBOrderItem{}
	if err = randomize.Struct(seed, o, dtbOrderItemDBTypes, true, dtbOrderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DTBOrderItems().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDTBOrderItemsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtbOrderItemOne := &DTBOrderItem{}
	dtbOrderItemTwo := &DTBOrderItem{}
	if err = randomize.Struct(seed, dtbOrderItemOne, dtbOrderItemDBTypes, false, dtbOrderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrderItem struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbOrderItemTwo, dtbOrderItemDBTypes, false, dtbOrderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbOrderItemOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbOrderItemTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBOrderItems().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDTBOrderItemsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dtbOrderItemOne := &DTBOrderItem{}
	dtbOrderItemTwo := &DTBOrderItem{}
	if err = randomize.Struct(seed, dtbOrderItemOne, dtbOrderItemDBTypes, false, dtbOrderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrderItem struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbOrderItemTwo, dtbOrderItemDBTypes, false, dtbOrderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbOrderItemOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbOrderItemTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBOrderItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dtbOrderItemBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBOrderItem) error {
	*o = DTBOrderItem{}
	return nil
}

func dtbOrderItemAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBOrderItem) error {
	*o = DTBOrderItem{}
	return nil
}

func dtbOrderItemAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DTBOrderItem) error {
	*o = DTBOrderItem{}
	return nil
}

func dtbOrderItemBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBOrderItem) error {
	*o = DTBOrderItem{}
	return nil
}

func dtbOrderItemAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBOrderItem) error {
	*o = DTBOrderItem{}
	return nil
}

func dtbOrderItemBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBOrderItem) error {
	*o = DTBOrderItem{}
	return nil
}

func dtbOrderItemAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBOrderItem) error {
	*o = DTBOrderItem{}
	return nil
}

func dtbOrderItemBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBOrderItem) error {
	*o = DTBOrderItem{}
	return nil
}

func dtbOrderItemAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBOrderItem) error {
	*o = DTBOrderItem{}
	return nil
}

func testDTBOrderItemsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DTBOrderItem{}
	o := &DTBOrderItem{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dtbOrderItemDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBOrderItem object: %s", err)
	}

	AddDTBOrderItemHook(boil.BeforeInsertHook, dtbOrderItemBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dtbOrderItemBeforeInsertHooks = []DTBOrderItemHook{}

	AddDTBOrderItemHook(boil.AfterInsertHook, dtbOrderItemAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dtbOrderItemAfterInsertHooks = []DTBOrderItemHook{}

	AddDTBOrderItemHook(boil.AfterSelectHook, dtbOrderItemAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dtbOrderItemAfterSelectHooks = []DTBOrderItemHook{}

	AddDTBOrderItemHook(boil.BeforeUpdateHook, dtbOrderItemBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dtbOrderItemBeforeUpdateHooks = []DTBOrderItemHook{}

	AddDTBOrderItemHook(boil.AfterUpdateHook, dtbOrderItemAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dtbOrderItemAfterUpdateHooks = []DTBOrderItemHook{}

	AddDTBOrderItemHook(boil.BeforeDeleteHook, dtbOrderItemBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dtbOrderItemBeforeDeleteHooks = []DTBOrderItemHook{}

	AddDTBOrderItemHook(boil.AfterDeleteHook, dtbOrderItemAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dtbOrderItemAfterDeleteHooks = []DTBOrderItemHook{}

	AddDTBOrderItemHook(boil.BeforeUpsertHook, dtbOrderItemBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dtbOrderItemBeforeUpsertHooks = []DTBOrderItemHook{}

	AddDTBOrderItemHook(boil.AfterUpsertHook, dtbOrderItemAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dtbOrderItemAfterUpsertHooks = []DTBOrderItemHook{}
}

func testDTBOrderItemsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBOrderItem{}
	if err = randomize.Struct(seed, o, dtbOrderItemDBTypes, true, dtbOrderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBOrderItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBOrderItemsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBOrderItem{}
	if err = randomize.Struct(seed, o, dtbOrderItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DTBOrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dtbOrderItemColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DTBOrderItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBOrderItemToOneMTBRoundingTypeUsingRoundingType(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBOrderItem
	var foreign MTBRoundingType

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbOrderItemDBTypes, true, dtbOrderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrderItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, mtbRoundingTypeDBTypes, false, mtbRoundingTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBRoundingType struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.RoundingTypeID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.RoundingType().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBOrderItemSlice{&local}
	if err = local.L.LoadRoundingType(ctx, tx, false, (*[]*DTBOrderItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RoundingType == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.RoundingType = nil
	if err = local.L.LoadRoundingType(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RoundingType == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBOrderItemToOneDTBProductClassUsingProductClass(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBOrderItem
	var foreign DTBProductClass

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbOrderItemDBTypes, true, dtbOrderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrderItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dtbProductClassDBTypes, false, dtbProductClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductClass struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ProductClassID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ProductClass().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBOrderItemSlice{&local}
	if err = local.L.LoadProductClass(ctx, tx, false, (*[]*DTBOrderItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ProductClass == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ProductClass = nil
	if err = local.L.LoadProductClass(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ProductClass == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBOrderItemToOneDTBProductUsingProduct(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBOrderItem
	var foreign DTBProduct

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbOrderItemDBTypes, true, dtbOrderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrderItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dtbProductDBTypes, false, dtbProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProduct struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ProductID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Product().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBOrderItemSlice{&local}
	if err = local.L.LoadProduct(ctx, tx, false, (*[]*DTBOrderItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Product == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Product = nil
	if err = local.L.LoadProduct(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Product == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBOrderItemToOneDTBShippingUsingShipping(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBOrderItem
	var foreign DTBShipping

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbOrderItemDBTypes, true, dtbOrderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrderItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dtbShippingDBTypes, false, dtbShippingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBShipping struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ShippingID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Shipping().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBOrderItemSlice{&local}
	if err = local.L.LoadShipping(ctx, tx, false, (*[]*DTBOrderItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Shipping == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Shipping = nil
	if err = local.L.LoadShipping(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Shipping == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBOrderItemToOneMTBTaxTypeUsingTaxType(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBOrderItem
	var foreign MTBTaxType

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbOrderItemDBTypes, true, dtbOrderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrderItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, mtbTaxTypeDBTypes, false, mtbTaxTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBTaxType struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.TaxTypeID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.TaxType().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBOrderItemSlice{&local}
	if err = local.L.LoadTaxType(ctx, tx, false, (*[]*DTBOrderItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.TaxType == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.TaxType = nil
	if err = local.L.LoadTaxType(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.TaxType == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBOrderItemToOneDTBOrderUsingOrder(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBOrderItem
	var foreign DTBOrder

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbOrderItemDBTypes, true, dtbOrderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrderItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dtbOrderDBTypes, false, dtbOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrder struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.OrderID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Order().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBOrderItemSlice{&local}
	if err = local.L.LoadOrder(ctx, tx, false, (*[]*DTBOrderItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Order == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Order = nil
	if err = local.L.LoadOrder(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Order == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBOrderItemToOneMTBTaxDisplayTypeUsingTaxDisplayType(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBOrderItem
	var foreign MTBTaxDisplayType

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbOrderItemDBTypes, true, dtbOrderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrderItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, mtbTaxDisplayTypeDBTypes, false, mtbTaxDisplayTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBTaxDisplayType struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.TaxDisplayTypeID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.TaxDisplayType().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBOrderItemSlice{&local}
	if err = local.L.LoadTaxDisplayType(ctx, tx, false, (*[]*DTBOrderItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.TaxDisplayType == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.TaxDisplayType = nil
	if err = local.L.LoadTaxDisplayType(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.TaxDisplayType == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBOrderItemToOneMTBOrderItemTypeUsingOrderItemType(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBOrderItem
	var foreign MTBOrderItemType

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbOrderItemDBTypes, true, dtbOrderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrderItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, mtbOrderItemTypeDBTypes, false, mtbOrderItemTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBOrderItemType struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.OrderItemTypeID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.OrderItemType().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBOrderItemSlice{&local}
	if err = local.L.LoadOrderItemType(ctx, tx, false, (*[]*DTBOrderItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OrderItemType == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.OrderItemType = nil
	if err = local.L.LoadOrderItemType(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OrderItemType == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBOrderItemToOneSetOpMTBRoundingTypeUsingRoundingType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrderItem
	var b, c MTBRoundingType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderItemDBTypes, false, strmangle.SetComplement(dtbOrderItemPrimaryKeyColumns, dtbOrderItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbRoundingTypeDBTypes, false, strmangle.SetComplement(mtbRoundingTypePrimaryKeyColumns, mtbRoundingTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mtbRoundingTypeDBTypes, false, strmangle.SetComplement(mtbRoundingTypePrimaryKeyColumns, mtbRoundingTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MTBRoundingType{&b, &c} {
		err = a.SetRoundingType(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.RoundingType != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RoundingTypeDTBOrderItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.RoundingTypeID, x.ID) {
			t.Error("foreign key was wrong value", a.RoundingTypeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RoundingTypeID))
		reflect.Indirect(reflect.ValueOf(&a.RoundingTypeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.RoundingTypeID, x.ID) {
			t.Error("foreign key was wrong value", a.RoundingTypeID, x.ID)
		}
	}
}

func testDTBOrderItemToOneRemoveOpMTBRoundingTypeUsingRoundingType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrderItem
	var b MTBRoundingType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderItemDBTypes, false, strmangle.SetComplement(dtbOrderItemPrimaryKeyColumns, dtbOrderItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbRoundingTypeDBTypes, false, strmangle.SetComplement(mtbRoundingTypePrimaryKeyColumns, mtbRoundingTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetRoundingType(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveRoundingType(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.RoundingType().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.RoundingType != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.RoundingTypeID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.RoundingTypeDTBOrderItems) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBOrderItemToOneSetOpDTBProductClassUsingProductClass(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrderItem
	var b, c DTBProductClass

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderItemDBTypes, false, strmangle.SetComplement(dtbOrderItemPrimaryKeyColumns, dtbOrderItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbProductClassDBTypes, false, strmangle.SetComplement(dtbProductClassPrimaryKeyColumns, dtbProductClassColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbProductClassDBTypes, false, strmangle.SetComplement(dtbProductClassPrimaryKeyColumns, dtbProductClassColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DTBProductClass{&b, &c} {
		err = a.SetProductClass(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ProductClass != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProductClassDTBOrderItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ProductClassID, x.ID) {
			t.Error("foreign key was wrong value", a.ProductClassID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProductClassID))
		reflect.Indirect(reflect.ValueOf(&a.ProductClassID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ProductClassID, x.ID) {
			t.Error("foreign key was wrong value", a.ProductClassID, x.ID)
		}
	}
}

func testDTBOrderItemToOneRemoveOpDTBProductClassUsingProductClass(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrderItem
	var b DTBProductClass

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderItemDBTypes, false, strmangle.SetComplement(dtbOrderItemPrimaryKeyColumns, dtbOrderItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbProductClassDBTypes, false, strmangle.SetComplement(dtbProductClassPrimaryKeyColumns, dtbProductClassColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetProductClass(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveProductClass(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ProductClass().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ProductClass != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ProductClassID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ProductClassDTBOrderItems) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBOrderItemToOneSetOpDTBProductUsingProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrderItem
	var b, c DTBProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderItemDBTypes, false, strmangle.SetComplement(dtbOrderItemPrimaryKeyColumns, dtbOrderItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbProductDBTypes, false, strmangle.SetComplement(dtbProductPrimaryKeyColumns, dtbProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbProductDBTypes, false, strmangle.SetComplement(dtbProductPrimaryKeyColumns, dtbProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DTBProduct{&b, &c} {
		err = a.SetProduct(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Product != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProductDTBOrderItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ProductID, x.ID) {
			t.Error("foreign key was wrong value", a.ProductID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProductID))
		reflect.Indirect(reflect.ValueOf(&a.ProductID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ProductID, x.ID) {
			t.Error("foreign key was wrong value", a.ProductID, x.ID)
		}
	}
}

func testDTBOrderItemToOneRemoveOpDTBProductUsingProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrderItem
	var b DTBProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderItemDBTypes, false, strmangle.SetComplement(dtbOrderItemPrimaryKeyColumns, dtbOrderItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbProductDBTypes, false, strmangle.SetComplement(dtbProductPrimaryKeyColumns, dtbProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetProduct(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveProduct(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Product().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Product != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ProductID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ProductDTBOrderItems) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBOrderItemToOneSetOpDTBShippingUsingShipping(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrderItem
	var b, c DTBShipping

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderItemDBTypes, false, strmangle.SetComplement(dtbOrderItemPrimaryKeyColumns, dtbOrderItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbShippingDBTypes, false, strmangle.SetComplement(dtbShippingPrimaryKeyColumns, dtbShippingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbShippingDBTypes, false, strmangle.SetComplement(dtbShippingPrimaryKeyColumns, dtbShippingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DTBShipping{&b, &c} {
		err = a.SetShipping(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Shipping != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ShippingDTBOrderItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ShippingID, x.ID) {
			t.Error("foreign key was wrong value", a.ShippingID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ShippingID))
		reflect.Indirect(reflect.ValueOf(&a.ShippingID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ShippingID, x.ID) {
			t.Error("foreign key was wrong value", a.ShippingID, x.ID)
		}
	}
}

func testDTBOrderItemToOneRemoveOpDTBShippingUsingShipping(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrderItem
	var b DTBShipping

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderItemDBTypes, false, strmangle.SetComplement(dtbOrderItemPrimaryKeyColumns, dtbOrderItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbShippingDBTypes, false, strmangle.SetComplement(dtbShippingPrimaryKeyColumns, dtbShippingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetShipping(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveShipping(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Shipping().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Shipping != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ShippingID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ShippingDTBOrderItems) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBOrderItemToOneSetOpMTBTaxTypeUsingTaxType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrderItem
	var b, c MTBTaxType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderItemDBTypes, false, strmangle.SetComplement(dtbOrderItemPrimaryKeyColumns, dtbOrderItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbTaxTypeDBTypes, false, strmangle.SetComplement(mtbTaxTypePrimaryKeyColumns, mtbTaxTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mtbTaxTypeDBTypes, false, strmangle.SetComplement(mtbTaxTypePrimaryKeyColumns, mtbTaxTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MTBTaxType{&b, &c} {
		err = a.SetTaxType(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.TaxType != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TaxTypeDTBOrderItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.TaxTypeID, x.ID) {
			t.Error("foreign key was wrong value", a.TaxTypeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TaxTypeID))
		reflect.Indirect(reflect.ValueOf(&a.TaxTypeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.TaxTypeID, x.ID) {
			t.Error("foreign key was wrong value", a.TaxTypeID, x.ID)
		}
	}
}

func testDTBOrderItemToOneRemoveOpMTBTaxTypeUsingTaxType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrderItem
	var b MTBTaxType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderItemDBTypes, false, strmangle.SetComplement(dtbOrderItemPrimaryKeyColumns, dtbOrderItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbTaxTypeDBTypes, false, strmangle.SetComplement(mtbTaxTypePrimaryKeyColumns, mtbTaxTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetTaxType(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveTaxType(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.TaxType().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.TaxType != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.TaxTypeID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.TaxTypeDTBOrderItems) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBOrderItemToOneSetOpDTBOrderUsingOrder(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrderItem
	var b, c DTBOrder

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderItemDBTypes, false, strmangle.SetComplement(dtbOrderItemPrimaryKeyColumns, dtbOrderItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DTBOrder{&b, &c} {
		err = a.SetOrder(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Order != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OrderDTBOrderItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.OrderID, x.ID) {
			t.Error("foreign key was wrong value", a.OrderID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OrderID))
		reflect.Indirect(reflect.ValueOf(&a.OrderID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.OrderID, x.ID) {
			t.Error("foreign key was wrong value", a.OrderID, x.ID)
		}
	}
}

func testDTBOrderItemToOneRemoveOpDTBOrderUsingOrder(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrderItem
	var b DTBOrder

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderItemDBTypes, false, strmangle.SetComplement(dtbOrderItemPrimaryKeyColumns, dtbOrderItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetOrder(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveOrder(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Order().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Order != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.OrderID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.OrderDTBOrderItems) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBOrderItemToOneSetOpMTBTaxDisplayTypeUsingTaxDisplayType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrderItem
	var b, c MTBTaxDisplayType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderItemDBTypes, false, strmangle.SetComplement(dtbOrderItemPrimaryKeyColumns, dtbOrderItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbTaxDisplayTypeDBTypes, false, strmangle.SetComplement(mtbTaxDisplayTypePrimaryKeyColumns, mtbTaxDisplayTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mtbTaxDisplayTypeDBTypes, false, strmangle.SetComplement(mtbTaxDisplayTypePrimaryKeyColumns, mtbTaxDisplayTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MTBTaxDisplayType{&b, &c} {
		err = a.SetTaxDisplayType(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.TaxDisplayType != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TaxDisplayTypeDTBOrderItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.TaxDisplayTypeID, x.ID) {
			t.Error("foreign key was wrong value", a.TaxDisplayTypeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TaxDisplayTypeID))
		reflect.Indirect(reflect.ValueOf(&a.TaxDisplayTypeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.TaxDisplayTypeID, x.ID) {
			t.Error("foreign key was wrong value", a.TaxDisplayTypeID, x.ID)
		}
	}
}

func testDTBOrderItemToOneRemoveOpMTBTaxDisplayTypeUsingTaxDisplayType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrderItem
	var b MTBTaxDisplayType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderItemDBTypes, false, strmangle.SetComplement(dtbOrderItemPrimaryKeyColumns, dtbOrderItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbTaxDisplayTypeDBTypes, false, strmangle.SetComplement(mtbTaxDisplayTypePrimaryKeyColumns, mtbTaxDisplayTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetTaxDisplayType(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveTaxDisplayType(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.TaxDisplayType().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.TaxDisplayType != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.TaxDisplayTypeID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.TaxDisplayTypeDTBOrderItems) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBOrderItemToOneSetOpMTBOrderItemTypeUsingOrderItemType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrderItem
	var b, c MTBOrderItemType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderItemDBTypes, false, strmangle.SetComplement(dtbOrderItemPrimaryKeyColumns, dtbOrderItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbOrderItemTypeDBTypes, false, strmangle.SetComplement(mtbOrderItemTypePrimaryKeyColumns, mtbOrderItemTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mtbOrderItemTypeDBTypes, false, strmangle.SetComplement(mtbOrderItemTypePrimaryKeyColumns, mtbOrderItemTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MTBOrderItemType{&b, &c} {
		err = a.SetOrderItemType(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.OrderItemType != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OrderItemTypeDTBOrderItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.OrderItemTypeID, x.ID) {
			t.Error("foreign key was wrong value", a.OrderItemTypeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OrderItemTypeID))
		reflect.Indirect(reflect.ValueOf(&a.OrderItemTypeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.OrderItemTypeID, x.ID) {
			t.Error("foreign key was wrong value", a.OrderItemTypeID, x.ID)
		}
	}
}

func testDTBOrderItemToOneRemoveOpMTBOrderItemTypeUsingOrderItemType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrderItem
	var b MTBOrderItemType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderItemDBTypes, false, strmangle.SetComplement(dtbOrderItemPrimaryKeyColumns, dtbOrderItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbOrderItemTypeDBTypes, false, strmangle.SetComplement(mtbOrderItemTypePrimaryKeyColumns, mtbOrderItemTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetOrderItemType(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveOrderItemType(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.OrderItemType().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.OrderItemType != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.OrderItemTypeID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.OrderItemTypeDTBOrderItems) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBOrderItemsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBOrderItem{}
	if err = randomize.Struct(seed, o, dtbOrderItemDBTypes, true, dtbOrderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBOrderItemsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBOrderItem{}
	if err = randomize.Struct(seed, o, dtbOrderItemDBTypes, true, dtbOrderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBOrderItemSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBOrderItemsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBOrderItem{}
	if err = randomize.Struct(seed, o, dtbOrderItemDBTypes, true, dtbOrderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBOrderItems().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dtbOrderItemDBTypes = map[string]string{`ID`: `int`, `OrderID`: `int`, `ProductID`: `int`, `ProductClassID`: `int`, `ShippingID`: `int`, `RoundingTypeID`: `smallint`, `TaxTypeID`: `smallint`, `TaxDisplayTypeID`: `smallint`, `OrderItemTypeID`: `smallint`, `ProductName`: `varchar`, `ProductCode`: `varchar`, `ClassName1`: `varchar`, `ClassName2`: `varchar`, `ClassCategoryName1`: `varchar`, `ClassCategoryName2`: `varchar`, `Price`: `decimal`, `Quantity`: `decimal`, `Tax`: `decimal`, `TaxRate`: `decimal`, `TaxRuleID`: `smallint`, `CurrencyCode`: `varchar`, `ProcessorName`: `varchar`, `PointRate`: `decimal`, `DiscriminatorType`: `varchar`}
	_                   = bytes.MinRead
)

func testDTBOrderItemsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dtbOrderItemPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dtbOrderItemColumns) == len(dtbOrderItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBOrderItem{}
	if err = randomize.Struct(seed, o, dtbOrderItemDBTypes, true, dtbOrderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBOrderItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbOrderItemDBTypes, true, dtbOrderItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBOrderItem struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDTBOrderItemsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dtbOrderItemColumns) == len(dtbOrderItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBOrderItem{}
	if err = randomize.Struct(seed, o, dtbOrderItemDBTypes, true, dtbOrderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBOrderItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbOrderItemDBTypes, true, dtbOrderItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBOrderItem struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dtbOrderItemColumns, dtbOrderItemPrimaryKeyColumns) {
		fields = dtbOrderItemColumns
	} else {
		fields = strmangle.SetComplement(
			dtbOrderItemColumns,
			dtbOrderItemPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DTBOrderItemSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDTBOrderItemsUpsert(t *testing.T) {
	t.Parallel()

	if len(dtbOrderItemColumns) == len(dtbOrderItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDTBOrderItemUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DTBOrderItem{}
	if err = randomize.Struct(seed, &o, dtbOrderItemDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBOrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBOrderItem: %s", err)
	}

	count, err := DTBOrderItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dtbOrderItemDBTypes, false, dtbOrderItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBOrderItem struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBOrderItem: %s", err)
	}

	count, err = DTBOrderItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
