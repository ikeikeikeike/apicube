// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// MTBCountry is an object representing the database table.
type MTBCountry struct {
	ID                uint16 `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name              string `boil:"name" json:"name" toml:"name" yaml:"name"`
	SortNo            uint16 `boil:"sort_no" json:"sort_no" toml:"sort_no" yaml:"sort_no"`
	DiscriminatorType string `boil:"discriminator_type" json:"discriminator_type" toml:"discriminator_type" yaml:"discriminator_type"`

	R *mtbCountryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L mtbCountryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MTBCountryColumns = struct {
	ID                string
	Name              string
	SortNo            string
	DiscriminatorType string
}{
	ID:                "id",
	Name:              "name",
	SortNo:            "sort_no",
	DiscriminatorType: "discriminator_type",
}

// Generated where

var MTBCountryWhere = struct {
	ID                whereHelperuint16
	Name              whereHelperstring
	SortNo            whereHelperuint16
	DiscriminatorType whereHelperstring
}{
	ID:                whereHelperuint16{field: `id`},
	Name:              whereHelperstring{field: `name`},
	SortNo:            whereHelperuint16{field: `sort_no`},
	DiscriminatorType: whereHelperstring{field: `discriminator_type`},
}

// MTBCountryRels is where relationship names are stored.
var MTBCountryRels = struct {
	CountryDTBBaseInfos         string
	CountryDTBCustomers         string
	CountryDTBCustomerAddresses string
	CountryDTBOrders            string
	CountryDTBShippings         string
	CountryDTBTaxRules          string
}{
	CountryDTBBaseInfos:         "CountryDTBBaseInfos",
	CountryDTBCustomers:         "CountryDTBCustomers",
	CountryDTBCustomerAddresses: "CountryDTBCustomerAddresses",
	CountryDTBOrders:            "CountryDTBOrders",
	CountryDTBShippings:         "CountryDTBShippings",
	CountryDTBTaxRules:          "CountryDTBTaxRules",
}

// mtbCountryR is where relationships are stored.
type mtbCountryR struct {
	CountryDTBBaseInfos         DTBBaseInfoSlice
	CountryDTBCustomers         DTBCustomerSlice
	CountryDTBCustomerAddresses DTBCustomerAddressSlice
	CountryDTBOrders            DTBOrderSlice
	CountryDTBShippings         DTBShippingSlice
	CountryDTBTaxRules          DTBTaxRuleSlice
}

// NewStruct creates a new relationship struct
func (*mtbCountryR) NewStruct() *mtbCountryR {
	return &mtbCountryR{}
}

// mtbCountryL is where Load methods for each relationship are stored.
type mtbCountryL struct{}

var (
	mtbCountryColumns               = []string{"id", "name", "sort_no", "discriminator_type"}
	mtbCountryColumnsWithoutDefault = []string{"id", "name", "sort_no", "discriminator_type"}
	mtbCountryColumnsWithDefault    = []string{}
	mtbCountryPrimaryKeyColumns     = []string{"id"}
)

type (
	// MTBCountrySlice is an alias for a slice of pointers to MTBCountry.
	// This should generally be used opposed to []MTBCountry.
	MTBCountrySlice []*MTBCountry
	// MTBCountryHook is the signature for custom MTBCountry hook methods
	MTBCountryHook func(context.Context, boil.ContextExecutor, *MTBCountry) error

	mtbCountryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mtbCountryType                 = reflect.TypeOf(&MTBCountry{})
	mtbCountryMapping              = queries.MakeStructMapping(mtbCountryType)
	mtbCountryPrimaryKeyMapping, _ = queries.BindMapping(mtbCountryType, mtbCountryMapping, mtbCountryPrimaryKeyColumns)
	mtbCountryInsertCacheMut       sync.RWMutex
	mtbCountryInsertCache          = make(map[string]insertCache)
	mtbCountryUpdateCacheMut       sync.RWMutex
	mtbCountryUpdateCache          = make(map[string]updateCache)
	mtbCountryUpsertCacheMut       sync.RWMutex
	mtbCountryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mtbCountryBeforeInsertHooks []MTBCountryHook
var mtbCountryBeforeUpdateHooks []MTBCountryHook
var mtbCountryBeforeDeleteHooks []MTBCountryHook
var mtbCountryBeforeUpsertHooks []MTBCountryHook

var mtbCountryAfterInsertHooks []MTBCountryHook
var mtbCountryAfterSelectHooks []MTBCountryHook
var mtbCountryAfterUpdateHooks []MTBCountryHook
var mtbCountryAfterDeleteHooks []MTBCountryHook
var mtbCountryAfterUpsertHooks []MTBCountryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MTBCountry) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mtbCountryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MTBCountry) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mtbCountryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MTBCountry) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mtbCountryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MTBCountry) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mtbCountryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MTBCountry) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mtbCountryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MTBCountry) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mtbCountryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MTBCountry) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mtbCountryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MTBCountry) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mtbCountryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MTBCountry) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mtbCountryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMTBCountryHook registers your hook function for all future operations.
func AddMTBCountryHook(hookPoint boil.HookPoint, mtbCountryHook MTBCountryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		mtbCountryBeforeInsertHooks = append(mtbCountryBeforeInsertHooks, mtbCountryHook)
	case boil.BeforeUpdateHook:
		mtbCountryBeforeUpdateHooks = append(mtbCountryBeforeUpdateHooks, mtbCountryHook)
	case boil.BeforeDeleteHook:
		mtbCountryBeforeDeleteHooks = append(mtbCountryBeforeDeleteHooks, mtbCountryHook)
	case boil.BeforeUpsertHook:
		mtbCountryBeforeUpsertHooks = append(mtbCountryBeforeUpsertHooks, mtbCountryHook)
	case boil.AfterInsertHook:
		mtbCountryAfterInsertHooks = append(mtbCountryAfterInsertHooks, mtbCountryHook)
	case boil.AfterSelectHook:
		mtbCountryAfterSelectHooks = append(mtbCountryAfterSelectHooks, mtbCountryHook)
	case boil.AfterUpdateHook:
		mtbCountryAfterUpdateHooks = append(mtbCountryAfterUpdateHooks, mtbCountryHook)
	case boil.AfterDeleteHook:
		mtbCountryAfterDeleteHooks = append(mtbCountryAfterDeleteHooks, mtbCountryHook)
	case boil.AfterUpsertHook:
		mtbCountryAfterUpsertHooks = append(mtbCountryAfterUpsertHooks, mtbCountryHook)
	}
}

// One returns a single mtbCountry record from the query.
func (q mtbCountryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MTBCountry, error) {
	o := &MTBCountry{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for mtb_country")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MTBCountry records from the query.
func (q mtbCountryQuery) All(ctx context.Context, exec boil.ContextExecutor) (MTBCountrySlice, error) {
	var o []*MTBCountry

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to MTBCountry slice")
	}

	if len(mtbCountryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MTBCountry records in the query.
func (q mtbCountryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count mtb_country rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mtbCountryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if mtb_country exists")
	}

	return count > 0, nil
}

// CountryDTBBaseInfos retrieves all the dtb_base_info's DTBBaseInfos with an executor via country_id column.
func (o *MTBCountry) CountryDTBBaseInfos(mods ...qm.QueryMod) dtbBaseInfoQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`dtb_base_info`.`country_id`=?", o.ID),
	)

	query := DTBBaseInfos(queryMods...)
	queries.SetFrom(query.Query, "`dtb_base_info`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`dtb_base_info`.*"})
	}

	return query
}

// CountryDTBCustomers retrieves all the dtb_customer's DTBCustomers with an executor via country_id column.
func (o *MTBCountry) CountryDTBCustomers(mods ...qm.QueryMod) dtbCustomerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`dtb_customer`.`country_id`=?", o.ID),
	)

	query := DTBCustomers(queryMods...)
	queries.SetFrom(query.Query, "`dtb_customer`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`dtb_customer`.*"})
	}

	return query
}

// CountryDTBCustomerAddresses retrieves all the dtb_customer_address's DTBCustomerAddresses with an executor via country_id column.
func (o *MTBCountry) CountryDTBCustomerAddresses(mods ...qm.QueryMod) dtbCustomerAddressQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`dtb_customer_address`.`country_id`=?", o.ID),
	)

	query := DTBCustomerAddresses(queryMods...)
	queries.SetFrom(query.Query, "`dtb_customer_address`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`dtb_customer_address`.*"})
	}

	return query
}

// CountryDTBOrders retrieves all the dtb_order's DTBOrders with an executor via country_id column.
func (o *MTBCountry) CountryDTBOrders(mods ...qm.QueryMod) dtbOrderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`dtb_order`.`country_id`=?", o.ID),
	)

	query := DTBOrders(queryMods...)
	queries.SetFrom(query.Query, "`dtb_order`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`dtb_order`.*"})
	}

	return query
}

// CountryDTBShippings retrieves all the dtb_shipping's DTBShippings with an executor via country_id column.
func (o *MTBCountry) CountryDTBShippings(mods ...qm.QueryMod) dtbShippingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`dtb_shipping`.`country_id`=?", o.ID),
	)

	query := DTBShippings(queryMods...)
	queries.SetFrom(query.Query, "`dtb_shipping`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`dtb_shipping`.*"})
	}

	return query
}

// CountryDTBTaxRules retrieves all the dtb_tax_rule's DTBTaxRules with an executor via country_id column.
func (o *MTBCountry) CountryDTBTaxRules(mods ...qm.QueryMod) dtbTaxRuleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`dtb_tax_rule`.`country_id`=?", o.ID),
	)

	query := DTBTaxRules(queryMods...)
	queries.SetFrom(query.Query, "`dtb_tax_rule`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`dtb_tax_rule`.*"})
	}

	return query
}

// LoadCountryDTBBaseInfos allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mtbCountryL) LoadCountryDTBBaseInfos(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMTBCountry interface{}, mods queries.Applicator) error {
	var slice []*MTBCountry
	var object *MTBCountry

	if singular {
		object = maybeMTBCountry.(*MTBCountry)
	} else {
		slice = *maybeMTBCountry.(*[]*MTBCountry)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mtbCountryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mtbCountryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_base_info`), qm.WhereIn(`country_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dtb_base_info")
	}

	var resultSlice []*DTBBaseInfo
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dtb_base_info")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dtb_base_info")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_base_info")
	}

	if len(dtbBaseInfoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CountryDTBBaseInfos = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dtbBaseInfoR{}
			}
			foreign.R.Country = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CountryID) {
				local.R.CountryDTBBaseInfos = append(local.R.CountryDTBBaseInfos, foreign)
				if foreign.R == nil {
					foreign.R = &dtbBaseInfoR{}
				}
				foreign.R.Country = local
				break
			}
		}
	}

	return nil
}

// LoadCountryDTBCustomers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mtbCountryL) LoadCountryDTBCustomers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMTBCountry interface{}, mods queries.Applicator) error {
	var slice []*MTBCountry
	var object *MTBCountry

	if singular {
		object = maybeMTBCountry.(*MTBCountry)
	} else {
		slice = *maybeMTBCountry.(*[]*MTBCountry)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mtbCountryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mtbCountryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_customer`), qm.WhereIn(`country_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dtb_customer")
	}

	var resultSlice []*DTBCustomer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dtb_customer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dtb_customer")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_customer")
	}

	if len(dtbCustomerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CountryDTBCustomers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dtbCustomerR{}
			}
			foreign.R.Country = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CountryID) {
				local.R.CountryDTBCustomers = append(local.R.CountryDTBCustomers, foreign)
				if foreign.R == nil {
					foreign.R = &dtbCustomerR{}
				}
				foreign.R.Country = local
				break
			}
		}
	}

	return nil
}

// LoadCountryDTBCustomerAddresses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mtbCountryL) LoadCountryDTBCustomerAddresses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMTBCountry interface{}, mods queries.Applicator) error {
	var slice []*MTBCountry
	var object *MTBCountry

	if singular {
		object = maybeMTBCountry.(*MTBCountry)
	} else {
		slice = *maybeMTBCountry.(*[]*MTBCountry)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mtbCountryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mtbCountryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_customer_address`), qm.WhereIn(`country_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dtb_customer_address")
	}

	var resultSlice []*DTBCustomerAddress
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dtb_customer_address")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dtb_customer_address")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_customer_address")
	}

	if len(dtbCustomerAddressAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CountryDTBCustomerAddresses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dtbCustomerAddressR{}
			}
			foreign.R.Country = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CountryID) {
				local.R.CountryDTBCustomerAddresses = append(local.R.CountryDTBCustomerAddresses, foreign)
				if foreign.R == nil {
					foreign.R = &dtbCustomerAddressR{}
				}
				foreign.R.Country = local
				break
			}
		}
	}

	return nil
}

// LoadCountryDTBOrders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mtbCountryL) LoadCountryDTBOrders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMTBCountry interface{}, mods queries.Applicator) error {
	var slice []*MTBCountry
	var object *MTBCountry

	if singular {
		object = maybeMTBCountry.(*MTBCountry)
	} else {
		slice = *maybeMTBCountry.(*[]*MTBCountry)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mtbCountryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mtbCountryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_order`), qm.WhereIn(`country_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dtb_order")
	}

	var resultSlice []*DTBOrder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dtb_order")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dtb_order")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_order")
	}

	if len(dtbOrderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CountryDTBOrders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dtbOrderR{}
			}
			foreign.R.Country = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CountryID) {
				local.R.CountryDTBOrders = append(local.R.CountryDTBOrders, foreign)
				if foreign.R == nil {
					foreign.R = &dtbOrderR{}
				}
				foreign.R.Country = local
				break
			}
		}
	}

	return nil
}

// LoadCountryDTBShippings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mtbCountryL) LoadCountryDTBShippings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMTBCountry interface{}, mods queries.Applicator) error {
	var slice []*MTBCountry
	var object *MTBCountry

	if singular {
		object = maybeMTBCountry.(*MTBCountry)
	} else {
		slice = *maybeMTBCountry.(*[]*MTBCountry)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mtbCountryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mtbCountryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_shipping`), qm.WhereIn(`country_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dtb_shipping")
	}

	var resultSlice []*DTBShipping
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dtb_shipping")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dtb_shipping")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_shipping")
	}

	if len(dtbShippingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CountryDTBShippings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dtbShippingR{}
			}
			foreign.R.Country = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CountryID) {
				local.R.CountryDTBShippings = append(local.R.CountryDTBShippings, foreign)
				if foreign.R == nil {
					foreign.R = &dtbShippingR{}
				}
				foreign.R.Country = local
				break
			}
		}
	}

	return nil
}

// LoadCountryDTBTaxRules allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mtbCountryL) LoadCountryDTBTaxRules(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMTBCountry interface{}, mods queries.Applicator) error {
	var slice []*MTBCountry
	var object *MTBCountry

	if singular {
		object = maybeMTBCountry.(*MTBCountry)
	} else {
		slice = *maybeMTBCountry.(*[]*MTBCountry)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mtbCountryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mtbCountryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_tax_rule`), qm.WhereIn(`country_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dtb_tax_rule")
	}

	var resultSlice []*DTBTaxRule
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dtb_tax_rule")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dtb_tax_rule")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_tax_rule")
	}

	if len(dtbTaxRuleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CountryDTBTaxRules = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dtbTaxRuleR{}
			}
			foreign.R.Country = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CountryID) {
				local.R.CountryDTBTaxRules = append(local.R.CountryDTBTaxRules, foreign)
				if foreign.R == nil {
					foreign.R = &dtbTaxRuleR{}
				}
				foreign.R.Country = local
				break
			}
		}
	}

	return nil
}

// AddCountryDTBBaseInfos adds the given related objects to the existing relationships
// of the mtb_country, optionally inserting them as new records.
// Appends related to o.R.CountryDTBBaseInfos.
// Sets related.R.Country appropriately.
func (o *MTBCountry) AddCountryDTBBaseInfos(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBBaseInfo) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CountryID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `dtb_base_info` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"country_id"}),
				strmangle.WhereClause("`", "`", 0, dtbBaseInfoPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CountryID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &mtbCountryR{
			CountryDTBBaseInfos: related,
		}
	} else {
		o.R.CountryDTBBaseInfos = append(o.R.CountryDTBBaseInfos, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dtbBaseInfoR{
				Country: o,
			}
		} else {
			rel.R.Country = o
		}
	}
	return nil
}

// SetCountryDTBBaseInfos removes all previously related items of the
// mtb_country replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Country's CountryDTBBaseInfos accordingly.
// Replaces o.R.CountryDTBBaseInfos with related.
// Sets related.R.Country's CountryDTBBaseInfos accordingly.
func (o *MTBCountry) SetCountryDTBBaseInfos(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBBaseInfo) error {
	query := "update `dtb_base_info` set `country_id` = null where `country_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CountryDTBBaseInfos {
			queries.SetScanner(&rel.CountryID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Country = nil
		}

		o.R.CountryDTBBaseInfos = nil
	}
	return o.AddCountryDTBBaseInfos(ctx, exec, insert, related...)
}

// RemoveCountryDTBBaseInfos relationships from objects passed in.
// Removes related items from R.CountryDTBBaseInfos (uses pointer comparison, removal does not keep order)
// Sets related.R.Country.
func (o *MTBCountry) RemoveCountryDTBBaseInfos(ctx context.Context, exec boil.ContextExecutor, related ...*DTBBaseInfo) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CountryID, nil)
		if rel.R != nil {
			rel.R.Country = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("country_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CountryDTBBaseInfos {
			if rel != ri {
				continue
			}

			ln := len(o.R.CountryDTBBaseInfos)
			if ln > 1 && i < ln-1 {
				o.R.CountryDTBBaseInfos[i] = o.R.CountryDTBBaseInfos[ln-1]
			}
			o.R.CountryDTBBaseInfos = o.R.CountryDTBBaseInfos[:ln-1]
			break
		}
	}

	return nil
}

// AddCountryDTBCustomers adds the given related objects to the existing relationships
// of the mtb_country, optionally inserting them as new records.
// Appends related to o.R.CountryDTBCustomers.
// Sets related.R.Country appropriately.
func (o *MTBCountry) AddCountryDTBCustomers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBCustomer) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CountryID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `dtb_customer` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"country_id"}),
				strmangle.WhereClause("`", "`", 0, dtbCustomerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CountryID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &mtbCountryR{
			CountryDTBCustomers: related,
		}
	} else {
		o.R.CountryDTBCustomers = append(o.R.CountryDTBCustomers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dtbCustomerR{
				Country: o,
			}
		} else {
			rel.R.Country = o
		}
	}
	return nil
}

// SetCountryDTBCustomers removes all previously related items of the
// mtb_country replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Country's CountryDTBCustomers accordingly.
// Replaces o.R.CountryDTBCustomers with related.
// Sets related.R.Country's CountryDTBCustomers accordingly.
func (o *MTBCountry) SetCountryDTBCustomers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBCustomer) error {
	query := "update `dtb_customer` set `country_id` = null where `country_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CountryDTBCustomers {
			queries.SetScanner(&rel.CountryID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Country = nil
		}

		o.R.CountryDTBCustomers = nil
	}
	return o.AddCountryDTBCustomers(ctx, exec, insert, related...)
}

// RemoveCountryDTBCustomers relationships from objects passed in.
// Removes related items from R.CountryDTBCustomers (uses pointer comparison, removal does not keep order)
// Sets related.R.Country.
func (o *MTBCountry) RemoveCountryDTBCustomers(ctx context.Context, exec boil.ContextExecutor, related ...*DTBCustomer) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CountryID, nil)
		if rel.R != nil {
			rel.R.Country = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("country_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CountryDTBCustomers {
			if rel != ri {
				continue
			}

			ln := len(o.R.CountryDTBCustomers)
			if ln > 1 && i < ln-1 {
				o.R.CountryDTBCustomers[i] = o.R.CountryDTBCustomers[ln-1]
			}
			o.R.CountryDTBCustomers = o.R.CountryDTBCustomers[:ln-1]
			break
		}
	}

	return nil
}

// AddCountryDTBCustomerAddresses adds the given related objects to the existing relationships
// of the mtb_country, optionally inserting them as new records.
// Appends related to o.R.CountryDTBCustomerAddresses.
// Sets related.R.Country appropriately.
func (o *MTBCountry) AddCountryDTBCustomerAddresses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBCustomerAddress) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CountryID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `dtb_customer_address` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"country_id"}),
				strmangle.WhereClause("`", "`", 0, dtbCustomerAddressPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CountryID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &mtbCountryR{
			CountryDTBCustomerAddresses: related,
		}
	} else {
		o.R.CountryDTBCustomerAddresses = append(o.R.CountryDTBCustomerAddresses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dtbCustomerAddressR{
				Country: o,
			}
		} else {
			rel.R.Country = o
		}
	}
	return nil
}

// SetCountryDTBCustomerAddresses removes all previously related items of the
// mtb_country replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Country's CountryDTBCustomerAddresses accordingly.
// Replaces o.R.CountryDTBCustomerAddresses with related.
// Sets related.R.Country's CountryDTBCustomerAddresses accordingly.
func (o *MTBCountry) SetCountryDTBCustomerAddresses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBCustomerAddress) error {
	query := "update `dtb_customer_address` set `country_id` = null where `country_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CountryDTBCustomerAddresses {
			queries.SetScanner(&rel.CountryID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Country = nil
		}

		o.R.CountryDTBCustomerAddresses = nil
	}
	return o.AddCountryDTBCustomerAddresses(ctx, exec, insert, related...)
}

// RemoveCountryDTBCustomerAddresses relationships from objects passed in.
// Removes related items from R.CountryDTBCustomerAddresses (uses pointer comparison, removal does not keep order)
// Sets related.R.Country.
func (o *MTBCountry) RemoveCountryDTBCustomerAddresses(ctx context.Context, exec boil.ContextExecutor, related ...*DTBCustomerAddress) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CountryID, nil)
		if rel.R != nil {
			rel.R.Country = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("country_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CountryDTBCustomerAddresses {
			if rel != ri {
				continue
			}

			ln := len(o.R.CountryDTBCustomerAddresses)
			if ln > 1 && i < ln-1 {
				o.R.CountryDTBCustomerAddresses[i] = o.R.CountryDTBCustomerAddresses[ln-1]
			}
			o.R.CountryDTBCustomerAddresses = o.R.CountryDTBCustomerAddresses[:ln-1]
			break
		}
	}

	return nil
}

// AddCountryDTBOrders adds the given related objects to the existing relationships
// of the mtb_country, optionally inserting them as new records.
// Appends related to o.R.CountryDTBOrders.
// Sets related.R.Country appropriately.
func (o *MTBCountry) AddCountryDTBOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBOrder) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CountryID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `dtb_order` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"country_id"}),
				strmangle.WhereClause("`", "`", 0, dtbOrderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CountryID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &mtbCountryR{
			CountryDTBOrders: related,
		}
	} else {
		o.R.CountryDTBOrders = append(o.R.CountryDTBOrders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dtbOrderR{
				Country: o,
			}
		} else {
			rel.R.Country = o
		}
	}
	return nil
}

// SetCountryDTBOrders removes all previously related items of the
// mtb_country replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Country's CountryDTBOrders accordingly.
// Replaces o.R.CountryDTBOrders with related.
// Sets related.R.Country's CountryDTBOrders accordingly.
func (o *MTBCountry) SetCountryDTBOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBOrder) error {
	query := "update `dtb_order` set `country_id` = null where `country_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CountryDTBOrders {
			queries.SetScanner(&rel.CountryID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Country = nil
		}

		o.R.CountryDTBOrders = nil
	}
	return o.AddCountryDTBOrders(ctx, exec, insert, related...)
}

// RemoveCountryDTBOrders relationships from objects passed in.
// Removes related items from R.CountryDTBOrders (uses pointer comparison, removal does not keep order)
// Sets related.R.Country.
func (o *MTBCountry) RemoveCountryDTBOrders(ctx context.Context, exec boil.ContextExecutor, related ...*DTBOrder) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CountryID, nil)
		if rel.R != nil {
			rel.R.Country = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("country_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CountryDTBOrders {
			if rel != ri {
				continue
			}

			ln := len(o.R.CountryDTBOrders)
			if ln > 1 && i < ln-1 {
				o.R.CountryDTBOrders[i] = o.R.CountryDTBOrders[ln-1]
			}
			o.R.CountryDTBOrders = o.R.CountryDTBOrders[:ln-1]
			break
		}
	}

	return nil
}

// AddCountryDTBShippings adds the given related objects to the existing relationships
// of the mtb_country, optionally inserting them as new records.
// Appends related to o.R.CountryDTBShippings.
// Sets related.R.Country appropriately.
func (o *MTBCountry) AddCountryDTBShippings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBShipping) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CountryID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `dtb_shipping` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"country_id"}),
				strmangle.WhereClause("`", "`", 0, dtbShippingPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CountryID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &mtbCountryR{
			CountryDTBShippings: related,
		}
	} else {
		o.R.CountryDTBShippings = append(o.R.CountryDTBShippings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dtbShippingR{
				Country: o,
			}
		} else {
			rel.R.Country = o
		}
	}
	return nil
}

// SetCountryDTBShippings removes all previously related items of the
// mtb_country replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Country's CountryDTBShippings accordingly.
// Replaces o.R.CountryDTBShippings with related.
// Sets related.R.Country's CountryDTBShippings accordingly.
func (o *MTBCountry) SetCountryDTBShippings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBShipping) error {
	query := "update `dtb_shipping` set `country_id` = null where `country_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CountryDTBShippings {
			queries.SetScanner(&rel.CountryID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Country = nil
		}

		o.R.CountryDTBShippings = nil
	}
	return o.AddCountryDTBShippings(ctx, exec, insert, related...)
}

// RemoveCountryDTBShippings relationships from objects passed in.
// Removes related items from R.CountryDTBShippings (uses pointer comparison, removal does not keep order)
// Sets related.R.Country.
func (o *MTBCountry) RemoveCountryDTBShippings(ctx context.Context, exec boil.ContextExecutor, related ...*DTBShipping) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CountryID, nil)
		if rel.R != nil {
			rel.R.Country = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("country_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CountryDTBShippings {
			if rel != ri {
				continue
			}

			ln := len(o.R.CountryDTBShippings)
			if ln > 1 && i < ln-1 {
				o.R.CountryDTBShippings[i] = o.R.CountryDTBShippings[ln-1]
			}
			o.R.CountryDTBShippings = o.R.CountryDTBShippings[:ln-1]
			break
		}
	}

	return nil
}

// AddCountryDTBTaxRules adds the given related objects to the existing relationships
// of the mtb_country, optionally inserting them as new records.
// Appends related to o.R.CountryDTBTaxRules.
// Sets related.R.Country appropriately.
func (o *MTBCountry) AddCountryDTBTaxRules(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBTaxRule) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CountryID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `dtb_tax_rule` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"country_id"}),
				strmangle.WhereClause("`", "`", 0, dtbTaxRulePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CountryID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &mtbCountryR{
			CountryDTBTaxRules: related,
		}
	} else {
		o.R.CountryDTBTaxRules = append(o.R.CountryDTBTaxRules, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dtbTaxRuleR{
				Country: o,
			}
		} else {
			rel.R.Country = o
		}
	}
	return nil
}

// SetCountryDTBTaxRules removes all previously related items of the
// mtb_country replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Country's CountryDTBTaxRules accordingly.
// Replaces o.R.CountryDTBTaxRules with related.
// Sets related.R.Country's CountryDTBTaxRules accordingly.
func (o *MTBCountry) SetCountryDTBTaxRules(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBTaxRule) error {
	query := "update `dtb_tax_rule` set `country_id` = null where `country_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CountryDTBTaxRules {
			queries.SetScanner(&rel.CountryID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Country = nil
		}

		o.R.CountryDTBTaxRules = nil
	}
	return o.AddCountryDTBTaxRules(ctx, exec, insert, related...)
}

// RemoveCountryDTBTaxRules relationships from objects passed in.
// Removes related items from R.CountryDTBTaxRules (uses pointer comparison, removal does not keep order)
// Sets related.R.Country.
func (o *MTBCountry) RemoveCountryDTBTaxRules(ctx context.Context, exec boil.ContextExecutor, related ...*DTBTaxRule) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CountryID, nil)
		if rel.R != nil {
			rel.R.Country = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("country_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CountryDTBTaxRules {
			if rel != ri {
				continue
			}

			ln := len(o.R.CountryDTBTaxRules)
			if ln > 1 && i < ln-1 {
				o.R.CountryDTBTaxRules[i] = o.R.CountryDTBTaxRules[ln-1]
			}
			o.R.CountryDTBTaxRules = o.R.CountryDTBTaxRules[:ln-1]
			break
		}
	}

	return nil
}

// MTBCountries retrieves all the records using an executor.
func MTBCountries(mods ...qm.QueryMod) mtbCountryQuery {
	mods = append(mods, qm.From("`mtb_country`"))
	return mtbCountryQuery{NewQuery(mods...)}
}

// FindMTBCountry retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMTBCountry(ctx context.Context, exec boil.ContextExecutor, iD uint16, selectCols ...string) (*MTBCountry, error) {
	mtbCountryObj := &MTBCountry{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `mtb_country` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, mtbCountryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from mtb_country")
	}

	return mtbCountryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MTBCountry) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no mtb_country provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mtbCountryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mtbCountryInsertCacheMut.RLock()
	cache, cached := mtbCountryInsertCache[key]
	mtbCountryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mtbCountryColumns,
			mtbCountryColumnsWithDefault,
			mtbCountryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mtbCountryType, mtbCountryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mtbCountryType, mtbCountryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `mtb_country` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `mtb_country` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `mtb_country` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, mtbCountryPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into mtb_country")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for mtb_country")
	}

CacheNoHooks:
	if !cached {
		mtbCountryInsertCacheMut.Lock()
		mtbCountryInsertCache[key] = cache
		mtbCountryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MTBCountry.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MTBCountry) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mtbCountryUpdateCacheMut.RLock()
	cache, cached := mtbCountryUpdateCache[key]
	mtbCountryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mtbCountryColumns,
			mtbCountryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update mtb_country, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `mtb_country` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, mtbCountryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mtbCountryType, mtbCountryMapping, append(wl, mtbCountryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update mtb_country row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for mtb_country")
	}

	if !cached {
		mtbCountryUpdateCacheMut.Lock()
		mtbCountryUpdateCache[key] = cache
		mtbCountryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mtbCountryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for mtb_country")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for mtb_country")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MTBCountrySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mtbCountryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `mtb_country` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mtbCountryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in mtbCountry slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all mtbCountry")
	}
	return rowsAff, nil
}

var mySQLMTBCountryUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MTBCountry) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no mtb_country provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mtbCountryColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLMTBCountryUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mtbCountryUpsertCacheMut.RLock()
	cache, cached := mtbCountryUpsertCache[key]
	mtbCountryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mtbCountryColumns,
			mtbCountryColumnsWithDefault,
			mtbCountryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			mtbCountryColumns,
			mtbCountryPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("model: unable to upsert mtb_country, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "mtb_country", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `mtb_country` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(mtbCountryType, mtbCountryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mtbCountryType, mtbCountryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for mtb_country")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(mtbCountryType, mtbCountryMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for mtb_country")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for mtb_country")
	}

CacheNoHooks:
	if !cached {
		mtbCountryUpsertCacheMut.Lock()
		mtbCountryUpsertCache[key] = cache
		mtbCountryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MTBCountry record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MTBCountry) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no MTBCountry provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mtbCountryPrimaryKeyMapping)
	sql := "DELETE FROM `mtb_country` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from mtb_country")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for mtb_country")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mtbCountryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no mtbCountryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from mtb_country")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for mtb_country")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MTBCountrySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no MTBCountry slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(mtbCountryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mtbCountryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `mtb_country` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mtbCountryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from mtbCountry slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for mtb_country")
	}

	if len(mtbCountryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MTBCountry) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMTBCountry(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MTBCountrySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MTBCountrySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mtbCountryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `mtb_country`.* FROM `mtb_country` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mtbCountryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in MTBCountrySlice")
	}

	*o = slice

	return nil
}

// MTBCountryExists checks if the MTBCountry row exists.
func MTBCountryExists(ctx context.Context, exec boil.ContextExecutor, iD uint16) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `mtb_country` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if mtb_country exists")
	}

	return exists, nil
}
