// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDTBDeliveryFees(t *testing.T) {
	t.Parallel()

	query := DTBDeliveryFees()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDTBDeliveryFeesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBDeliveryFee{}
	if err = randomize.Struct(seed, o, dtbDeliveryFeeDBTypes, true, dtbDeliveryFeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryFee struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBDeliveryFees().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBDeliveryFeesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBDeliveryFee{}
	if err = randomize.Struct(seed, o, dtbDeliveryFeeDBTypes, true, dtbDeliveryFeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryFee struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DTBDeliveryFees().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBDeliveryFees().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBDeliveryFeesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBDeliveryFee{}
	if err = randomize.Struct(seed, o, dtbDeliveryFeeDBTypes, true, dtbDeliveryFeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryFee struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBDeliveryFeeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBDeliveryFees().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBDeliveryFeesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBDeliveryFee{}
	if err = randomize.Struct(seed, o, dtbDeliveryFeeDBTypes, true, dtbDeliveryFeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryFee struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DTBDeliveryFeeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DTBDeliveryFee exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DTBDeliveryFeeExists to return true, but got false.")
	}
}

func testDTBDeliveryFeesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBDeliveryFee{}
	if err = randomize.Struct(seed, o, dtbDeliveryFeeDBTypes, true, dtbDeliveryFeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryFee struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dtbDeliveryFeeFound, err := FindDTBDeliveryFee(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if dtbDeliveryFeeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDTBDeliveryFeesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBDeliveryFee{}
	if err = randomize.Struct(seed, o, dtbDeliveryFeeDBTypes, true, dtbDeliveryFeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryFee struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DTBDeliveryFees().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDTBDeliveryFeesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBDeliveryFee{}
	if err = randomize.Struct(seed, o, dtbDeliveryFeeDBTypes, true, dtbDeliveryFeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryFee struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DTBDeliveryFees().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDTBDeliveryFeesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtbDeliveryFeeOne := &DTBDeliveryFee{}
	dtbDeliveryFeeTwo := &DTBDeliveryFee{}
	if err = randomize.Struct(seed, dtbDeliveryFeeOne, dtbDeliveryFeeDBTypes, false, dtbDeliveryFeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryFee struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbDeliveryFeeTwo, dtbDeliveryFeeDBTypes, false, dtbDeliveryFeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryFee struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbDeliveryFeeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbDeliveryFeeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBDeliveryFees().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDTBDeliveryFeesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dtbDeliveryFeeOne := &DTBDeliveryFee{}
	dtbDeliveryFeeTwo := &DTBDeliveryFee{}
	if err = randomize.Struct(seed, dtbDeliveryFeeOne, dtbDeliveryFeeDBTypes, false, dtbDeliveryFeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryFee struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbDeliveryFeeTwo, dtbDeliveryFeeDBTypes, false, dtbDeliveryFeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryFee struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbDeliveryFeeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbDeliveryFeeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBDeliveryFees().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dtbDeliveryFeeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBDeliveryFee) error {
	*o = DTBDeliveryFee{}
	return nil
}

func dtbDeliveryFeeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBDeliveryFee) error {
	*o = DTBDeliveryFee{}
	return nil
}

func dtbDeliveryFeeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DTBDeliveryFee) error {
	*o = DTBDeliveryFee{}
	return nil
}

func dtbDeliveryFeeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBDeliveryFee) error {
	*o = DTBDeliveryFee{}
	return nil
}

func dtbDeliveryFeeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBDeliveryFee) error {
	*o = DTBDeliveryFee{}
	return nil
}

func dtbDeliveryFeeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBDeliveryFee) error {
	*o = DTBDeliveryFee{}
	return nil
}

func dtbDeliveryFeeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBDeliveryFee) error {
	*o = DTBDeliveryFee{}
	return nil
}

func dtbDeliveryFeeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBDeliveryFee) error {
	*o = DTBDeliveryFee{}
	return nil
}

func dtbDeliveryFeeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBDeliveryFee) error {
	*o = DTBDeliveryFee{}
	return nil
}

func testDTBDeliveryFeesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DTBDeliveryFee{}
	o := &DTBDeliveryFee{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dtbDeliveryFeeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryFee object: %s", err)
	}

	AddDTBDeliveryFeeHook(boil.BeforeInsertHook, dtbDeliveryFeeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dtbDeliveryFeeBeforeInsertHooks = []DTBDeliveryFeeHook{}

	AddDTBDeliveryFeeHook(boil.AfterInsertHook, dtbDeliveryFeeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dtbDeliveryFeeAfterInsertHooks = []DTBDeliveryFeeHook{}

	AddDTBDeliveryFeeHook(boil.AfterSelectHook, dtbDeliveryFeeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dtbDeliveryFeeAfterSelectHooks = []DTBDeliveryFeeHook{}

	AddDTBDeliveryFeeHook(boil.BeforeUpdateHook, dtbDeliveryFeeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dtbDeliveryFeeBeforeUpdateHooks = []DTBDeliveryFeeHook{}

	AddDTBDeliveryFeeHook(boil.AfterUpdateHook, dtbDeliveryFeeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dtbDeliveryFeeAfterUpdateHooks = []DTBDeliveryFeeHook{}

	AddDTBDeliveryFeeHook(boil.BeforeDeleteHook, dtbDeliveryFeeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dtbDeliveryFeeBeforeDeleteHooks = []DTBDeliveryFeeHook{}

	AddDTBDeliveryFeeHook(boil.AfterDeleteHook, dtbDeliveryFeeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dtbDeliveryFeeAfterDeleteHooks = []DTBDeliveryFeeHook{}

	AddDTBDeliveryFeeHook(boil.BeforeUpsertHook, dtbDeliveryFeeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dtbDeliveryFeeBeforeUpsertHooks = []DTBDeliveryFeeHook{}

	AddDTBDeliveryFeeHook(boil.AfterUpsertHook, dtbDeliveryFeeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dtbDeliveryFeeAfterUpsertHooks = []DTBDeliveryFeeHook{}
}

func testDTBDeliveryFeesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBDeliveryFee{}
	if err = randomize.Struct(seed, o, dtbDeliveryFeeDBTypes, true, dtbDeliveryFeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryFee struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBDeliveryFees().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBDeliveryFeesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBDeliveryFee{}
	if err = randomize.Struct(seed, o, dtbDeliveryFeeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryFee struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dtbDeliveryFeeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DTBDeliveryFees().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBDeliveryFeeToOneDTBDeliveryUsingDelivery(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBDeliveryFee
	var foreign DTBDelivery

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbDeliveryFeeDBTypes, true, dtbDeliveryFeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryFee struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dtbDeliveryDBTypes, false, dtbDeliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDelivery struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.DeliveryID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Delivery().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBDeliveryFeeSlice{&local}
	if err = local.L.LoadDelivery(ctx, tx, false, (*[]*DTBDeliveryFee)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Delivery == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Delivery = nil
	if err = local.L.LoadDelivery(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Delivery == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBDeliveryFeeToOneMTBPrefUsingPref(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBDeliveryFee
	var foreign MTBPref

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbDeliveryFeeDBTypes, true, dtbDeliveryFeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryFee struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, mtbPrefDBTypes, false, mtbPrefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPref struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.PrefID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Pref().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBDeliveryFeeSlice{&local}
	if err = local.L.LoadPref(ctx, tx, false, (*[]*DTBDeliveryFee)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Pref == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Pref = nil
	if err = local.L.LoadPref(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Pref == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBDeliveryFeeToOneSetOpDTBDeliveryUsingDelivery(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBDeliveryFee
	var b, c DTBDelivery

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbDeliveryFeeDBTypes, false, strmangle.SetComplement(dtbDeliveryFeePrimaryKeyColumns, dtbDeliveryFeeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbDeliveryDBTypes, false, strmangle.SetComplement(dtbDeliveryPrimaryKeyColumns, dtbDeliveryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbDeliveryDBTypes, false, strmangle.SetComplement(dtbDeliveryPrimaryKeyColumns, dtbDeliveryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DTBDelivery{&b, &c} {
		err = a.SetDelivery(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Delivery != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DeliveryDTBDeliveryFees[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.DeliveryID, x.ID) {
			t.Error("foreign key was wrong value", a.DeliveryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DeliveryID))
		reflect.Indirect(reflect.ValueOf(&a.DeliveryID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.DeliveryID, x.ID) {
			t.Error("foreign key was wrong value", a.DeliveryID, x.ID)
		}
	}
}

func testDTBDeliveryFeeToOneRemoveOpDTBDeliveryUsingDelivery(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBDeliveryFee
	var b DTBDelivery

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbDeliveryFeeDBTypes, false, strmangle.SetComplement(dtbDeliveryFeePrimaryKeyColumns, dtbDeliveryFeeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbDeliveryDBTypes, false, strmangle.SetComplement(dtbDeliveryPrimaryKeyColumns, dtbDeliveryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetDelivery(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveDelivery(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Delivery().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Delivery != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.DeliveryID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.DeliveryDTBDeliveryFees) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBDeliveryFeeToOneSetOpMTBPrefUsingPref(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBDeliveryFee
	var b, c MTBPref

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbDeliveryFeeDBTypes, false, strmangle.SetComplement(dtbDeliveryFeePrimaryKeyColumns, dtbDeliveryFeeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MTBPref{&b, &c} {
		err = a.SetPref(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Pref != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PrefDTBDeliveryFees[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.PrefID, x.ID) {
			t.Error("foreign key was wrong value", a.PrefID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PrefID))
		reflect.Indirect(reflect.ValueOf(&a.PrefID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.PrefID, x.ID) {
			t.Error("foreign key was wrong value", a.PrefID, x.ID)
		}
	}
}

func testDTBDeliveryFeeToOneRemoveOpMTBPrefUsingPref(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBDeliveryFee
	var b MTBPref

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbDeliveryFeeDBTypes, false, strmangle.SetComplement(dtbDeliveryFeePrimaryKeyColumns, dtbDeliveryFeeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetPref(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemovePref(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Pref().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Pref != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.PrefID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.PrefDTBDeliveryFees) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBDeliveryFeesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBDeliveryFee{}
	if err = randomize.Struct(seed, o, dtbDeliveryFeeDBTypes, true, dtbDeliveryFeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryFee struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBDeliveryFeesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBDeliveryFee{}
	if err = randomize.Struct(seed, o, dtbDeliveryFeeDBTypes, true, dtbDeliveryFeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryFee struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBDeliveryFeeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBDeliveryFeesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBDeliveryFee{}
	if err = randomize.Struct(seed, o, dtbDeliveryFeeDBTypes, true, dtbDeliveryFeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryFee struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBDeliveryFees().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dtbDeliveryFeeDBTypes = map[string]string{`ID`: `int`, `DeliveryID`: `int`, `PrefID`: `smallint`, `Fee`: `decimal`, `DiscriminatorType`: `varchar`}
	_                     = bytes.MinRead
)

func testDTBDeliveryFeesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dtbDeliveryFeePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dtbDeliveryFeeColumns) == len(dtbDeliveryFeePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBDeliveryFee{}
	if err = randomize.Struct(seed, o, dtbDeliveryFeeDBTypes, true, dtbDeliveryFeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryFee struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBDeliveryFees().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbDeliveryFeeDBTypes, true, dtbDeliveryFeePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryFee struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDTBDeliveryFeesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dtbDeliveryFeeColumns) == len(dtbDeliveryFeePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBDeliveryFee{}
	if err = randomize.Struct(seed, o, dtbDeliveryFeeDBTypes, true, dtbDeliveryFeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryFee struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBDeliveryFees().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbDeliveryFeeDBTypes, true, dtbDeliveryFeePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryFee struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dtbDeliveryFeeColumns, dtbDeliveryFeePrimaryKeyColumns) {
		fields = dtbDeliveryFeeColumns
	} else {
		fields = strmangle.SetComplement(
			dtbDeliveryFeeColumns,
			dtbDeliveryFeePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DTBDeliveryFeeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDTBDeliveryFeesUpsert(t *testing.T) {
	t.Parallel()

	if len(dtbDeliveryFeeColumns) == len(dtbDeliveryFeePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDTBDeliveryFeeUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DTBDeliveryFee{}
	if err = randomize.Struct(seed, &o, dtbDeliveryFeeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryFee struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBDeliveryFee: %s", err)
	}

	count, err := DTBDeliveryFees().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dtbDeliveryFeeDBTypes, false, dtbDeliveryFeePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryFee struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBDeliveryFee: %s", err)
	}

	count, err = DTBDeliveryFees().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
