// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// DTBCartItem is an object representing the database table.
type DTBCartItem struct {
	ID                uint              `boil:"id" json:"id" toml:"id" yaml:"id"`
	ProductClassID    null.Uint         `boil:"product_class_id" json:"product_class_id,omitempty" toml:"product_class_id" yaml:"product_class_id,omitempty"`
	CartID            null.Uint         `boil:"cart_id" json:"cart_id,omitempty" toml:"cart_id" yaml:"cart_id,omitempty"`
	Price             types.Decimal     `boil:"price" json:"price" toml:"price" yaml:"price"`
	Quantity          types.Decimal     `boil:"quantity" json:"quantity" toml:"quantity" yaml:"quantity"`
	PointRate         types.NullDecimal `boil:"point_rate" json:"point_rate,omitempty" toml:"point_rate" yaml:"point_rate,omitempty"`
	DiscriminatorType string            `boil:"discriminator_type" json:"discriminator_type" toml:"discriminator_type" yaml:"discriminator_type"`

	R *dtbCartItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dtbCartItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DTBCartItemColumns = struct {
	ID                string
	ProductClassID    string
	CartID            string
	Price             string
	Quantity          string
	PointRate         string
	DiscriminatorType string
}{
	ID:                "id",
	ProductClassID:    "product_class_id",
	CartID:            "cart_id",
	Price:             "price",
	Quantity:          "quantity",
	PointRate:         "point_rate",
	DiscriminatorType: "discriminator_type",
}

// Generated where

var DTBCartItemWhere = struct {
	ID                whereHelperuint
	ProductClassID    whereHelpernull_Uint
	CartID            whereHelpernull_Uint
	Price             whereHelpertypes_Decimal
	Quantity          whereHelpertypes_Decimal
	PointRate         whereHelpertypes_NullDecimal
	DiscriminatorType whereHelperstring
}{
	ID:                whereHelperuint{field: `id`},
	ProductClassID:    whereHelpernull_Uint{field: `product_class_id`},
	CartID:            whereHelpernull_Uint{field: `cart_id`},
	Price:             whereHelpertypes_Decimal{field: `price`},
	Quantity:          whereHelpertypes_Decimal{field: `quantity`},
	PointRate:         whereHelpertypes_NullDecimal{field: `point_rate`},
	DiscriminatorType: whereHelperstring{field: `discriminator_type`},
}

// DTBCartItemRels is where relationship names are stored.
var DTBCartItemRels = struct {
	Cart         string
	ProductClass string
}{
	Cart:         "Cart",
	ProductClass: "ProductClass",
}

// dtbCartItemR is where relationships are stored.
type dtbCartItemR struct {
	Cart         *DTBCart
	ProductClass *DTBProductClass
}

// NewStruct creates a new relationship struct
func (*dtbCartItemR) NewStruct() *dtbCartItemR {
	return &dtbCartItemR{}
}

// dtbCartItemL is where Load methods for each relationship are stored.
type dtbCartItemL struct{}

var (
	dtbCartItemColumns               = []string{"id", "product_class_id", "cart_id", "price", "quantity", "point_rate", "discriminator_type"}
	dtbCartItemColumnsWithoutDefault = []string{"product_class_id", "cart_id", "point_rate", "discriminator_type"}
	dtbCartItemColumnsWithDefault    = []string{"id", "price", "quantity"}
	dtbCartItemPrimaryKeyColumns     = []string{"id"}
)

type (
	// DTBCartItemSlice is an alias for a slice of pointers to DTBCartItem.
	// This should generally be used opposed to []DTBCartItem.
	DTBCartItemSlice []*DTBCartItem
	// DTBCartItemHook is the signature for custom DTBCartItem hook methods
	DTBCartItemHook func(context.Context, boil.ContextExecutor, *DTBCartItem) error

	dtbCartItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dtbCartItemType                 = reflect.TypeOf(&DTBCartItem{})
	dtbCartItemMapping              = queries.MakeStructMapping(dtbCartItemType)
	dtbCartItemPrimaryKeyMapping, _ = queries.BindMapping(dtbCartItemType, dtbCartItemMapping, dtbCartItemPrimaryKeyColumns)
	dtbCartItemInsertCacheMut       sync.RWMutex
	dtbCartItemInsertCache          = make(map[string]insertCache)
	dtbCartItemUpdateCacheMut       sync.RWMutex
	dtbCartItemUpdateCache          = make(map[string]updateCache)
	dtbCartItemUpsertCacheMut       sync.RWMutex
	dtbCartItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dtbCartItemBeforeInsertHooks []DTBCartItemHook
var dtbCartItemBeforeUpdateHooks []DTBCartItemHook
var dtbCartItemBeforeDeleteHooks []DTBCartItemHook
var dtbCartItemBeforeUpsertHooks []DTBCartItemHook

var dtbCartItemAfterInsertHooks []DTBCartItemHook
var dtbCartItemAfterSelectHooks []DTBCartItemHook
var dtbCartItemAfterUpdateHooks []DTBCartItemHook
var dtbCartItemAfterDeleteHooks []DTBCartItemHook
var dtbCartItemAfterUpsertHooks []DTBCartItemHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DTBCartItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCartItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DTBCartItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCartItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DTBCartItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCartItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DTBCartItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCartItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DTBCartItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCartItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DTBCartItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCartItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DTBCartItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCartItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DTBCartItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCartItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DTBCartItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCartItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDTBCartItemHook registers your hook function for all future operations.
func AddDTBCartItemHook(hookPoint boil.HookPoint, dtbCartItemHook DTBCartItemHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		dtbCartItemBeforeInsertHooks = append(dtbCartItemBeforeInsertHooks, dtbCartItemHook)
	case boil.BeforeUpdateHook:
		dtbCartItemBeforeUpdateHooks = append(dtbCartItemBeforeUpdateHooks, dtbCartItemHook)
	case boil.BeforeDeleteHook:
		dtbCartItemBeforeDeleteHooks = append(dtbCartItemBeforeDeleteHooks, dtbCartItemHook)
	case boil.BeforeUpsertHook:
		dtbCartItemBeforeUpsertHooks = append(dtbCartItemBeforeUpsertHooks, dtbCartItemHook)
	case boil.AfterInsertHook:
		dtbCartItemAfterInsertHooks = append(dtbCartItemAfterInsertHooks, dtbCartItemHook)
	case boil.AfterSelectHook:
		dtbCartItemAfterSelectHooks = append(dtbCartItemAfterSelectHooks, dtbCartItemHook)
	case boil.AfterUpdateHook:
		dtbCartItemAfterUpdateHooks = append(dtbCartItemAfterUpdateHooks, dtbCartItemHook)
	case boil.AfterDeleteHook:
		dtbCartItemAfterDeleteHooks = append(dtbCartItemAfterDeleteHooks, dtbCartItemHook)
	case boil.AfterUpsertHook:
		dtbCartItemAfterUpsertHooks = append(dtbCartItemAfterUpsertHooks, dtbCartItemHook)
	}
}

// One returns a single dtbCartItem record from the query.
func (q dtbCartItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DTBCartItem, error) {
	o := &DTBCartItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for dtb_cart_item")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DTBCartItem records from the query.
func (q dtbCartItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (DTBCartItemSlice, error) {
	var o []*DTBCartItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to DTBCartItem slice")
	}

	if len(dtbCartItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DTBCartItem records in the query.
func (q dtbCartItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count dtb_cart_item rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dtbCartItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if dtb_cart_item exists")
	}

	return count > 0, nil
}

// Cart pointed to by the foreign key.
func (o *DTBCartItem) Cart(mods ...qm.QueryMod) dtbCartQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.CartID),
	}

	queryMods = append(queryMods, mods...)

	query := DTBCarts(queryMods...)
	queries.SetFrom(query.Query, "`dtb_cart`")

	return query
}

// ProductClass pointed to by the foreign key.
func (o *DTBCartItem) ProductClass(mods ...qm.QueryMod) dtbProductClassQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ProductClassID),
	}

	queryMods = append(queryMods, mods...)

	query := DTBProductClasses(queryMods...)
	queries.SetFrom(query.Query, "`dtb_product_class`")

	return query
}

// LoadCart allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dtbCartItemL) LoadCart(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBCartItem interface{}, mods queries.Applicator) error {
	var slice []*DTBCartItem
	var object *DTBCartItem

	if singular {
		object = maybeDTBCartItem.(*DTBCartItem)
	} else {
		slice = *maybeDTBCartItem.(*[]*DTBCartItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbCartItemR{}
		}
		if !queries.IsNil(object.CartID) {
			args = append(args, object.CartID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbCartItemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CartID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CartID) {
				args = append(args, obj.CartID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_cart`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DTBCart")
	}

	var resultSlice []*DTBCart
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DTBCart")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dtb_cart")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_cart")
	}

	if len(dtbCartItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Cart = foreign
		if foreign.R == nil {
			foreign.R = &dtbCartR{}
		}
		foreign.R.CartDTBCartItems = append(foreign.R.CartDTBCartItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CartID, foreign.ID) {
				local.R.Cart = foreign
				if foreign.R == nil {
					foreign.R = &dtbCartR{}
				}
				foreign.R.CartDTBCartItems = append(foreign.R.CartDTBCartItems, local)
				break
			}
		}
	}

	return nil
}

// LoadProductClass allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dtbCartItemL) LoadProductClass(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBCartItem interface{}, mods queries.Applicator) error {
	var slice []*DTBCartItem
	var object *DTBCartItem

	if singular {
		object = maybeDTBCartItem.(*DTBCartItem)
	} else {
		slice = *maybeDTBCartItem.(*[]*DTBCartItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbCartItemR{}
		}
		if !queries.IsNil(object.ProductClassID) {
			args = append(args, object.ProductClassID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbCartItemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductClassID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProductClassID) {
				args = append(args, obj.ProductClassID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_product_class`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DTBProductClass")
	}

	var resultSlice []*DTBProductClass
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DTBProductClass")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dtb_product_class")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_product_class")
	}

	if len(dtbCartItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductClass = foreign
		if foreign.R == nil {
			foreign.R = &dtbProductClassR{}
		}
		foreign.R.ProductClassDTBCartItems = append(foreign.R.ProductClassDTBCartItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductClassID, foreign.ID) {
				local.R.ProductClass = foreign
				if foreign.R == nil {
					foreign.R = &dtbProductClassR{}
				}
				foreign.R.ProductClassDTBCartItems = append(foreign.R.ProductClassDTBCartItems, local)
				break
			}
		}
	}

	return nil
}

// SetCart of the dtbCartItem to the related item.
// Sets o.R.Cart to related.
// Adds o to related.R.CartDTBCartItems.
func (o *DTBCartItem) SetCart(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DTBCart) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `dtb_cart_item` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"cart_id"}),
		strmangle.WhereClause("`", "`", 0, dtbCartItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CartID, related.ID)
	if o.R == nil {
		o.R = &dtbCartItemR{
			Cart: related,
		}
	} else {
		o.R.Cart = related
	}

	if related.R == nil {
		related.R = &dtbCartR{
			CartDTBCartItems: DTBCartItemSlice{o},
		}
	} else {
		related.R.CartDTBCartItems = append(related.R.CartDTBCartItems, o)
	}

	return nil
}

// RemoveCart relationship.
// Sets o.R.Cart to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *DTBCartItem) RemoveCart(ctx context.Context, exec boil.ContextExecutor, related *DTBCart) error {
	var err error

	queries.SetScanner(&o.CartID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("cart_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Cart = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CartDTBCartItems {
		if queries.Equal(o.CartID, ri.CartID) {
			continue
		}

		ln := len(related.R.CartDTBCartItems)
		if ln > 1 && i < ln-1 {
			related.R.CartDTBCartItems[i] = related.R.CartDTBCartItems[ln-1]
		}
		related.R.CartDTBCartItems = related.R.CartDTBCartItems[:ln-1]
		break
	}
	return nil
}

// SetProductClass of the dtbCartItem to the related item.
// Sets o.R.ProductClass to related.
// Adds o to related.R.ProductClassDTBCartItems.
func (o *DTBCartItem) SetProductClass(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DTBProductClass) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `dtb_cart_item` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"product_class_id"}),
		strmangle.WhereClause("`", "`", 0, dtbCartItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductClassID, related.ID)
	if o.R == nil {
		o.R = &dtbCartItemR{
			ProductClass: related,
		}
	} else {
		o.R.ProductClass = related
	}

	if related.R == nil {
		related.R = &dtbProductClassR{
			ProductClassDTBCartItems: DTBCartItemSlice{o},
		}
	} else {
		related.R.ProductClassDTBCartItems = append(related.R.ProductClassDTBCartItems, o)
	}

	return nil
}

// RemoveProductClass relationship.
// Sets o.R.ProductClass to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *DTBCartItem) RemoveProductClass(ctx context.Context, exec boil.ContextExecutor, related *DTBProductClass) error {
	var err error

	queries.SetScanner(&o.ProductClassID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("product_class_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.ProductClass = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ProductClassDTBCartItems {
		if queries.Equal(o.ProductClassID, ri.ProductClassID) {
			continue
		}

		ln := len(related.R.ProductClassDTBCartItems)
		if ln > 1 && i < ln-1 {
			related.R.ProductClassDTBCartItems[i] = related.R.ProductClassDTBCartItems[ln-1]
		}
		related.R.ProductClassDTBCartItems = related.R.ProductClassDTBCartItems[:ln-1]
		break
	}
	return nil
}

// DTBCartItems retrieves all the records using an executor.
func DTBCartItems(mods ...qm.QueryMod) dtbCartItemQuery {
	mods = append(mods, qm.From("`dtb_cart_item`"))
	return dtbCartItemQuery{NewQuery(mods...)}
}

// FindDTBCartItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDTBCartItem(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*DTBCartItem, error) {
	dtbCartItemObj := &DTBCartItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `dtb_cart_item` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, dtbCartItemObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from dtb_cart_item")
	}

	return dtbCartItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DTBCartItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no dtb_cart_item provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dtbCartItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dtbCartItemInsertCacheMut.RLock()
	cache, cached := dtbCartItemInsertCache[key]
	dtbCartItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dtbCartItemColumns,
			dtbCartItemColumnsWithDefault,
			dtbCartItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dtbCartItemType, dtbCartItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dtbCartItemType, dtbCartItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `dtb_cart_item` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `dtb_cart_item` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `dtb_cart_item` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dtbCartItemPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into dtb_cart_item")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == dtbCartItemMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for dtb_cart_item")
	}

CacheNoHooks:
	if !cached {
		dtbCartItemInsertCacheMut.Lock()
		dtbCartItemInsertCache[key] = cache
		dtbCartItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DTBCartItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DTBCartItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dtbCartItemUpdateCacheMut.RLock()
	cache, cached := dtbCartItemUpdateCache[key]
	dtbCartItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dtbCartItemColumns,
			dtbCartItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update dtb_cart_item, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `dtb_cart_item` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dtbCartItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dtbCartItemType, dtbCartItemMapping, append(wl, dtbCartItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update dtb_cart_item row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for dtb_cart_item")
	}

	if !cached {
		dtbCartItemUpdateCacheMut.Lock()
		dtbCartItemUpdateCache[key] = cache
		dtbCartItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dtbCartItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for dtb_cart_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for dtb_cart_item")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DTBCartItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbCartItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `dtb_cart_item` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbCartItemPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in dtbCartItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all dtbCartItem")
	}
	return rowsAff, nil
}

var mySQLDTBCartItemUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DTBCartItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no dtb_cart_item provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dtbCartItemColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDTBCartItemUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dtbCartItemUpsertCacheMut.RLock()
	cache, cached := dtbCartItemUpsertCache[key]
	dtbCartItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dtbCartItemColumns,
			dtbCartItemColumnsWithDefault,
			dtbCartItemColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			dtbCartItemColumns,
			dtbCartItemPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("model: unable to upsert dtb_cart_item, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "dtb_cart_item", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `dtb_cart_item` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dtbCartItemType, dtbCartItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dtbCartItemType, dtbCartItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for dtb_cart_item")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == dtbCartItemMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dtbCartItemType, dtbCartItemMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for dtb_cart_item")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for dtb_cart_item")
	}

CacheNoHooks:
	if !cached {
		dtbCartItemUpsertCacheMut.Lock()
		dtbCartItemUpsertCache[key] = cache
		dtbCartItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DTBCartItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DTBCartItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no DTBCartItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dtbCartItemPrimaryKeyMapping)
	sql := "DELETE FROM `dtb_cart_item` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from dtb_cart_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for dtb_cart_item")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dtbCartItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no dtbCartItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from dtb_cart_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for dtb_cart_item")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DTBCartItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no DTBCartItem slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(dtbCartItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbCartItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `dtb_cart_item` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbCartItemPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from dtbCartItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for dtb_cart_item")
	}

	if len(dtbCartItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DTBCartItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDTBCartItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DTBCartItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DTBCartItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbCartItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `dtb_cart_item`.* FROM `dtb_cart_item` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbCartItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in DTBCartItemSlice")
	}

	*o = slice

	return nil
}

// DTBCartItemExists checks if the DTBCartItem row exists.
func DTBCartItemExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `dtb_cart_item` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if dtb_cart_item exists")
	}

	return exists, nil
}
