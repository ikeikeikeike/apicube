// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDTBProductCategories(t *testing.T) {
	t.Parallel()

	query := DTBProductCategories()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDTBProductCategoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductCategory{}
	if err = randomize.Struct(seed, o, dtbProductCategoryDBTypes, true, dtbProductCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBProductCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBProductCategoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductCategory{}
	if err = randomize.Struct(seed, o, dtbProductCategoryDBTypes, true, dtbProductCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DTBProductCategories().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBProductCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBProductCategoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductCategory{}
	if err = randomize.Struct(seed, o, dtbProductCategoryDBTypes, true, dtbProductCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBProductCategorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBProductCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBProductCategoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductCategory{}
	if err = randomize.Struct(seed, o, dtbProductCategoryDBTypes, true, dtbProductCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DTBProductCategoryExists(ctx, tx, o.ProductID, o.CategoryID)
	if err != nil {
		t.Errorf("Unable to check if DTBProductCategory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DTBProductCategoryExists to return true, but got false.")
	}
}

func testDTBProductCategoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductCategory{}
	if err = randomize.Struct(seed, o, dtbProductCategoryDBTypes, true, dtbProductCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dtbProductCategoryFound, err := FindDTBProductCategory(ctx, tx, o.ProductID, o.CategoryID)
	if err != nil {
		t.Error(err)
	}

	if dtbProductCategoryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDTBProductCategoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductCategory{}
	if err = randomize.Struct(seed, o, dtbProductCategoryDBTypes, true, dtbProductCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DTBProductCategories().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDTBProductCategoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductCategory{}
	if err = randomize.Struct(seed, o, dtbProductCategoryDBTypes, true, dtbProductCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DTBProductCategories().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDTBProductCategoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtbProductCategoryOne := &DTBProductCategory{}
	dtbProductCategoryTwo := &DTBProductCategory{}
	if err = randomize.Struct(seed, dtbProductCategoryOne, dtbProductCategoryDBTypes, false, dtbProductCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductCategory struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbProductCategoryTwo, dtbProductCategoryDBTypes, false, dtbProductCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbProductCategoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbProductCategoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBProductCategories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDTBProductCategoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dtbProductCategoryOne := &DTBProductCategory{}
	dtbProductCategoryTwo := &DTBProductCategory{}
	if err = randomize.Struct(seed, dtbProductCategoryOne, dtbProductCategoryDBTypes, false, dtbProductCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductCategory struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbProductCategoryTwo, dtbProductCategoryDBTypes, false, dtbProductCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbProductCategoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbProductCategoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBProductCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dtbProductCategoryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBProductCategory) error {
	*o = DTBProductCategory{}
	return nil
}

func dtbProductCategoryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBProductCategory) error {
	*o = DTBProductCategory{}
	return nil
}

func dtbProductCategoryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DTBProductCategory) error {
	*o = DTBProductCategory{}
	return nil
}

func dtbProductCategoryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBProductCategory) error {
	*o = DTBProductCategory{}
	return nil
}

func dtbProductCategoryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBProductCategory) error {
	*o = DTBProductCategory{}
	return nil
}

func dtbProductCategoryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBProductCategory) error {
	*o = DTBProductCategory{}
	return nil
}

func dtbProductCategoryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBProductCategory) error {
	*o = DTBProductCategory{}
	return nil
}

func dtbProductCategoryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBProductCategory) error {
	*o = DTBProductCategory{}
	return nil
}

func dtbProductCategoryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBProductCategory) error {
	*o = DTBProductCategory{}
	return nil
}

func testDTBProductCategoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DTBProductCategory{}
	o := &DTBProductCategory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dtbProductCategoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBProductCategory object: %s", err)
	}

	AddDTBProductCategoryHook(boil.BeforeInsertHook, dtbProductCategoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dtbProductCategoryBeforeInsertHooks = []DTBProductCategoryHook{}

	AddDTBProductCategoryHook(boil.AfterInsertHook, dtbProductCategoryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dtbProductCategoryAfterInsertHooks = []DTBProductCategoryHook{}

	AddDTBProductCategoryHook(boil.AfterSelectHook, dtbProductCategoryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dtbProductCategoryAfterSelectHooks = []DTBProductCategoryHook{}

	AddDTBProductCategoryHook(boil.BeforeUpdateHook, dtbProductCategoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dtbProductCategoryBeforeUpdateHooks = []DTBProductCategoryHook{}

	AddDTBProductCategoryHook(boil.AfterUpdateHook, dtbProductCategoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dtbProductCategoryAfterUpdateHooks = []DTBProductCategoryHook{}

	AddDTBProductCategoryHook(boil.BeforeDeleteHook, dtbProductCategoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dtbProductCategoryBeforeDeleteHooks = []DTBProductCategoryHook{}

	AddDTBProductCategoryHook(boil.AfterDeleteHook, dtbProductCategoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dtbProductCategoryAfterDeleteHooks = []DTBProductCategoryHook{}

	AddDTBProductCategoryHook(boil.BeforeUpsertHook, dtbProductCategoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dtbProductCategoryBeforeUpsertHooks = []DTBProductCategoryHook{}

	AddDTBProductCategoryHook(boil.AfterUpsertHook, dtbProductCategoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dtbProductCategoryAfterUpsertHooks = []DTBProductCategoryHook{}
}

func testDTBProductCategoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductCategory{}
	if err = randomize.Struct(seed, o, dtbProductCategoryDBTypes, true, dtbProductCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBProductCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBProductCategoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductCategory{}
	if err = randomize.Struct(seed, o, dtbProductCategoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DTBProductCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dtbProductCategoryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DTBProductCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBProductCategoryToOneDTBCategoryUsingCategory(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBProductCategory
	var foreign DTBCategory

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbProductCategoryDBTypes, false, dtbProductCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductCategory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dtbCategoryDBTypes, false, dtbCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCategory struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CategoryID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Category().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBProductCategorySlice{&local}
	if err = local.L.LoadCategory(ctx, tx, false, (*[]*DTBProductCategory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Category == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Category = nil
	if err = local.L.LoadCategory(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Category == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBProductCategoryToOneDTBProductUsingProduct(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBProductCategory
	var foreign DTBProduct

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbProductCategoryDBTypes, false, dtbProductCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductCategory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dtbProductDBTypes, false, dtbProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProduct struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ProductID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Product().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBProductCategorySlice{&local}
	if err = local.L.LoadProduct(ctx, tx, false, (*[]*DTBProductCategory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Product == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Product = nil
	if err = local.L.LoadProduct(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Product == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBProductCategoryToOneSetOpDTBCategoryUsingCategory(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBProductCategory
	var b, c DTBCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbProductCategoryDBTypes, false, strmangle.SetComplement(dtbProductCategoryPrimaryKeyColumns, dtbProductCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbCategoryDBTypes, false, strmangle.SetComplement(dtbCategoryPrimaryKeyColumns, dtbCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbCategoryDBTypes, false, strmangle.SetComplement(dtbCategoryPrimaryKeyColumns, dtbCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DTBCategory{&b, &c} {
		err = a.SetCategory(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Category != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CategoryDTBProductCategories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CategoryID != x.ID {
			t.Error("foreign key was wrong value", a.CategoryID)
		}

		if exists, err := DTBProductCategoryExists(ctx, tx, a.ProductID, a.CategoryID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testDTBProductCategoryToOneSetOpDTBProductUsingProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBProductCategory
	var b, c DTBProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbProductCategoryDBTypes, false, strmangle.SetComplement(dtbProductCategoryPrimaryKeyColumns, dtbProductCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbProductDBTypes, false, strmangle.SetComplement(dtbProductPrimaryKeyColumns, dtbProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbProductDBTypes, false, strmangle.SetComplement(dtbProductPrimaryKeyColumns, dtbProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DTBProduct{&b, &c} {
		err = a.SetProduct(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Product != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProductDTBProductCategories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ProductID != x.ID {
			t.Error("foreign key was wrong value", a.ProductID)
		}

		if exists, err := DTBProductCategoryExists(ctx, tx, a.ProductID, a.CategoryID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testDTBProductCategoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductCategory{}
	if err = randomize.Struct(seed, o, dtbProductCategoryDBTypes, true, dtbProductCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBProductCategoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductCategory{}
	if err = randomize.Struct(seed, o, dtbProductCategoryDBTypes, true, dtbProductCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBProductCategorySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBProductCategoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductCategory{}
	if err = randomize.Struct(seed, o, dtbProductCategoryDBTypes, true, dtbProductCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBProductCategories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dtbProductCategoryDBTypes = map[string]string{`ProductID`: `int`, `CategoryID`: `int`, `DiscriminatorType`: `varchar`}
	_                         = bytes.MinRead
)

func testDTBProductCategoriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dtbProductCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dtbProductCategoryColumns) == len(dtbProductCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductCategory{}
	if err = randomize.Struct(seed, o, dtbProductCategoryDBTypes, true, dtbProductCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBProductCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbProductCategoryDBTypes, true, dtbProductCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBProductCategory struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDTBProductCategoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dtbProductCategoryColumns) == len(dtbProductCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductCategory{}
	if err = randomize.Struct(seed, o, dtbProductCategoryDBTypes, true, dtbProductCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBProductCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbProductCategoryDBTypes, true, dtbProductCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBProductCategory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dtbProductCategoryColumns, dtbProductCategoryPrimaryKeyColumns) {
		fields = dtbProductCategoryColumns
	} else {
		fields = strmangle.SetComplement(
			dtbProductCategoryColumns,
			dtbProductCategoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DTBProductCategorySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDTBProductCategoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(dtbProductCategoryColumns) == len(dtbProductCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDTBProductCategoryUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DTBProductCategory{}
	if err = randomize.Struct(seed, &o, dtbProductCategoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBProductCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBProductCategory: %s", err)
	}

	count, err := DTBProductCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dtbProductCategoryDBTypes, false, dtbProductCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBProductCategory struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBProductCategory: %s", err)
	}

	count, err = DTBProductCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
