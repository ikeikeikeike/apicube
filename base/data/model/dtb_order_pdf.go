// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// DTBOrderPDF is an object representing the database table.
type DTBOrderPDF struct {
	MemberID          uint        `boil:"member_id" json:"member_id" toml:"member_id" yaml:"member_id"`
	Title             null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	Message1          null.String `boil:"message1" json:"message1,omitempty" toml:"message1" yaml:"message1,omitempty"`
	Message2          null.String `boil:"message2" json:"message2,omitempty" toml:"message2" yaml:"message2,omitempty"`
	Message3          null.String `boil:"message3" json:"message3,omitempty" toml:"message3" yaml:"message3,omitempty"`
	Note1             null.String `boil:"note1" json:"note1,omitempty" toml:"note1" yaml:"note1,omitempty"`
	Note2             null.String `boil:"note2" json:"note2,omitempty" toml:"note2" yaml:"note2,omitempty"`
	Note3             null.String `boil:"note3" json:"note3,omitempty" toml:"note3" yaml:"note3,omitempty"`
	CreateDate        time.Time   `boil:"create_date" json:"create_date" toml:"create_date" yaml:"create_date"`
	UpdateDate        time.Time   `boil:"update_date" json:"update_date" toml:"update_date" yaml:"update_date"`
	Visible           bool        `boil:"visible" json:"visible" toml:"visible" yaml:"visible"`
	DiscriminatorType string      `boil:"discriminator_type" json:"discriminator_type" toml:"discriminator_type" yaml:"discriminator_type"`

	R *dtbOrderPDFR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dtbOrderPDFL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DTBOrderPDFColumns = struct {
	MemberID          string
	Title             string
	Message1          string
	Message2          string
	Message3          string
	Note1             string
	Note2             string
	Note3             string
	CreateDate        string
	UpdateDate        string
	Visible           string
	DiscriminatorType string
}{
	MemberID:          "member_id",
	Title:             "title",
	Message1:          "message1",
	Message2:          "message2",
	Message3:          "message3",
	Note1:             "note1",
	Note2:             "note2",
	Note3:             "note3",
	CreateDate:        "create_date",
	UpdateDate:        "update_date",
	Visible:           "visible",
	DiscriminatorType: "discriminator_type",
}

// Generated where

var DTBOrderPDFWhere = struct {
	MemberID          whereHelperuint
	Title             whereHelpernull_String
	Message1          whereHelpernull_String
	Message2          whereHelpernull_String
	Message3          whereHelpernull_String
	Note1             whereHelpernull_String
	Note2             whereHelpernull_String
	Note3             whereHelpernull_String
	CreateDate        whereHelpertime_Time
	UpdateDate        whereHelpertime_Time
	Visible           whereHelperbool
	DiscriminatorType whereHelperstring
}{
	MemberID:          whereHelperuint{field: `member_id`},
	Title:             whereHelpernull_String{field: `title`},
	Message1:          whereHelpernull_String{field: `message1`},
	Message2:          whereHelpernull_String{field: `message2`},
	Message3:          whereHelpernull_String{field: `message3`},
	Note1:             whereHelpernull_String{field: `note1`},
	Note2:             whereHelpernull_String{field: `note2`},
	Note3:             whereHelpernull_String{field: `note3`},
	CreateDate:        whereHelpertime_Time{field: `create_date`},
	UpdateDate:        whereHelpertime_Time{field: `update_date`},
	Visible:           whereHelperbool{field: `visible`},
	DiscriminatorType: whereHelperstring{field: `discriminator_type`},
}

// DTBOrderPDFRels is where relationship names are stored.
var DTBOrderPDFRels = struct {
}{}

// dtbOrderPDFR is where relationships are stored.
type dtbOrderPDFR struct {
}

// NewStruct creates a new relationship struct
func (*dtbOrderPDFR) NewStruct() *dtbOrderPDFR {
	return &dtbOrderPDFR{}
}

// dtbOrderPDFL is where Load methods for each relationship are stored.
type dtbOrderPDFL struct{}

var (
	dtbOrderPDFColumns               = []string{"member_id", "title", "message1", "message2", "message3", "note1", "note2", "note3", "create_date", "update_date", "visible", "discriminator_type"}
	dtbOrderPDFColumnsWithoutDefault = []string{"member_id", "title", "message1", "message2", "message3", "note1", "note2", "note3", "create_date", "update_date", "discriminator_type"}
	dtbOrderPDFColumnsWithDefault    = []string{"visible"}
	dtbOrderPDFPrimaryKeyColumns     = []string{"member_id"}
)

type (
	// DTBOrderPDFSlice is an alias for a slice of pointers to DTBOrderPDF.
	// This should generally be used opposed to []DTBOrderPDF.
	DTBOrderPDFSlice []*DTBOrderPDF
	// DTBOrderPDFHook is the signature for custom DTBOrderPDF hook methods
	DTBOrderPDFHook func(context.Context, boil.ContextExecutor, *DTBOrderPDF) error

	dtbOrderPDFQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dtbOrderPDFType                 = reflect.TypeOf(&DTBOrderPDF{})
	dtbOrderPDFMapping              = queries.MakeStructMapping(dtbOrderPDFType)
	dtbOrderPDFPrimaryKeyMapping, _ = queries.BindMapping(dtbOrderPDFType, dtbOrderPDFMapping, dtbOrderPDFPrimaryKeyColumns)
	dtbOrderPDFInsertCacheMut       sync.RWMutex
	dtbOrderPDFInsertCache          = make(map[string]insertCache)
	dtbOrderPDFUpdateCacheMut       sync.RWMutex
	dtbOrderPDFUpdateCache          = make(map[string]updateCache)
	dtbOrderPDFUpsertCacheMut       sync.RWMutex
	dtbOrderPDFUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dtbOrderPDFBeforeInsertHooks []DTBOrderPDFHook
var dtbOrderPDFBeforeUpdateHooks []DTBOrderPDFHook
var dtbOrderPDFBeforeDeleteHooks []DTBOrderPDFHook
var dtbOrderPDFBeforeUpsertHooks []DTBOrderPDFHook

var dtbOrderPDFAfterInsertHooks []DTBOrderPDFHook
var dtbOrderPDFAfterSelectHooks []DTBOrderPDFHook
var dtbOrderPDFAfterUpdateHooks []DTBOrderPDFHook
var dtbOrderPDFAfterDeleteHooks []DTBOrderPDFHook
var dtbOrderPDFAfterUpsertHooks []DTBOrderPDFHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DTBOrderPDF) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbOrderPDFBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DTBOrderPDF) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbOrderPDFBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DTBOrderPDF) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbOrderPDFBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DTBOrderPDF) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbOrderPDFBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DTBOrderPDF) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbOrderPDFAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DTBOrderPDF) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbOrderPDFAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DTBOrderPDF) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbOrderPDFAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DTBOrderPDF) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbOrderPDFAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DTBOrderPDF) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbOrderPDFAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDTBOrderPDFHook registers your hook function for all future operations.
func AddDTBOrderPDFHook(hookPoint boil.HookPoint, dtbOrderPDFHook DTBOrderPDFHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		dtbOrderPDFBeforeInsertHooks = append(dtbOrderPDFBeforeInsertHooks, dtbOrderPDFHook)
	case boil.BeforeUpdateHook:
		dtbOrderPDFBeforeUpdateHooks = append(dtbOrderPDFBeforeUpdateHooks, dtbOrderPDFHook)
	case boil.BeforeDeleteHook:
		dtbOrderPDFBeforeDeleteHooks = append(dtbOrderPDFBeforeDeleteHooks, dtbOrderPDFHook)
	case boil.BeforeUpsertHook:
		dtbOrderPDFBeforeUpsertHooks = append(dtbOrderPDFBeforeUpsertHooks, dtbOrderPDFHook)
	case boil.AfterInsertHook:
		dtbOrderPDFAfterInsertHooks = append(dtbOrderPDFAfterInsertHooks, dtbOrderPDFHook)
	case boil.AfterSelectHook:
		dtbOrderPDFAfterSelectHooks = append(dtbOrderPDFAfterSelectHooks, dtbOrderPDFHook)
	case boil.AfterUpdateHook:
		dtbOrderPDFAfterUpdateHooks = append(dtbOrderPDFAfterUpdateHooks, dtbOrderPDFHook)
	case boil.AfterDeleteHook:
		dtbOrderPDFAfterDeleteHooks = append(dtbOrderPDFAfterDeleteHooks, dtbOrderPDFHook)
	case boil.AfterUpsertHook:
		dtbOrderPDFAfterUpsertHooks = append(dtbOrderPDFAfterUpsertHooks, dtbOrderPDFHook)
	}
}

// One returns a single dtbOrderPDF record from the query.
func (q dtbOrderPDFQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DTBOrderPDF, error) {
	o := &DTBOrderPDF{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for dtb_order_pdf")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DTBOrderPDF records from the query.
func (q dtbOrderPDFQuery) All(ctx context.Context, exec boil.ContextExecutor) (DTBOrderPDFSlice, error) {
	var o []*DTBOrderPDF

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to DTBOrderPDF slice")
	}

	if len(dtbOrderPDFAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DTBOrderPDF records in the query.
func (q dtbOrderPDFQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count dtb_order_pdf rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dtbOrderPDFQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if dtb_order_pdf exists")
	}

	return count > 0, nil
}

// DTBOrderPDFS retrieves all the records using an executor.
func DTBOrderPDFS(mods ...qm.QueryMod) dtbOrderPDFQuery {
	mods = append(mods, qm.From("`dtb_order_pdf`"))
	return dtbOrderPDFQuery{NewQuery(mods...)}
}

// FindDTBOrderPDF retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDTBOrderPDF(ctx context.Context, exec boil.ContextExecutor, memberID uint, selectCols ...string) (*DTBOrderPDF, error) {
	dtbOrderPDFObj := &DTBOrderPDF{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `dtb_order_pdf` where `member_id`=?", sel,
	)

	q := queries.Raw(query, memberID)

	err := q.Bind(ctx, exec, dtbOrderPDFObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from dtb_order_pdf")
	}

	return dtbOrderPDFObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DTBOrderPDF) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no dtb_order_pdf provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dtbOrderPDFColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dtbOrderPDFInsertCacheMut.RLock()
	cache, cached := dtbOrderPDFInsertCache[key]
	dtbOrderPDFInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dtbOrderPDFColumns,
			dtbOrderPDFColumnsWithDefault,
			dtbOrderPDFColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dtbOrderPDFType, dtbOrderPDFMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dtbOrderPDFType, dtbOrderPDFMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `dtb_order_pdf` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `dtb_order_pdf` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `dtb_order_pdf` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dtbOrderPDFPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into dtb_order_pdf")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.MemberID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for dtb_order_pdf")
	}

CacheNoHooks:
	if !cached {
		dtbOrderPDFInsertCacheMut.Lock()
		dtbOrderPDFInsertCache[key] = cache
		dtbOrderPDFInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DTBOrderPDF.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DTBOrderPDF) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dtbOrderPDFUpdateCacheMut.RLock()
	cache, cached := dtbOrderPDFUpdateCache[key]
	dtbOrderPDFUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dtbOrderPDFColumns,
			dtbOrderPDFPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update dtb_order_pdf, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `dtb_order_pdf` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dtbOrderPDFPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dtbOrderPDFType, dtbOrderPDFMapping, append(wl, dtbOrderPDFPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update dtb_order_pdf row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for dtb_order_pdf")
	}

	if !cached {
		dtbOrderPDFUpdateCacheMut.Lock()
		dtbOrderPDFUpdateCache[key] = cache
		dtbOrderPDFUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dtbOrderPDFQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for dtb_order_pdf")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for dtb_order_pdf")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DTBOrderPDFSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbOrderPDFPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `dtb_order_pdf` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbOrderPDFPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in dtbOrderPDF slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all dtbOrderPDF")
	}
	return rowsAff, nil
}

var mySQLDTBOrderPDFUniqueColumns = []string{
	"member_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DTBOrderPDF) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no dtb_order_pdf provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dtbOrderPDFColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDTBOrderPDFUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dtbOrderPDFUpsertCacheMut.RLock()
	cache, cached := dtbOrderPDFUpsertCache[key]
	dtbOrderPDFUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dtbOrderPDFColumns,
			dtbOrderPDFColumnsWithDefault,
			dtbOrderPDFColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			dtbOrderPDFColumns,
			dtbOrderPDFPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("model: unable to upsert dtb_order_pdf, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "dtb_order_pdf", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `dtb_order_pdf` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dtbOrderPDFType, dtbOrderPDFMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dtbOrderPDFType, dtbOrderPDFMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for dtb_order_pdf")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dtbOrderPDFType, dtbOrderPDFMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for dtb_order_pdf")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for dtb_order_pdf")
	}

CacheNoHooks:
	if !cached {
		dtbOrderPDFUpsertCacheMut.Lock()
		dtbOrderPDFUpsertCache[key] = cache
		dtbOrderPDFUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DTBOrderPDF record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DTBOrderPDF) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no DTBOrderPDF provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dtbOrderPDFPrimaryKeyMapping)
	sql := "DELETE FROM `dtb_order_pdf` WHERE `member_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from dtb_order_pdf")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for dtb_order_pdf")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dtbOrderPDFQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no dtbOrderPDFQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from dtb_order_pdf")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for dtb_order_pdf")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DTBOrderPDFSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no DTBOrderPDF slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(dtbOrderPDFBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbOrderPDFPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `dtb_order_pdf` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbOrderPDFPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from dtbOrderPDF slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for dtb_order_pdf")
	}

	if len(dtbOrderPDFAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DTBOrderPDF) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDTBOrderPDF(ctx, exec, o.MemberID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DTBOrderPDFSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DTBOrderPDFSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbOrderPDFPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `dtb_order_pdf`.* FROM `dtb_order_pdf` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbOrderPDFPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in DTBOrderPDFSlice")
	}

	*o = slice

	return nil
}

// DTBOrderPDFExists checks if the DTBOrderPDF row exists.
func DTBOrderPDFExists(ctx context.Context, exec boil.ContextExecutor, memberID uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `dtb_order_pdf` where `member_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, memberID)
	}

	row := exec.QueryRowContext(ctx, sql, memberID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if dtb_order_pdf exists")
	}

	return exists, nil
}
