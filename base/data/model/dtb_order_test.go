// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDTBOrders(t *testing.T) {
	t.Parallel()

	query := DTBOrders()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDTBOrdersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBOrder{}
	if err = randomize.Struct(seed, o, dtbOrderDBTypes, true, dtbOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBOrders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBOrdersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBOrder{}
	if err = randomize.Struct(seed, o, dtbOrderDBTypes, true, dtbOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DTBOrders().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBOrders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBOrdersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBOrder{}
	if err = randomize.Struct(seed, o, dtbOrderDBTypes, true, dtbOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBOrderSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBOrders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBOrdersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBOrder{}
	if err = randomize.Struct(seed, o, dtbOrderDBTypes, true, dtbOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DTBOrderExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DTBOrder exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DTBOrderExists to return true, but got false.")
	}
}

func testDTBOrdersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBOrder{}
	if err = randomize.Struct(seed, o, dtbOrderDBTypes, true, dtbOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dtbOrderFound, err := FindDTBOrder(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if dtbOrderFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDTBOrdersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBOrder{}
	if err = randomize.Struct(seed, o, dtbOrderDBTypes, true, dtbOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DTBOrders().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDTBOrdersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBOrder{}
	if err = randomize.Struct(seed, o, dtbOrderDBTypes, true, dtbOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DTBOrders().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDTBOrdersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtbOrderOne := &DTBOrder{}
	dtbOrderTwo := &DTBOrder{}
	if err = randomize.Struct(seed, dtbOrderOne, dtbOrderDBTypes, false, dtbOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrder struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbOrderTwo, dtbOrderDBTypes, false, dtbOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbOrderOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbOrderTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBOrders().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDTBOrdersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dtbOrderOne := &DTBOrder{}
	dtbOrderTwo := &DTBOrder{}
	if err = randomize.Struct(seed, dtbOrderOne, dtbOrderDBTypes, false, dtbOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrder struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbOrderTwo, dtbOrderDBTypes, false, dtbOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbOrderOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbOrderTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBOrders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dtbOrderBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBOrder) error {
	*o = DTBOrder{}
	return nil
}

func dtbOrderAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBOrder) error {
	*o = DTBOrder{}
	return nil
}

func dtbOrderAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DTBOrder) error {
	*o = DTBOrder{}
	return nil
}

func dtbOrderBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBOrder) error {
	*o = DTBOrder{}
	return nil
}

func dtbOrderAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBOrder) error {
	*o = DTBOrder{}
	return nil
}

func dtbOrderBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBOrder) error {
	*o = DTBOrder{}
	return nil
}

func dtbOrderAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBOrder) error {
	*o = DTBOrder{}
	return nil
}

func dtbOrderBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBOrder) error {
	*o = DTBOrder{}
	return nil
}

func dtbOrderAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBOrder) error {
	*o = DTBOrder{}
	return nil
}

func testDTBOrdersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DTBOrder{}
	o := &DTBOrder{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dtbOrderDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBOrder object: %s", err)
	}

	AddDTBOrderHook(boil.BeforeInsertHook, dtbOrderBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dtbOrderBeforeInsertHooks = []DTBOrderHook{}

	AddDTBOrderHook(boil.AfterInsertHook, dtbOrderAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dtbOrderAfterInsertHooks = []DTBOrderHook{}

	AddDTBOrderHook(boil.AfterSelectHook, dtbOrderAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dtbOrderAfterSelectHooks = []DTBOrderHook{}

	AddDTBOrderHook(boil.BeforeUpdateHook, dtbOrderBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dtbOrderBeforeUpdateHooks = []DTBOrderHook{}

	AddDTBOrderHook(boil.AfterUpdateHook, dtbOrderAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dtbOrderAfterUpdateHooks = []DTBOrderHook{}

	AddDTBOrderHook(boil.BeforeDeleteHook, dtbOrderBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dtbOrderBeforeDeleteHooks = []DTBOrderHook{}

	AddDTBOrderHook(boil.AfterDeleteHook, dtbOrderAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dtbOrderAfterDeleteHooks = []DTBOrderHook{}

	AddDTBOrderHook(boil.BeforeUpsertHook, dtbOrderBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dtbOrderBeforeUpsertHooks = []DTBOrderHook{}

	AddDTBOrderHook(boil.AfterUpsertHook, dtbOrderAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dtbOrderAfterUpsertHooks = []DTBOrderHook{}
}

func testDTBOrdersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBOrder{}
	if err = randomize.Struct(seed, o, dtbOrderDBTypes, true, dtbOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBOrders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBOrdersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBOrder{}
	if err = randomize.Struct(seed, o, dtbOrderDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DTBOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dtbOrderColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DTBOrders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBOrderToManyOrderDTBMailHistories(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrder
	var b, c DTBMailHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderDBTypes, true, dtbOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrder struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbMailHistoryDBTypes, false, dtbMailHistoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbMailHistoryDBTypes, false, dtbMailHistoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.OrderID, a.ID)
	queries.Assign(&c.OrderID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OrderDTBMailHistories().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.OrderID, b.OrderID) {
			bFound = true
		}
		if queries.Equal(v.OrderID, c.OrderID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBOrderSlice{&a}
	if err = a.L.LoadOrderDTBMailHistories(ctx, tx, false, (*[]*DTBOrder)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderDTBMailHistories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OrderDTBMailHistories = nil
	if err = a.L.LoadOrderDTBMailHistories(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderDTBMailHistories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBOrderToManyOrderDTBOrderItems(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrder
	var b, c DTBOrderItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderDBTypes, true, dtbOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrder struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbOrderItemDBTypes, false, dtbOrderItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbOrderItemDBTypes, false, dtbOrderItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.OrderID, a.ID)
	queries.Assign(&c.OrderID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OrderDTBOrderItems().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.OrderID, b.OrderID) {
			bFound = true
		}
		if queries.Equal(v.OrderID, c.OrderID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBOrderSlice{&a}
	if err = a.L.LoadOrderDTBOrderItems(ctx, tx, false, (*[]*DTBOrder)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderDTBOrderItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OrderDTBOrderItems = nil
	if err = a.L.LoadOrderDTBOrderItems(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderDTBOrderItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBOrderToManyOrderDTBShippings(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrder
	var b, c DTBShipping

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderDBTypes, true, dtbOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrder struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbShippingDBTypes, false, dtbShippingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbShippingDBTypes, false, dtbShippingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.OrderID, a.ID)
	queries.Assign(&c.OrderID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OrderDTBShippings().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.OrderID, b.OrderID) {
			bFound = true
		}
		if queries.Equal(v.OrderID, c.OrderID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBOrderSlice{&a}
	if err = a.L.LoadOrderDTBShippings(ctx, tx, false, (*[]*DTBOrder)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderDTBShippings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OrderDTBShippings = nil
	if err = a.L.LoadOrderDTBShippings(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderDTBShippings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBOrderToManyAddOpOrderDTBMailHistories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrder
	var b, c, d, e DTBMailHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBMailHistory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbMailHistoryDBTypes, false, strmangle.SetComplement(dtbMailHistoryPrimaryKeyColumns, dtbMailHistoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBMailHistory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrderDTBMailHistories(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.OrderID) {
			t.Error("foreign key was wrong value", a.ID, first.OrderID)
		}
		if !queries.Equal(a.ID, second.OrderID) {
			t.Error("foreign key was wrong value", a.ID, second.OrderID)
		}

		if first.R.Order != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Order != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OrderDTBMailHistories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OrderDTBMailHistories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OrderDTBMailHistories().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDTBOrderToManySetOpOrderDTBMailHistories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrder
	var b, c, d, e DTBMailHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBMailHistory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbMailHistoryDBTypes, false, strmangle.SetComplement(dtbMailHistoryPrimaryKeyColumns, dtbMailHistoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOrderDTBMailHistories(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OrderDTBMailHistories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOrderDTBMailHistories(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OrderDTBMailHistories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OrderID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OrderID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.OrderID) {
		t.Error("foreign key was wrong value", a.ID, d.OrderID)
	}
	if !queries.Equal(a.ID, e.OrderID) {
		t.Error("foreign key was wrong value", a.ID, e.OrderID)
	}

	if b.R.Order != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Order != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Order != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Order != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.OrderDTBMailHistories[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.OrderDTBMailHistories[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDTBOrderToManyRemoveOpOrderDTBMailHistories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrder
	var b, c, d, e DTBMailHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBMailHistory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbMailHistoryDBTypes, false, strmangle.SetComplement(dtbMailHistoryPrimaryKeyColumns, dtbMailHistoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOrderDTBMailHistories(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OrderDTBMailHistories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOrderDTBMailHistories(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OrderDTBMailHistories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OrderID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OrderID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Order != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Order != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Order != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Order != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.OrderDTBMailHistories) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.OrderDTBMailHistories[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.OrderDTBMailHistories[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDTBOrderToManyAddOpOrderDTBOrderItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrder
	var b, c, d, e DTBOrderItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBOrderItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbOrderItemDBTypes, false, strmangle.SetComplement(dtbOrderItemPrimaryKeyColumns, dtbOrderItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBOrderItem{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrderDTBOrderItems(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.OrderID) {
			t.Error("foreign key was wrong value", a.ID, first.OrderID)
		}
		if !queries.Equal(a.ID, second.OrderID) {
			t.Error("foreign key was wrong value", a.ID, second.OrderID)
		}

		if first.R.Order != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Order != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OrderDTBOrderItems[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OrderDTBOrderItems[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OrderDTBOrderItems().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDTBOrderToManySetOpOrderDTBOrderItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrder
	var b, c, d, e DTBOrderItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBOrderItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbOrderItemDBTypes, false, strmangle.SetComplement(dtbOrderItemPrimaryKeyColumns, dtbOrderItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOrderDTBOrderItems(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OrderDTBOrderItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOrderDTBOrderItems(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OrderDTBOrderItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OrderID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OrderID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.OrderID) {
		t.Error("foreign key was wrong value", a.ID, d.OrderID)
	}
	if !queries.Equal(a.ID, e.OrderID) {
		t.Error("foreign key was wrong value", a.ID, e.OrderID)
	}

	if b.R.Order != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Order != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Order != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Order != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.OrderDTBOrderItems[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.OrderDTBOrderItems[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDTBOrderToManyRemoveOpOrderDTBOrderItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrder
	var b, c, d, e DTBOrderItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBOrderItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbOrderItemDBTypes, false, strmangle.SetComplement(dtbOrderItemPrimaryKeyColumns, dtbOrderItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOrderDTBOrderItems(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OrderDTBOrderItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOrderDTBOrderItems(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OrderDTBOrderItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OrderID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OrderID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Order != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Order != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Order != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Order != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.OrderDTBOrderItems) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.OrderDTBOrderItems[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.OrderDTBOrderItems[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDTBOrderToManyAddOpOrderDTBShippings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrder
	var b, c, d, e DTBShipping

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBShipping{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbShippingDBTypes, false, strmangle.SetComplement(dtbShippingPrimaryKeyColumns, dtbShippingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBShipping{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrderDTBShippings(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.OrderID) {
			t.Error("foreign key was wrong value", a.ID, first.OrderID)
		}
		if !queries.Equal(a.ID, second.OrderID) {
			t.Error("foreign key was wrong value", a.ID, second.OrderID)
		}

		if first.R.Order != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Order != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OrderDTBShippings[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OrderDTBShippings[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OrderDTBShippings().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDTBOrderToManySetOpOrderDTBShippings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrder
	var b, c, d, e DTBShipping

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBShipping{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbShippingDBTypes, false, strmangle.SetComplement(dtbShippingPrimaryKeyColumns, dtbShippingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOrderDTBShippings(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OrderDTBShippings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOrderDTBShippings(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OrderDTBShippings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OrderID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OrderID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.OrderID) {
		t.Error("foreign key was wrong value", a.ID, d.OrderID)
	}
	if !queries.Equal(a.ID, e.OrderID) {
		t.Error("foreign key was wrong value", a.ID, e.OrderID)
	}

	if b.R.Order != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Order != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Order != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Order != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.OrderDTBShippings[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.OrderDTBShippings[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDTBOrderToManyRemoveOpOrderDTBShippings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrder
	var b, c, d, e DTBShipping

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBShipping{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbShippingDBTypes, false, strmangle.SetComplement(dtbShippingPrimaryKeyColumns, dtbShippingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOrderDTBShippings(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OrderDTBShippings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOrderDTBShippings(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OrderDTBShippings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OrderID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OrderID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Order != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Order != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Order != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Order != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.OrderDTBShippings) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.OrderDTBShippings[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.OrderDTBShippings[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDTBOrderToOneDTBPaymentUsingPayment(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBOrder
	var foreign DTBPayment

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbOrderDBTypes, true, dtbOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrder struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dtbPaymentDBTypes, false, dtbPaymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPayment struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.PaymentID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Payment().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBOrderSlice{&local}
	if err = local.L.LoadPayment(ctx, tx, false, (*[]*DTBOrder)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Payment == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Payment = nil
	if err = local.L.LoadPayment(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Payment == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBOrderToOneMTBDeviceTypeUsingDeviceType(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBOrder
	var foreign MTBDeviceType

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbOrderDBTypes, true, dtbOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrder struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, mtbDeviceTypeDBTypes, false, mtbDeviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBDeviceType struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.DeviceTypeID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.DeviceType().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBOrderSlice{&local}
	if err = local.L.LoadDeviceType(ctx, tx, false, (*[]*DTBOrder)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DeviceType == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.DeviceType = nil
	if err = local.L.LoadDeviceType(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DeviceType == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBOrderToOneMTBSexUsingSex(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBOrder
	var foreign MTBSex

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbOrderDBTypes, true, dtbOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrder struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, mtbSexDBTypes, false, mtbSexColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBSex struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.SexID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Sex().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBOrderSlice{&local}
	if err = local.L.LoadSex(ctx, tx, false, (*[]*DTBOrder)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Sex == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Sex = nil
	if err = local.L.LoadSex(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Sex == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBOrderToOneDTBCustomerUsingCustomer(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBOrder
	var foreign DTBCustomer

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbOrderDBTypes, true, dtbOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrder struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dtbCustomerDBTypes, false, dtbCustomerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomer struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CustomerID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Customer().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBOrderSlice{&local}
	if err = local.L.LoadCustomer(ctx, tx, false, (*[]*DTBOrder)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Customer == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Customer = nil
	if err = local.L.LoadCustomer(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Customer == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBOrderToOneMTBJobUsingJob(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBOrder
	var foreign MTBJob

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbOrderDBTypes, true, dtbOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrder struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, mtbJobDBTypes, false, mtbJobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBJob struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.JobID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Job().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBOrderSlice{&local}
	if err = local.L.LoadJob(ctx, tx, false, (*[]*DTBOrder)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Job == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Job = nil
	if err = local.L.LoadJob(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Job == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBOrderToOneMTBPrefUsingPref(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBOrder
	var foreign MTBPref

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbOrderDBTypes, true, dtbOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrder struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, mtbPrefDBTypes, false, mtbPrefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPref struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.PrefID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Pref().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBOrderSlice{&local}
	if err = local.L.LoadPref(ctx, tx, false, (*[]*DTBOrder)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Pref == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Pref = nil
	if err = local.L.LoadPref(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Pref == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBOrderToOneMTBCountryUsingCountry(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBOrder
	var foreign MTBCountry

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbOrderDBTypes, true, dtbOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrder struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, mtbCountryDBTypes, false, mtbCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCountry struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CountryID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Country().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBOrderSlice{&local}
	if err = local.L.LoadCountry(ctx, tx, false, (*[]*DTBOrder)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Country == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Country = nil
	if err = local.L.LoadCountry(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Country == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBOrderToOneSetOpDTBPaymentUsingPayment(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrder
	var b, c DTBPayment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbPaymentDBTypes, false, strmangle.SetComplement(dtbPaymentPrimaryKeyColumns, dtbPaymentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbPaymentDBTypes, false, strmangle.SetComplement(dtbPaymentPrimaryKeyColumns, dtbPaymentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DTBPayment{&b, &c} {
		err = a.SetPayment(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Payment != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PaymentDTBOrders[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.PaymentID, x.ID) {
			t.Error("foreign key was wrong value", a.PaymentID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PaymentID))
		reflect.Indirect(reflect.ValueOf(&a.PaymentID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.PaymentID, x.ID) {
			t.Error("foreign key was wrong value", a.PaymentID, x.ID)
		}
	}
}

func testDTBOrderToOneRemoveOpDTBPaymentUsingPayment(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrder
	var b DTBPayment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbPaymentDBTypes, false, strmangle.SetComplement(dtbPaymentPrimaryKeyColumns, dtbPaymentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetPayment(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemovePayment(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Payment().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Payment != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.PaymentID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.PaymentDTBOrders) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBOrderToOneSetOpMTBDeviceTypeUsingDeviceType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrder
	var b, c MTBDeviceType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbDeviceTypeDBTypes, false, strmangle.SetComplement(mtbDeviceTypePrimaryKeyColumns, mtbDeviceTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mtbDeviceTypeDBTypes, false, strmangle.SetComplement(mtbDeviceTypePrimaryKeyColumns, mtbDeviceTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MTBDeviceType{&b, &c} {
		err = a.SetDeviceType(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.DeviceType != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DeviceTypeDTBOrders[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.DeviceTypeID, x.ID) {
			t.Error("foreign key was wrong value", a.DeviceTypeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DeviceTypeID))
		reflect.Indirect(reflect.ValueOf(&a.DeviceTypeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.DeviceTypeID, x.ID) {
			t.Error("foreign key was wrong value", a.DeviceTypeID, x.ID)
		}
	}
}

func testDTBOrderToOneRemoveOpMTBDeviceTypeUsingDeviceType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrder
	var b MTBDeviceType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbDeviceTypeDBTypes, false, strmangle.SetComplement(mtbDeviceTypePrimaryKeyColumns, mtbDeviceTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetDeviceType(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveDeviceType(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.DeviceType().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.DeviceType != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.DeviceTypeID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.DeviceTypeDTBOrders) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBOrderToOneSetOpMTBSexUsingSex(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrder
	var b, c MTBSex

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbSexDBTypes, false, strmangle.SetComplement(mtbSexPrimaryKeyColumns, mtbSexColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mtbSexDBTypes, false, strmangle.SetComplement(mtbSexPrimaryKeyColumns, mtbSexColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MTBSex{&b, &c} {
		err = a.SetSex(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Sex != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SexDTBOrders[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.SexID, x.ID) {
			t.Error("foreign key was wrong value", a.SexID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SexID))
		reflect.Indirect(reflect.ValueOf(&a.SexID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.SexID, x.ID) {
			t.Error("foreign key was wrong value", a.SexID, x.ID)
		}
	}
}

func testDTBOrderToOneRemoveOpMTBSexUsingSex(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrder
	var b MTBSex

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbSexDBTypes, false, strmangle.SetComplement(mtbSexPrimaryKeyColumns, mtbSexColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSex(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSex(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Sex().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Sex != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.SexID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.SexDTBOrders) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBOrderToOneSetOpDTBCustomerUsingCustomer(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrder
	var b, c DTBCustomer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbCustomerDBTypes, false, strmangle.SetComplement(dtbCustomerPrimaryKeyColumns, dtbCustomerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbCustomerDBTypes, false, strmangle.SetComplement(dtbCustomerPrimaryKeyColumns, dtbCustomerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DTBCustomer{&b, &c} {
		err = a.SetCustomer(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Customer != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CustomerDTBOrders[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CustomerID, x.ID) {
			t.Error("foreign key was wrong value", a.CustomerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CustomerID))
		reflect.Indirect(reflect.ValueOf(&a.CustomerID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CustomerID, x.ID) {
			t.Error("foreign key was wrong value", a.CustomerID, x.ID)
		}
	}
}

func testDTBOrderToOneRemoveOpDTBCustomerUsingCustomer(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrder
	var b DTBCustomer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbCustomerDBTypes, false, strmangle.SetComplement(dtbCustomerPrimaryKeyColumns, dtbCustomerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCustomer(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCustomer(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Customer().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Customer != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CustomerID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CustomerDTBOrders) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBOrderToOneSetOpMTBJobUsingJob(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrder
	var b, c MTBJob

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbJobDBTypes, false, strmangle.SetComplement(mtbJobPrimaryKeyColumns, mtbJobColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mtbJobDBTypes, false, strmangle.SetComplement(mtbJobPrimaryKeyColumns, mtbJobColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MTBJob{&b, &c} {
		err = a.SetJob(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Job != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.JobDTBOrders[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.JobID, x.ID) {
			t.Error("foreign key was wrong value", a.JobID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.JobID))
		reflect.Indirect(reflect.ValueOf(&a.JobID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.JobID, x.ID) {
			t.Error("foreign key was wrong value", a.JobID, x.ID)
		}
	}
}

func testDTBOrderToOneRemoveOpMTBJobUsingJob(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrder
	var b MTBJob

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbJobDBTypes, false, strmangle.SetComplement(mtbJobPrimaryKeyColumns, mtbJobColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetJob(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveJob(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Job().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Job != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.JobID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.JobDTBOrders) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBOrderToOneSetOpMTBPrefUsingPref(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrder
	var b, c MTBPref

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MTBPref{&b, &c} {
		err = a.SetPref(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Pref != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PrefDTBOrders[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.PrefID, x.ID) {
			t.Error("foreign key was wrong value", a.PrefID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PrefID))
		reflect.Indirect(reflect.ValueOf(&a.PrefID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.PrefID, x.ID) {
			t.Error("foreign key was wrong value", a.PrefID, x.ID)
		}
	}
}

func testDTBOrderToOneRemoveOpMTBPrefUsingPref(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrder
	var b MTBPref

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetPref(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemovePref(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Pref().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Pref != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.PrefID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.PrefDTBOrders) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBOrderToOneSetOpMTBCountryUsingCountry(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrder
	var b, c MTBCountry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbCountryDBTypes, false, strmangle.SetComplement(mtbCountryPrimaryKeyColumns, mtbCountryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mtbCountryDBTypes, false, strmangle.SetComplement(mtbCountryPrimaryKeyColumns, mtbCountryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MTBCountry{&b, &c} {
		err = a.SetCountry(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Country != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CountryDTBOrders[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CountryID, x.ID) {
			t.Error("foreign key was wrong value", a.CountryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CountryID))
		reflect.Indirect(reflect.ValueOf(&a.CountryID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CountryID, x.ID) {
			t.Error("foreign key was wrong value", a.CountryID, x.ID)
		}
	}
}

func testDTBOrderToOneRemoveOpMTBCountryUsingCountry(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBOrder
	var b MTBCountry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbCountryDBTypes, false, strmangle.SetComplement(mtbCountryPrimaryKeyColumns, mtbCountryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCountry(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCountry(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Country().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Country != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CountryID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CountryDTBOrders) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBOrdersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBOrder{}
	if err = randomize.Struct(seed, o, dtbOrderDBTypes, true, dtbOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBOrdersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBOrder{}
	if err = randomize.Struct(seed, o, dtbOrderDBTypes, true, dtbOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBOrderSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBOrdersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBOrder{}
	if err = randomize.Struct(seed, o, dtbOrderDBTypes, true, dtbOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBOrders().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dtbOrderDBTypes = map[string]string{`ID`: `int`, `CustomerID`: `int`, `CountryID`: `smallint`, `PrefID`: `smallint`, `SexID`: `smallint`, `JobID`: `smallint`, `PaymentID`: `int`, `DeviceTypeID`: `smallint`, `PreOrderID`: `varchar`, `OrderNo`: `varchar`, `Message`: `varchar`, `Name01`: `varchar`, `Name02`: `varchar`, `Kana01`: `varchar`, `Kana02`: `varchar`, `CompanyName`: `varchar`, `Email`: `varchar`, `PhoneNumber`: `varchar`, `PostalCode`: `varchar`, `Addr01`: `varchar`, `Addr02`: `varchar`, `Birth`: `datetime`, `Subtotal`: `decimal`, `Discount`: `decimal`, `DeliveryFeeTotal`: `decimal`, `Charge`: `decimal`, `Tax`: `decimal`, `Total`: `decimal`, `PaymentTotal`: `decimal`, `PaymentMethod`: `varchar`, `Note`: `varchar`, `CreateDate`: `datetime`, `UpdateDate`: `datetime`, `OrderDate`: `datetime`, `PaymentDate`: `datetime`, `CurrencyCode`: `varchar`, `CompleteMessage`: `longtext`, `CompleteMailMessage`: `longtext`, `AddPoint`: `decimal`, `UsePoint`: `decimal`, `OrderStatusID`: `smallint`, `DiscriminatorType`: `varchar`}
	_               = bytes.MinRead
)

func testDTBOrdersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dtbOrderPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dtbOrderColumns) == len(dtbOrderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBOrder{}
	if err = randomize.Struct(seed, o, dtbOrderDBTypes, true, dtbOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBOrders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbOrderDBTypes, true, dtbOrderPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBOrder struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDTBOrdersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dtbOrderColumns) == len(dtbOrderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBOrder{}
	if err = randomize.Struct(seed, o, dtbOrderDBTypes, true, dtbOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBOrders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbOrderDBTypes, true, dtbOrderPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBOrder struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dtbOrderColumns, dtbOrderPrimaryKeyColumns) {
		fields = dtbOrderColumns
	} else {
		fields = strmangle.SetComplement(
			dtbOrderColumns,
			dtbOrderPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DTBOrderSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDTBOrdersUpsert(t *testing.T) {
	t.Parallel()

	if len(dtbOrderColumns) == len(dtbOrderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDTBOrderUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DTBOrder{}
	if err = randomize.Struct(seed, &o, dtbOrderDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBOrder: %s", err)
	}

	count, err := DTBOrders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dtbOrderDBTypes, false, dtbOrderPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBOrder struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBOrder: %s", err)
	}

	count, err = DTBOrders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
