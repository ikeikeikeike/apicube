// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDTBMailTemplates(t *testing.T) {
	t.Parallel()

	query := DTBMailTemplates()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDTBMailTemplatesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBMailTemplate{}
	if err = randomize.Struct(seed, o, dtbMailTemplateDBTypes, true, dtbMailTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMailTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBMailTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBMailTemplatesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBMailTemplate{}
	if err = randomize.Struct(seed, o, dtbMailTemplateDBTypes, true, dtbMailTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMailTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DTBMailTemplates().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBMailTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBMailTemplatesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBMailTemplate{}
	if err = randomize.Struct(seed, o, dtbMailTemplateDBTypes, true, dtbMailTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMailTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBMailTemplateSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBMailTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBMailTemplatesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBMailTemplate{}
	if err = randomize.Struct(seed, o, dtbMailTemplateDBTypes, true, dtbMailTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMailTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DTBMailTemplateExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DTBMailTemplate exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DTBMailTemplateExists to return true, but got false.")
	}
}

func testDTBMailTemplatesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBMailTemplate{}
	if err = randomize.Struct(seed, o, dtbMailTemplateDBTypes, true, dtbMailTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMailTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dtbMailTemplateFound, err := FindDTBMailTemplate(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if dtbMailTemplateFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDTBMailTemplatesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBMailTemplate{}
	if err = randomize.Struct(seed, o, dtbMailTemplateDBTypes, true, dtbMailTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMailTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DTBMailTemplates().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDTBMailTemplatesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBMailTemplate{}
	if err = randomize.Struct(seed, o, dtbMailTemplateDBTypes, true, dtbMailTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMailTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DTBMailTemplates().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDTBMailTemplatesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtbMailTemplateOne := &DTBMailTemplate{}
	dtbMailTemplateTwo := &DTBMailTemplate{}
	if err = randomize.Struct(seed, dtbMailTemplateOne, dtbMailTemplateDBTypes, false, dtbMailTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMailTemplate struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbMailTemplateTwo, dtbMailTemplateDBTypes, false, dtbMailTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMailTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbMailTemplateOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbMailTemplateTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBMailTemplates().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDTBMailTemplatesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dtbMailTemplateOne := &DTBMailTemplate{}
	dtbMailTemplateTwo := &DTBMailTemplate{}
	if err = randomize.Struct(seed, dtbMailTemplateOne, dtbMailTemplateDBTypes, false, dtbMailTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMailTemplate struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbMailTemplateTwo, dtbMailTemplateDBTypes, false, dtbMailTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMailTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbMailTemplateOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbMailTemplateTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBMailTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dtbMailTemplateBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBMailTemplate) error {
	*o = DTBMailTemplate{}
	return nil
}

func dtbMailTemplateAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBMailTemplate) error {
	*o = DTBMailTemplate{}
	return nil
}

func dtbMailTemplateAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DTBMailTemplate) error {
	*o = DTBMailTemplate{}
	return nil
}

func dtbMailTemplateBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBMailTemplate) error {
	*o = DTBMailTemplate{}
	return nil
}

func dtbMailTemplateAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBMailTemplate) error {
	*o = DTBMailTemplate{}
	return nil
}

func dtbMailTemplateBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBMailTemplate) error {
	*o = DTBMailTemplate{}
	return nil
}

func dtbMailTemplateAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBMailTemplate) error {
	*o = DTBMailTemplate{}
	return nil
}

func dtbMailTemplateBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBMailTemplate) error {
	*o = DTBMailTemplate{}
	return nil
}

func dtbMailTemplateAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBMailTemplate) error {
	*o = DTBMailTemplate{}
	return nil
}

func testDTBMailTemplatesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DTBMailTemplate{}
	o := &DTBMailTemplate{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dtbMailTemplateDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBMailTemplate object: %s", err)
	}

	AddDTBMailTemplateHook(boil.BeforeInsertHook, dtbMailTemplateBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dtbMailTemplateBeforeInsertHooks = []DTBMailTemplateHook{}

	AddDTBMailTemplateHook(boil.AfterInsertHook, dtbMailTemplateAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dtbMailTemplateAfterInsertHooks = []DTBMailTemplateHook{}

	AddDTBMailTemplateHook(boil.AfterSelectHook, dtbMailTemplateAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dtbMailTemplateAfterSelectHooks = []DTBMailTemplateHook{}

	AddDTBMailTemplateHook(boil.BeforeUpdateHook, dtbMailTemplateBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dtbMailTemplateBeforeUpdateHooks = []DTBMailTemplateHook{}

	AddDTBMailTemplateHook(boil.AfterUpdateHook, dtbMailTemplateAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dtbMailTemplateAfterUpdateHooks = []DTBMailTemplateHook{}

	AddDTBMailTemplateHook(boil.BeforeDeleteHook, dtbMailTemplateBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dtbMailTemplateBeforeDeleteHooks = []DTBMailTemplateHook{}

	AddDTBMailTemplateHook(boil.AfterDeleteHook, dtbMailTemplateAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dtbMailTemplateAfterDeleteHooks = []DTBMailTemplateHook{}

	AddDTBMailTemplateHook(boil.BeforeUpsertHook, dtbMailTemplateBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dtbMailTemplateBeforeUpsertHooks = []DTBMailTemplateHook{}

	AddDTBMailTemplateHook(boil.AfterUpsertHook, dtbMailTemplateAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dtbMailTemplateAfterUpsertHooks = []DTBMailTemplateHook{}
}

func testDTBMailTemplatesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBMailTemplate{}
	if err = randomize.Struct(seed, o, dtbMailTemplateDBTypes, true, dtbMailTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMailTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBMailTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBMailTemplatesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBMailTemplate{}
	if err = randomize.Struct(seed, o, dtbMailTemplateDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DTBMailTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dtbMailTemplateColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DTBMailTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBMailTemplatesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBMailTemplate{}
	if err = randomize.Struct(seed, o, dtbMailTemplateDBTypes, true, dtbMailTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMailTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBMailTemplatesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBMailTemplate{}
	if err = randomize.Struct(seed, o, dtbMailTemplateDBTypes, true, dtbMailTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMailTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBMailTemplateSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBMailTemplatesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBMailTemplate{}
	if err = randomize.Struct(seed, o, dtbMailTemplateDBTypes, true, dtbMailTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMailTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBMailTemplates().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dtbMailTemplateDBTypes = map[string]string{`ID`: `int`, `CreatorID`: `int`, `Name`: `varchar`, `FileName`: `varchar`, `MailSubject`: `varchar`, `CreateDate`: `datetime`, `UpdateDate`: `datetime`, `DiscriminatorType`: `varchar`}
	_                      = bytes.MinRead
)

func testDTBMailTemplatesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dtbMailTemplatePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dtbMailTemplateColumns) == len(dtbMailTemplatePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBMailTemplate{}
	if err = randomize.Struct(seed, o, dtbMailTemplateDBTypes, true, dtbMailTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMailTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBMailTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbMailTemplateDBTypes, true, dtbMailTemplatePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBMailTemplate struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDTBMailTemplatesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dtbMailTemplateColumns) == len(dtbMailTemplatePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBMailTemplate{}
	if err = randomize.Struct(seed, o, dtbMailTemplateDBTypes, true, dtbMailTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMailTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBMailTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbMailTemplateDBTypes, true, dtbMailTemplatePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBMailTemplate struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dtbMailTemplateColumns, dtbMailTemplatePrimaryKeyColumns) {
		fields = dtbMailTemplateColumns
	} else {
		fields = strmangle.SetComplement(
			dtbMailTemplateColumns,
			dtbMailTemplatePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DTBMailTemplateSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDTBMailTemplatesUpsert(t *testing.T) {
	t.Parallel()

	if len(dtbMailTemplateColumns) == len(dtbMailTemplatePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDTBMailTemplateUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DTBMailTemplate{}
	if err = randomize.Struct(seed, &o, dtbMailTemplateDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBMailTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBMailTemplate: %s", err)
	}

	count, err := DTBMailTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dtbMailTemplateDBTypes, false, dtbMailTemplatePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBMailTemplate struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBMailTemplate: %s", err)
	}

	count, err = DTBMailTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
