// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// MTBProductListMax is an object representing the database table.
type MTBProductListMax struct {
	ID                uint16 `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name              string `boil:"name" json:"name" toml:"name" yaml:"name"`
	SortNo            uint16 `boil:"sort_no" json:"sort_no" toml:"sort_no" yaml:"sort_no"`
	DiscriminatorType string `boil:"discriminator_type" json:"discriminator_type" toml:"discriminator_type" yaml:"discriminator_type"`

	R *mtbProductListMaxR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L mtbProductListMaxL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MTBProductListMaxColumns = struct {
	ID                string
	Name              string
	SortNo            string
	DiscriminatorType string
}{
	ID:                "id",
	Name:              "name",
	SortNo:            "sort_no",
	DiscriminatorType: "discriminator_type",
}

// Generated where

var MTBProductListMaxWhere = struct {
	ID                whereHelperuint16
	Name              whereHelperstring
	SortNo            whereHelperuint16
	DiscriminatorType whereHelperstring
}{
	ID:                whereHelperuint16{field: `id`},
	Name:              whereHelperstring{field: `name`},
	SortNo:            whereHelperuint16{field: `sort_no`},
	DiscriminatorType: whereHelperstring{field: `discriminator_type`},
}

// MTBProductListMaxRels is where relationship names are stored.
var MTBProductListMaxRels = struct {
}{}

// mtbProductListMaxR is where relationships are stored.
type mtbProductListMaxR struct {
}

// NewStruct creates a new relationship struct
func (*mtbProductListMaxR) NewStruct() *mtbProductListMaxR {
	return &mtbProductListMaxR{}
}

// mtbProductListMaxL is where Load methods for each relationship are stored.
type mtbProductListMaxL struct{}

var (
	mtbProductListMaxColumns               = []string{"id", "name", "sort_no", "discriminator_type"}
	mtbProductListMaxColumnsWithoutDefault = []string{"id", "name", "sort_no", "discriminator_type"}
	mtbProductListMaxColumnsWithDefault    = []string{}
	mtbProductListMaxPrimaryKeyColumns     = []string{"id"}
)

type (
	// MTBProductListMaxSlice is an alias for a slice of pointers to MTBProductListMax.
	// This should generally be used opposed to []MTBProductListMax.
	MTBProductListMaxSlice []*MTBProductListMax
	// MTBProductListMaxHook is the signature for custom MTBProductListMax hook methods
	MTBProductListMaxHook func(context.Context, boil.ContextExecutor, *MTBProductListMax) error

	mtbProductListMaxQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mtbProductListMaxType                 = reflect.TypeOf(&MTBProductListMax{})
	mtbProductListMaxMapping              = queries.MakeStructMapping(mtbProductListMaxType)
	mtbProductListMaxPrimaryKeyMapping, _ = queries.BindMapping(mtbProductListMaxType, mtbProductListMaxMapping, mtbProductListMaxPrimaryKeyColumns)
	mtbProductListMaxInsertCacheMut       sync.RWMutex
	mtbProductListMaxInsertCache          = make(map[string]insertCache)
	mtbProductListMaxUpdateCacheMut       sync.RWMutex
	mtbProductListMaxUpdateCache          = make(map[string]updateCache)
	mtbProductListMaxUpsertCacheMut       sync.RWMutex
	mtbProductListMaxUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mtbProductListMaxBeforeInsertHooks []MTBProductListMaxHook
var mtbProductListMaxBeforeUpdateHooks []MTBProductListMaxHook
var mtbProductListMaxBeforeDeleteHooks []MTBProductListMaxHook
var mtbProductListMaxBeforeUpsertHooks []MTBProductListMaxHook

var mtbProductListMaxAfterInsertHooks []MTBProductListMaxHook
var mtbProductListMaxAfterSelectHooks []MTBProductListMaxHook
var mtbProductListMaxAfterUpdateHooks []MTBProductListMaxHook
var mtbProductListMaxAfterDeleteHooks []MTBProductListMaxHook
var mtbProductListMaxAfterUpsertHooks []MTBProductListMaxHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MTBProductListMax) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mtbProductListMaxBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MTBProductListMax) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mtbProductListMaxBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MTBProductListMax) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mtbProductListMaxBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MTBProductListMax) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mtbProductListMaxBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MTBProductListMax) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mtbProductListMaxAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MTBProductListMax) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mtbProductListMaxAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MTBProductListMax) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mtbProductListMaxAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MTBProductListMax) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mtbProductListMaxAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MTBProductListMax) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mtbProductListMaxAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMTBProductListMaxHook registers your hook function for all future operations.
func AddMTBProductListMaxHook(hookPoint boil.HookPoint, mtbProductListMaxHook MTBProductListMaxHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		mtbProductListMaxBeforeInsertHooks = append(mtbProductListMaxBeforeInsertHooks, mtbProductListMaxHook)
	case boil.BeforeUpdateHook:
		mtbProductListMaxBeforeUpdateHooks = append(mtbProductListMaxBeforeUpdateHooks, mtbProductListMaxHook)
	case boil.BeforeDeleteHook:
		mtbProductListMaxBeforeDeleteHooks = append(mtbProductListMaxBeforeDeleteHooks, mtbProductListMaxHook)
	case boil.BeforeUpsertHook:
		mtbProductListMaxBeforeUpsertHooks = append(mtbProductListMaxBeforeUpsertHooks, mtbProductListMaxHook)
	case boil.AfterInsertHook:
		mtbProductListMaxAfterInsertHooks = append(mtbProductListMaxAfterInsertHooks, mtbProductListMaxHook)
	case boil.AfterSelectHook:
		mtbProductListMaxAfterSelectHooks = append(mtbProductListMaxAfterSelectHooks, mtbProductListMaxHook)
	case boil.AfterUpdateHook:
		mtbProductListMaxAfterUpdateHooks = append(mtbProductListMaxAfterUpdateHooks, mtbProductListMaxHook)
	case boil.AfterDeleteHook:
		mtbProductListMaxAfterDeleteHooks = append(mtbProductListMaxAfterDeleteHooks, mtbProductListMaxHook)
	case boil.AfterUpsertHook:
		mtbProductListMaxAfterUpsertHooks = append(mtbProductListMaxAfterUpsertHooks, mtbProductListMaxHook)
	}
}

// One returns a single mtbProductListMax record from the query.
func (q mtbProductListMaxQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MTBProductListMax, error) {
	o := &MTBProductListMax{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for mtb_product_list_max")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MTBProductListMax records from the query.
func (q mtbProductListMaxQuery) All(ctx context.Context, exec boil.ContextExecutor) (MTBProductListMaxSlice, error) {
	var o []*MTBProductListMax

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to MTBProductListMax slice")
	}

	if len(mtbProductListMaxAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MTBProductListMax records in the query.
func (q mtbProductListMaxQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count mtb_product_list_max rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mtbProductListMaxQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if mtb_product_list_max exists")
	}

	return count > 0, nil
}

// MTBProductListMaxes retrieves all the records using an executor.
func MTBProductListMaxes(mods ...qm.QueryMod) mtbProductListMaxQuery {
	mods = append(mods, qm.From("`mtb_product_list_max`"))
	return mtbProductListMaxQuery{NewQuery(mods...)}
}

// FindMTBProductListMax retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMTBProductListMax(ctx context.Context, exec boil.ContextExecutor, iD uint16, selectCols ...string) (*MTBProductListMax, error) {
	mtbProductListMaxObj := &MTBProductListMax{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `mtb_product_list_max` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, mtbProductListMaxObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from mtb_product_list_max")
	}

	return mtbProductListMaxObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MTBProductListMax) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no mtb_product_list_max provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mtbProductListMaxColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mtbProductListMaxInsertCacheMut.RLock()
	cache, cached := mtbProductListMaxInsertCache[key]
	mtbProductListMaxInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mtbProductListMaxColumns,
			mtbProductListMaxColumnsWithDefault,
			mtbProductListMaxColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mtbProductListMaxType, mtbProductListMaxMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mtbProductListMaxType, mtbProductListMaxMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `mtb_product_list_max` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `mtb_product_list_max` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `mtb_product_list_max` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, mtbProductListMaxPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into mtb_product_list_max")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for mtb_product_list_max")
	}

CacheNoHooks:
	if !cached {
		mtbProductListMaxInsertCacheMut.Lock()
		mtbProductListMaxInsertCache[key] = cache
		mtbProductListMaxInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MTBProductListMax.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MTBProductListMax) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mtbProductListMaxUpdateCacheMut.RLock()
	cache, cached := mtbProductListMaxUpdateCache[key]
	mtbProductListMaxUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mtbProductListMaxColumns,
			mtbProductListMaxPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update mtb_product_list_max, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `mtb_product_list_max` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, mtbProductListMaxPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mtbProductListMaxType, mtbProductListMaxMapping, append(wl, mtbProductListMaxPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update mtb_product_list_max row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for mtb_product_list_max")
	}

	if !cached {
		mtbProductListMaxUpdateCacheMut.Lock()
		mtbProductListMaxUpdateCache[key] = cache
		mtbProductListMaxUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mtbProductListMaxQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for mtb_product_list_max")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for mtb_product_list_max")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MTBProductListMaxSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mtbProductListMaxPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `mtb_product_list_max` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mtbProductListMaxPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in mtbProductListMax slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all mtbProductListMax")
	}
	return rowsAff, nil
}

var mySQLMTBProductListMaxUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MTBProductListMax) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no mtb_product_list_max provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mtbProductListMaxColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLMTBProductListMaxUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mtbProductListMaxUpsertCacheMut.RLock()
	cache, cached := mtbProductListMaxUpsertCache[key]
	mtbProductListMaxUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mtbProductListMaxColumns,
			mtbProductListMaxColumnsWithDefault,
			mtbProductListMaxColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			mtbProductListMaxColumns,
			mtbProductListMaxPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("model: unable to upsert mtb_product_list_max, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "mtb_product_list_max", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `mtb_product_list_max` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(mtbProductListMaxType, mtbProductListMaxMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mtbProductListMaxType, mtbProductListMaxMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for mtb_product_list_max")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(mtbProductListMaxType, mtbProductListMaxMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for mtb_product_list_max")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for mtb_product_list_max")
	}

CacheNoHooks:
	if !cached {
		mtbProductListMaxUpsertCacheMut.Lock()
		mtbProductListMaxUpsertCache[key] = cache
		mtbProductListMaxUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MTBProductListMax record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MTBProductListMax) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no MTBProductListMax provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mtbProductListMaxPrimaryKeyMapping)
	sql := "DELETE FROM `mtb_product_list_max` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from mtb_product_list_max")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for mtb_product_list_max")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mtbProductListMaxQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no mtbProductListMaxQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from mtb_product_list_max")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for mtb_product_list_max")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MTBProductListMaxSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no MTBProductListMax slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(mtbProductListMaxBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mtbProductListMaxPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `mtb_product_list_max` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mtbProductListMaxPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from mtbProductListMax slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for mtb_product_list_max")
	}

	if len(mtbProductListMaxAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MTBProductListMax) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMTBProductListMax(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MTBProductListMaxSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MTBProductListMaxSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mtbProductListMaxPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `mtb_product_list_max`.* FROM `mtb_product_list_max` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mtbProductListMaxPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in MTBProductListMaxSlice")
	}

	*o = slice

	return nil
}

// MTBProductListMaxExists checks if the MTBProductListMax row exists.
func MTBProductListMaxExists(ctx context.Context, exec boil.ContextExecutor, iD uint16) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `mtb_product_list_max` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if mtb_product_list_max exists")
	}

	return exists, nil
}
