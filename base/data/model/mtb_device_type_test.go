// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMTBDeviceTypes(t *testing.T) {
	t.Parallel()

	query := MTBDeviceTypes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMTBDeviceTypesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBDeviceType{}
	if err = randomize.Struct(seed, o, mtbDeviceTypeDBTypes, true, mtbDeviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBDeviceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MTBDeviceTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMTBDeviceTypesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBDeviceType{}
	if err = randomize.Struct(seed, o, mtbDeviceTypeDBTypes, true, mtbDeviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBDeviceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MTBDeviceTypes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MTBDeviceTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMTBDeviceTypesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBDeviceType{}
	if err = randomize.Struct(seed, o, mtbDeviceTypeDBTypes, true, mtbDeviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBDeviceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MTBDeviceTypeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MTBDeviceTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMTBDeviceTypesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBDeviceType{}
	if err = randomize.Struct(seed, o, mtbDeviceTypeDBTypes, true, mtbDeviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBDeviceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MTBDeviceTypeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if MTBDeviceType exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MTBDeviceTypeExists to return true, but got false.")
	}
}

func testMTBDeviceTypesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBDeviceType{}
	if err = randomize.Struct(seed, o, mtbDeviceTypeDBTypes, true, mtbDeviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBDeviceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	mtbDeviceTypeFound, err := FindMTBDeviceType(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if mtbDeviceTypeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMTBDeviceTypesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBDeviceType{}
	if err = randomize.Struct(seed, o, mtbDeviceTypeDBTypes, true, mtbDeviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBDeviceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MTBDeviceTypes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMTBDeviceTypesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBDeviceType{}
	if err = randomize.Struct(seed, o, mtbDeviceTypeDBTypes, true, mtbDeviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBDeviceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MTBDeviceTypes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMTBDeviceTypesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	mtbDeviceTypeOne := &MTBDeviceType{}
	mtbDeviceTypeTwo := &MTBDeviceType{}
	if err = randomize.Struct(seed, mtbDeviceTypeOne, mtbDeviceTypeDBTypes, false, mtbDeviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBDeviceType struct: %s", err)
	}
	if err = randomize.Struct(seed, mtbDeviceTypeTwo, mtbDeviceTypeDBTypes, false, mtbDeviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBDeviceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mtbDeviceTypeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mtbDeviceTypeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MTBDeviceTypes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMTBDeviceTypesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	mtbDeviceTypeOne := &MTBDeviceType{}
	mtbDeviceTypeTwo := &MTBDeviceType{}
	if err = randomize.Struct(seed, mtbDeviceTypeOne, mtbDeviceTypeDBTypes, false, mtbDeviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBDeviceType struct: %s", err)
	}
	if err = randomize.Struct(seed, mtbDeviceTypeTwo, mtbDeviceTypeDBTypes, false, mtbDeviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBDeviceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mtbDeviceTypeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mtbDeviceTypeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MTBDeviceTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func mtbDeviceTypeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *MTBDeviceType) error {
	*o = MTBDeviceType{}
	return nil
}

func mtbDeviceTypeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *MTBDeviceType) error {
	*o = MTBDeviceType{}
	return nil
}

func mtbDeviceTypeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *MTBDeviceType) error {
	*o = MTBDeviceType{}
	return nil
}

func mtbDeviceTypeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MTBDeviceType) error {
	*o = MTBDeviceType{}
	return nil
}

func mtbDeviceTypeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MTBDeviceType) error {
	*o = MTBDeviceType{}
	return nil
}

func mtbDeviceTypeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MTBDeviceType) error {
	*o = MTBDeviceType{}
	return nil
}

func mtbDeviceTypeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MTBDeviceType) error {
	*o = MTBDeviceType{}
	return nil
}

func mtbDeviceTypeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MTBDeviceType) error {
	*o = MTBDeviceType{}
	return nil
}

func mtbDeviceTypeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MTBDeviceType) error {
	*o = MTBDeviceType{}
	return nil
}

func testMTBDeviceTypesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &MTBDeviceType{}
	o := &MTBDeviceType{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, mtbDeviceTypeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MTBDeviceType object: %s", err)
	}

	AddMTBDeviceTypeHook(boil.BeforeInsertHook, mtbDeviceTypeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	mtbDeviceTypeBeforeInsertHooks = []MTBDeviceTypeHook{}

	AddMTBDeviceTypeHook(boil.AfterInsertHook, mtbDeviceTypeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	mtbDeviceTypeAfterInsertHooks = []MTBDeviceTypeHook{}

	AddMTBDeviceTypeHook(boil.AfterSelectHook, mtbDeviceTypeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	mtbDeviceTypeAfterSelectHooks = []MTBDeviceTypeHook{}

	AddMTBDeviceTypeHook(boil.BeforeUpdateHook, mtbDeviceTypeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	mtbDeviceTypeBeforeUpdateHooks = []MTBDeviceTypeHook{}

	AddMTBDeviceTypeHook(boil.AfterUpdateHook, mtbDeviceTypeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	mtbDeviceTypeAfterUpdateHooks = []MTBDeviceTypeHook{}

	AddMTBDeviceTypeHook(boil.BeforeDeleteHook, mtbDeviceTypeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	mtbDeviceTypeBeforeDeleteHooks = []MTBDeviceTypeHook{}

	AddMTBDeviceTypeHook(boil.AfterDeleteHook, mtbDeviceTypeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	mtbDeviceTypeAfterDeleteHooks = []MTBDeviceTypeHook{}

	AddMTBDeviceTypeHook(boil.BeforeUpsertHook, mtbDeviceTypeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	mtbDeviceTypeBeforeUpsertHooks = []MTBDeviceTypeHook{}

	AddMTBDeviceTypeHook(boil.AfterUpsertHook, mtbDeviceTypeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	mtbDeviceTypeAfterUpsertHooks = []MTBDeviceTypeHook{}
}

func testMTBDeviceTypesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBDeviceType{}
	if err = randomize.Struct(seed, o, mtbDeviceTypeDBTypes, true, mtbDeviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBDeviceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MTBDeviceTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMTBDeviceTypesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBDeviceType{}
	if err = randomize.Struct(seed, o, mtbDeviceTypeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MTBDeviceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(mtbDeviceTypeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MTBDeviceTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMTBDeviceTypeToManyDeviceTypeDTBBlocks(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBDeviceType
	var b, c DTBBlock

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbDeviceTypeDBTypes, true, mtbDeviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBDeviceType struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbBlockDBTypes, false, dtbBlockColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbBlockDBTypes, false, dtbBlockColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.DeviceTypeID, a.ID)
	queries.Assign(&c.DeviceTypeID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DeviceTypeDTBBlocks().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.DeviceTypeID, b.DeviceTypeID) {
			bFound = true
		}
		if queries.Equal(v.DeviceTypeID, c.DeviceTypeID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MTBDeviceTypeSlice{&a}
	if err = a.L.LoadDeviceTypeDTBBlocks(ctx, tx, false, (*[]*MTBDeviceType)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DeviceTypeDTBBlocks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DeviceTypeDTBBlocks = nil
	if err = a.L.LoadDeviceTypeDTBBlocks(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DeviceTypeDTBBlocks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMTBDeviceTypeToManyDeviceTypeDTBLayouts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBDeviceType
	var b, c DTBLayout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbDeviceTypeDBTypes, true, mtbDeviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBDeviceType struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbLayoutDBTypes, false, dtbLayoutColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbLayoutDBTypes, false, dtbLayoutColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.DeviceTypeID, a.ID)
	queries.Assign(&c.DeviceTypeID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DeviceTypeDTBLayouts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.DeviceTypeID, b.DeviceTypeID) {
			bFound = true
		}
		if queries.Equal(v.DeviceTypeID, c.DeviceTypeID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MTBDeviceTypeSlice{&a}
	if err = a.L.LoadDeviceTypeDTBLayouts(ctx, tx, false, (*[]*MTBDeviceType)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DeviceTypeDTBLayouts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DeviceTypeDTBLayouts = nil
	if err = a.L.LoadDeviceTypeDTBLayouts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DeviceTypeDTBLayouts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMTBDeviceTypeToManyDeviceTypeDTBOrders(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBDeviceType
	var b, c DTBOrder

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbDeviceTypeDBTypes, true, mtbDeviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBDeviceType struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbOrderDBTypes, false, dtbOrderColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbOrderDBTypes, false, dtbOrderColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.DeviceTypeID, a.ID)
	queries.Assign(&c.DeviceTypeID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DeviceTypeDTBOrders().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.DeviceTypeID, b.DeviceTypeID) {
			bFound = true
		}
		if queries.Equal(v.DeviceTypeID, c.DeviceTypeID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MTBDeviceTypeSlice{&a}
	if err = a.L.LoadDeviceTypeDTBOrders(ctx, tx, false, (*[]*MTBDeviceType)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DeviceTypeDTBOrders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DeviceTypeDTBOrders = nil
	if err = a.L.LoadDeviceTypeDTBOrders(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DeviceTypeDTBOrders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMTBDeviceTypeToManyDeviceTypeDTBTemplates(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBDeviceType
	var b, c DTBTemplate

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbDeviceTypeDBTypes, true, mtbDeviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBDeviceType struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbTemplateDBTypes, false, dtbTemplateColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbTemplateDBTypes, false, dtbTemplateColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.DeviceTypeID, a.ID)
	queries.Assign(&c.DeviceTypeID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DeviceTypeDTBTemplates().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.DeviceTypeID, b.DeviceTypeID) {
			bFound = true
		}
		if queries.Equal(v.DeviceTypeID, c.DeviceTypeID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MTBDeviceTypeSlice{&a}
	if err = a.L.LoadDeviceTypeDTBTemplates(ctx, tx, false, (*[]*MTBDeviceType)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DeviceTypeDTBTemplates); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DeviceTypeDTBTemplates = nil
	if err = a.L.LoadDeviceTypeDTBTemplates(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DeviceTypeDTBTemplates); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMTBDeviceTypeToManyAddOpDeviceTypeDTBBlocks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBDeviceType
	var b, c, d, e DTBBlock

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbDeviceTypeDBTypes, false, strmangle.SetComplement(mtbDeviceTypePrimaryKeyColumns, mtbDeviceTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBBlock{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbBlockDBTypes, false, strmangle.SetComplement(dtbBlockPrimaryKeyColumns, dtbBlockColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBBlock{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDeviceTypeDTBBlocks(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.DeviceTypeID) {
			t.Error("foreign key was wrong value", a.ID, first.DeviceTypeID)
		}
		if !queries.Equal(a.ID, second.DeviceTypeID) {
			t.Error("foreign key was wrong value", a.ID, second.DeviceTypeID)
		}

		if first.R.DeviceType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.DeviceType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DeviceTypeDTBBlocks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DeviceTypeDTBBlocks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DeviceTypeDTBBlocks().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMTBDeviceTypeToManySetOpDeviceTypeDTBBlocks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBDeviceType
	var b, c, d, e DTBBlock

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbDeviceTypeDBTypes, false, strmangle.SetComplement(mtbDeviceTypePrimaryKeyColumns, mtbDeviceTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBBlock{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbBlockDBTypes, false, strmangle.SetComplement(dtbBlockPrimaryKeyColumns, dtbBlockColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetDeviceTypeDTBBlocks(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.DeviceTypeDTBBlocks().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetDeviceTypeDTBBlocks(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.DeviceTypeDTBBlocks().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.DeviceTypeID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.DeviceTypeID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.DeviceTypeID) {
		t.Error("foreign key was wrong value", a.ID, d.DeviceTypeID)
	}
	if !queries.Equal(a.ID, e.DeviceTypeID) {
		t.Error("foreign key was wrong value", a.ID, e.DeviceTypeID)
	}

	if b.R.DeviceType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.DeviceType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.DeviceType != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.DeviceType != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.DeviceTypeDTBBlocks[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.DeviceTypeDTBBlocks[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMTBDeviceTypeToManyRemoveOpDeviceTypeDTBBlocks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBDeviceType
	var b, c, d, e DTBBlock

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbDeviceTypeDBTypes, false, strmangle.SetComplement(mtbDeviceTypePrimaryKeyColumns, mtbDeviceTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBBlock{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbBlockDBTypes, false, strmangle.SetComplement(dtbBlockPrimaryKeyColumns, dtbBlockColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddDeviceTypeDTBBlocks(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.DeviceTypeDTBBlocks().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveDeviceTypeDTBBlocks(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.DeviceTypeDTBBlocks().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.DeviceTypeID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.DeviceTypeID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.DeviceType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.DeviceType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.DeviceType != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.DeviceType != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.DeviceTypeDTBBlocks) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.DeviceTypeDTBBlocks[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.DeviceTypeDTBBlocks[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMTBDeviceTypeToManyAddOpDeviceTypeDTBLayouts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBDeviceType
	var b, c, d, e DTBLayout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbDeviceTypeDBTypes, false, strmangle.SetComplement(mtbDeviceTypePrimaryKeyColumns, mtbDeviceTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBLayout{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbLayoutDBTypes, false, strmangle.SetComplement(dtbLayoutPrimaryKeyColumns, dtbLayoutColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBLayout{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDeviceTypeDTBLayouts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.DeviceTypeID) {
			t.Error("foreign key was wrong value", a.ID, first.DeviceTypeID)
		}
		if !queries.Equal(a.ID, second.DeviceTypeID) {
			t.Error("foreign key was wrong value", a.ID, second.DeviceTypeID)
		}

		if first.R.DeviceType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.DeviceType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DeviceTypeDTBLayouts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DeviceTypeDTBLayouts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DeviceTypeDTBLayouts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMTBDeviceTypeToManySetOpDeviceTypeDTBLayouts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBDeviceType
	var b, c, d, e DTBLayout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbDeviceTypeDBTypes, false, strmangle.SetComplement(mtbDeviceTypePrimaryKeyColumns, mtbDeviceTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBLayout{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbLayoutDBTypes, false, strmangle.SetComplement(dtbLayoutPrimaryKeyColumns, dtbLayoutColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetDeviceTypeDTBLayouts(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.DeviceTypeDTBLayouts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetDeviceTypeDTBLayouts(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.DeviceTypeDTBLayouts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.DeviceTypeID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.DeviceTypeID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.DeviceTypeID) {
		t.Error("foreign key was wrong value", a.ID, d.DeviceTypeID)
	}
	if !queries.Equal(a.ID, e.DeviceTypeID) {
		t.Error("foreign key was wrong value", a.ID, e.DeviceTypeID)
	}

	if b.R.DeviceType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.DeviceType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.DeviceType != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.DeviceType != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.DeviceTypeDTBLayouts[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.DeviceTypeDTBLayouts[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMTBDeviceTypeToManyRemoveOpDeviceTypeDTBLayouts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBDeviceType
	var b, c, d, e DTBLayout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbDeviceTypeDBTypes, false, strmangle.SetComplement(mtbDeviceTypePrimaryKeyColumns, mtbDeviceTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBLayout{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbLayoutDBTypes, false, strmangle.SetComplement(dtbLayoutPrimaryKeyColumns, dtbLayoutColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddDeviceTypeDTBLayouts(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.DeviceTypeDTBLayouts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveDeviceTypeDTBLayouts(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.DeviceTypeDTBLayouts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.DeviceTypeID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.DeviceTypeID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.DeviceType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.DeviceType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.DeviceType != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.DeviceType != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.DeviceTypeDTBLayouts) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.DeviceTypeDTBLayouts[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.DeviceTypeDTBLayouts[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMTBDeviceTypeToManyAddOpDeviceTypeDTBOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBDeviceType
	var b, c, d, e DTBOrder

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbDeviceTypeDBTypes, false, strmangle.SetComplement(mtbDeviceTypePrimaryKeyColumns, mtbDeviceTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBOrder{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBOrder{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDeviceTypeDTBOrders(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.DeviceTypeID) {
			t.Error("foreign key was wrong value", a.ID, first.DeviceTypeID)
		}
		if !queries.Equal(a.ID, second.DeviceTypeID) {
			t.Error("foreign key was wrong value", a.ID, second.DeviceTypeID)
		}

		if first.R.DeviceType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.DeviceType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DeviceTypeDTBOrders[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DeviceTypeDTBOrders[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DeviceTypeDTBOrders().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMTBDeviceTypeToManySetOpDeviceTypeDTBOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBDeviceType
	var b, c, d, e DTBOrder

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbDeviceTypeDBTypes, false, strmangle.SetComplement(mtbDeviceTypePrimaryKeyColumns, mtbDeviceTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBOrder{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetDeviceTypeDTBOrders(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.DeviceTypeDTBOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetDeviceTypeDTBOrders(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.DeviceTypeDTBOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.DeviceTypeID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.DeviceTypeID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.DeviceTypeID) {
		t.Error("foreign key was wrong value", a.ID, d.DeviceTypeID)
	}
	if !queries.Equal(a.ID, e.DeviceTypeID) {
		t.Error("foreign key was wrong value", a.ID, e.DeviceTypeID)
	}

	if b.R.DeviceType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.DeviceType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.DeviceType != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.DeviceType != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.DeviceTypeDTBOrders[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.DeviceTypeDTBOrders[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMTBDeviceTypeToManyRemoveOpDeviceTypeDTBOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBDeviceType
	var b, c, d, e DTBOrder

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbDeviceTypeDBTypes, false, strmangle.SetComplement(mtbDeviceTypePrimaryKeyColumns, mtbDeviceTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBOrder{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddDeviceTypeDTBOrders(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.DeviceTypeDTBOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveDeviceTypeDTBOrders(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.DeviceTypeDTBOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.DeviceTypeID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.DeviceTypeID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.DeviceType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.DeviceType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.DeviceType != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.DeviceType != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.DeviceTypeDTBOrders) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.DeviceTypeDTBOrders[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.DeviceTypeDTBOrders[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMTBDeviceTypeToManyAddOpDeviceTypeDTBTemplates(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBDeviceType
	var b, c, d, e DTBTemplate

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbDeviceTypeDBTypes, false, strmangle.SetComplement(mtbDeviceTypePrimaryKeyColumns, mtbDeviceTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBTemplate{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbTemplateDBTypes, false, strmangle.SetComplement(dtbTemplatePrimaryKeyColumns, dtbTemplateColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBTemplate{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDeviceTypeDTBTemplates(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.DeviceTypeID) {
			t.Error("foreign key was wrong value", a.ID, first.DeviceTypeID)
		}
		if !queries.Equal(a.ID, second.DeviceTypeID) {
			t.Error("foreign key was wrong value", a.ID, second.DeviceTypeID)
		}

		if first.R.DeviceType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.DeviceType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DeviceTypeDTBTemplates[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DeviceTypeDTBTemplates[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DeviceTypeDTBTemplates().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMTBDeviceTypeToManySetOpDeviceTypeDTBTemplates(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBDeviceType
	var b, c, d, e DTBTemplate

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbDeviceTypeDBTypes, false, strmangle.SetComplement(mtbDeviceTypePrimaryKeyColumns, mtbDeviceTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBTemplate{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbTemplateDBTypes, false, strmangle.SetComplement(dtbTemplatePrimaryKeyColumns, dtbTemplateColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetDeviceTypeDTBTemplates(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.DeviceTypeDTBTemplates().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetDeviceTypeDTBTemplates(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.DeviceTypeDTBTemplates().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.DeviceTypeID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.DeviceTypeID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.DeviceTypeID) {
		t.Error("foreign key was wrong value", a.ID, d.DeviceTypeID)
	}
	if !queries.Equal(a.ID, e.DeviceTypeID) {
		t.Error("foreign key was wrong value", a.ID, e.DeviceTypeID)
	}

	if b.R.DeviceType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.DeviceType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.DeviceType != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.DeviceType != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.DeviceTypeDTBTemplates[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.DeviceTypeDTBTemplates[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMTBDeviceTypeToManyRemoveOpDeviceTypeDTBTemplates(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBDeviceType
	var b, c, d, e DTBTemplate

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbDeviceTypeDBTypes, false, strmangle.SetComplement(mtbDeviceTypePrimaryKeyColumns, mtbDeviceTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBTemplate{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbTemplateDBTypes, false, strmangle.SetComplement(dtbTemplatePrimaryKeyColumns, dtbTemplateColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddDeviceTypeDTBTemplates(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.DeviceTypeDTBTemplates().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveDeviceTypeDTBTemplates(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.DeviceTypeDTBTemplates().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.DeviceTypeID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.DeviceTypeID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.DeviceType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.DeviceType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.DeviceType != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.DeviceType != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.DeviceTypeDTBTemplates) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.DeviceTypeDTBTemplates[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.DeviceTypeDTBTemplates[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMTBDeviceTypesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBDeviceType{}
	if err = randomize.Struct(seed, o, mtbDeviceTypeDBTypes, true, mtbDeviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBDeviceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMTBDeviceTypesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBDeviceType{}
	if err = randomize.Struct(seed, o, mtbDeviceTypeDBTypes, true, mtbDeviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBDeviceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MTBDeviceTypeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMTBDeviceTypesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBDeviceType{}
	if err = randomize.Struct(seed, o, mtbDeviceTypeDBTypes, true, mtbDeviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBDeviceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MTBDeviceTypes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	mtbDeviceTypeDBTypes = map[string]string{`ID`: `smallint`, `Name`: `varchar`, `SortNo`: `smallint`, `DiscriminatorType`: `varchar`}
	_                    = bytes.MinRead
)

func testMTBDeviceTypesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(mtbDeviceTypePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(mtbDeviceTypeColumns) == len(mtbDeviceTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MTBDeviceType{}
	if err = randomize.Struct(seed, o, mtbDeviceTypeDBTypes, true, mtbDeviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBDeviceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MTBDeviceTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mtbDeviceTypeDBTypes, true, mtbDeviceTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MTBDeviceType struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMTBDeviceTypesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(mtbDeviceTypeColumns) == len(mtbDeviceTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MTBDeviceType{}
	if err = randomize.Struct(seed, o, mtbDeviceTypeDBTypes, true, mtbDeviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBDeviceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MTBDeviceTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mtbDeviceTypeDBTypes, true, mtbDeviceTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MTBDeviceType struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(mtbDeviceTypeColumns, mtbDeviceTypePrimaryKeyColumns) {
		fields = mtbDeviceTypeColumns
	} else {
		fields = strmangle.SetComplement(
			mtbDeviceTypeColumns,
			mtbDeviceTypePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MTBDeviceTypeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMTBDeviceTypesUpsert(t *testing.T) {
	t.Parallel()

	if len(mtbDeviceTypeColumns) == len(mtbDeviceTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLMTBDeviceTypeUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MTBDeviceType{}
	if err = randomize.Struct(seed, &o, mtbDeviceTypeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MTBDeviceType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MTBDeviceType: %s", err)
	}

	count, err := MTBDeviceTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, mtbDeviceTypeDBTypes, false, mtbDeviceTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MTBDeviceType struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MTBDeviceType: %s", err)
	}

	count, err = MTBDeviceTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
