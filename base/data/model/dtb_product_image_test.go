// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDTBProductImages(t *testing.T) {
	t.Parallel()

	query := DTBProductImages()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDTBProductImagesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductImage{}
	if err = randomize.Struct(seed, o, dtbProductImageDBTypes, true, dtbProductImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBProductImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBProductImagesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductImage{}
	if err = randomize.Struct(seed, o, dtbProductImageDBTypes, true, dtbProductImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DTBProductImages().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBProductImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBProductImagesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductImage{}
	if err = randomize.Struct(seed, o, dtbProductImageDBTypes, true, dtbProductImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBProductImageSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBProductImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBProductImagesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductImage{}
	if err = randomize.Struct(seed, o, dtbProductImageDBTypes, true, dtbProductImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DTBProductImageExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DTBProductImage exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DTBProductImageExists to return true, but got false.")
	}
}

func testDTBProductImagesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductImage{}
	if err = randomize.Struct(seed, o, dtbProductImageDBTypes, true, dtbProductImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dtbProductImageFound, err := FindDTBProductImage(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if dtbProductImageFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDTBProductImagesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductImage{}
	if err = randomize.Struct(seed, o, dtbProductImageDBTypes, true, dtbProductImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DTBProductImages().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDTBProductImagesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductImage{}
	if err = randomize.Struct(seed, o, dtbProductImageDBTypes, true, dtbProductImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DTBProductImages().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDTBProductImagesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtbProductImageOne := &DTBProductImage{}
	dtbProductImageTwo := &DTBProductImage{}
	if err = randomize.Struct(seed, dtbProductImageOne, dtbProductImageDBTypes, false, dtbProductImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductImage struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbProductImageTwo, dtbProductImageDBTypes, false, dtbProductImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbProductImageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbProductImageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBProductImages().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDTBProductImagesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dtbProductImageOne := &DTBProductImage{}
	dtbProductImageTwo := &DTBProductImage{}
	if err = randomize.Struct(seed, dtbProductImageOne, dtbProductImageDBTypes, false, dtbProductImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductImage struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbProductImageTwo, dtbProductImageDBTypes, false, dtbProductImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbProductImageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbProductImageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBProductImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dtbProductImageBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBProductImage) error {
	*o = DTBProductImage{}
	return nil
}

func dtbProductImageAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBProductImage) error {
	*o = DTBProductImage{}
	return nil
}

func dtbProductImageAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DTBProductImage) error {
	*o = DTBProductImage{}
	return nil
}

func dtbProductImageBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBProductImage) error {
	*o = DTBProductImage{}
	return nil
}

func dtbProductImageAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBProductImage) error {
	*o = DTBProductImage{}
	return nil
}

func dtbProductImageBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBProductImage) error {
	*o = DTBProductImage{}
	return nil
}

func dtbProductImageAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBProductImage) error {
	*o = DTBProductImage{}
	return nil
}

func dtbProductImageBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBProductImage) error {
	*o = DTBProductImage{}
	return nil
}

func dtbProductImageAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBProductImage) error {
	*o = DTBProductImage{}
	return nil
}

func testDTBProductImagesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DTBProductImage{}
	o := &DTBProductImage{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dtbProductImageDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBProductImage object: %s", err)
	}

	AddDTBProductImageHook(boil.BeforeInsertHook, dtbProductImageBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dtbProductImageBeforeInsertHooks = []DTBProductImageHook{}

	AddDTBProductImageHook(boil.AfterInsertHook, dtbProductImageAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dtbProductImageAfterInsertHooks = []DTBProductImageHook{}

	AddDTBProductImageHook(boil.AfterSelectHook, dtbProductImageAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dtbProductImageAfterSelectHooks = []DTBProductImageHook{}

	AddDTBProductImageHook(boil.BeforeUpdateHook, dtbProductImageBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dtbProductImageBeforeUpdateHooks = []DTBProductImageHook{}

	AddDTBProductImageHook(boil.AfterUpdateHook, dtbProductImageAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dtbProductImageAfterUpdateHooks = []DTBProductImageHook{}

	AddDTBProductImageHook(boil.BeforeDeleteHook, dtbProductImageBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dtbProductImageBeforeDeleteHooks = []DTBProductImageHook{}

	AddDTBProductImageHook(boil.AfterDeleteHook, dtbProductImageAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dtbProductImageAfterDeleteHooks = []DTBProductImageHook{}

	AddDTBProductImageHook(boil.BeforeUpsertHook, dtbProductImageBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dtbProductImageBeforeUpsertHooks = []DTBProductImageHook{}

	AddDTBProductImageHook(boil.AfterUpsertHook, dtbProductImageAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dtbProductImageAfterUpsertHooks = []DTBProductImageHook{}
}

func testDTBProductImagesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductImage{}
	if err = randomize.Struct(seed, o, dtbProductImageDBTypes, true, dtbProductImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBProductImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBProductImagesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductImage{}
	if err = randomize.Struct(seed, o, dtbProductImageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DTBProductImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dtbProductImageColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DTBProductImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBProductImageToOneDTBProductUsingProduct(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBProductImage
	var foreign DTBProduct

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbProductImageDBTypes, true, dtbProductImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductImage struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dtbProductDBTypes, false, dtbProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProduct struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ProductID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Product().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBProductImageSlice{&local}
	if err = local.L.LoadProduct(ctx, tx, false, (*[]*DTBProductImage)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Product == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Product = nil
	if err = local.L.LoadProduct(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Product == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBProductImageToOneSetOpDTBProductUsingProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBProductImage
	var b, c DTBProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbProductImageDBTypes, false, strmangle.SetComplement(dtbProductImagePrimaryKeyColumns, dtbProductImageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbProductDBTypes, false, strmangle.SetComplement(dtbProductPrimaryKeyColumns, dtbProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbProductDBTypes, false, strmangle.SetComplement(dtbProductPrimaryKeyColumns, dtbProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DTBProduct{&b, &c} {
		err = a.SetProduct(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Product != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProductDTBProductImages[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ProductID, x.ID) {
			t.Error("foreign key was wrong value", a.ProductID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProductID))
		reflect.Indirect(reflect.ValueOf(&a.ProductID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ProductID, x.ID) {
			t.Error("foreign key was wrong value", a.ProductID, x.ID)
		}
	}
}

func testDTBProductImageToOneRemoveOpDTBProductUsingProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBProductImage
	var b DTBProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbProductImageDBTypes, false, strmangle.SetComplement(dtbProductImagePrimaryKeyColumns, dtbProductImageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbProductDBTypes, false, strmangle.SetComplement(dtbProductPrimaryKeyColumns, dtbProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetProduct(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveProduct(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Product().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Product != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ProductID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ProductDTBProductImages) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBProductImagesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductImage{}
	if err = randomize.Struct(seed, o, dtbProductImageDBTypes, true, dtbProductImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBProductImagesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductImage{}
	if err = randomize.Struct(seed, o, dtbProductImageDBTypes, true, dtbProductImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBProductImageSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBProductImagesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductImage{}
	if err = randomize.Struct(seed, o, dtbProductImageDBTypes, true, dtbProductImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBProductImages().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dtbProductImageDBTypes = map[string]string{`ID`: `int`, `ProductID`: `int`, `CreatorID`: `int`, `FileName`: `varchar`, `SortNo`: `smallint`, `CreateDate`: `datetime`, `DiscriminatorType`: `varchar`}
	_                      = bytes.MinRead
)

func testDTBProductImagesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dtbProductImagePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dtbProductImageColumns) == len(dtbProductImagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductImage{}
	if err = randomize.Struct(seed, o, dtbProductImageDBTypes, true, dtbProductImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBProductImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbProductImageDBTypes, true, dtbProductImagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBProductImage struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDTBProductImagesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dtbProductImageColumns) == len(dtbProductImagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductImage{}
	if err = randomize.Struct(seed, o, dtbProductImageDBTypes, true, dtbProductImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBProductImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbProductImageDBTypes, true, dtbProductImagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBProductImage struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dtbProductImageColumns, dtbProductImagePrimaryKeyColumns) {
		fields = dtbProductImageColumns
	} else {
		fields = strmangle.SetComplement(
			dtbProductImageColumns,
			dtbProductImagePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DTBProductImageSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDTBProductImagesUpsert(t *testing.T) {
	t.Parallel()

	if len(dtbProductImageColumns) == len(dtbProductImagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDTBProductImageUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DTBProductImage{}
	if err = randomize.Struct(seed, &o, dtbProductImageDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBProductImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBProductImage: %s", err)
	}

	count, err := DTBProductImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dtbProductImageDBTypes, false, dtbProductImagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBProductImage struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBProductImage: %s", err)
	}

	count, err = DTBProductImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
