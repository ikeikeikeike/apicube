// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMTBCountries(t *testing.T) {
	t.Parallel()

	query := MTBCountries()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMTBCountriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBCountry{}
	if err = randomize.Struct(seed, o, mtbCountryDBTypes, true, mtbCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCountry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MTBCountries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMTBCountriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBCountry{}
	if err = randomize.Struct(seed, o, mtbCountryDBTypes, true, mtbCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCountry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MTBCountries().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MTBCountries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMTBCountriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBCountry{}
	if err = randomize.Struct(seed, o, mtbCountryDBTypes, true, mtbCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCountry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MTBCountrySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MTBCountries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMTBCountriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBCountry{}
	if err = randomize.Struct(seed, o, mtbCountryDBTypes, true, mtbCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCountry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MTBCountryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if MTBCountry exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MTBCountryExists to return true, but got false.")
	}
}

func testMTBCountriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBCountry{}
	if err = randomize.Struct(seed, o, mtbCountryDBTypes, true, mtbCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCountry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	mtbCountryFound, err := FindMTBCountry(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if mtbCountryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMTBCountriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBCountry{}
	if err = randomize.Struct(seed, o, mtbCountryDBTypes, true, mtbCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCountry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MTBCountries().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMTBCountriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBCountry{}
	if err = randomize.Struct(seed, o, mtbCountryDBTypes, true, mtbCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCountry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MTBCountries().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMTBCountriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	mtbCountryOne := &MTBCountry{}
	mtbCountryTwo := &MTBCountry{}
	if err = randomize.Struct(seed, mtbCountryOne, mtbCountryDBTypes, false, mtbCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCountry struct: %s", err)
	}
	if err = randomize.Struct(seed, mtbCountryTwo, mtbCountryDBTypes, false, mtbCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCountry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mtbCountryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mtbCountryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MTBCountries().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMTBCountriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	mtbCountryOne := &MTBCountry{}
	mtbCountryTwo := &MTBCountry{}
	if err = randomize.Struct(seed, mtbCountryOne, mtbCountryDBTypes, false, mtbCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCountry struct: %s", err)
	}
	if err = randomize.Struct(seed, mtbCountryTwo, mtbCountryDBTypes, false, mtbCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCountry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mtbCountryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mtbCountryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MTBCountries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func mtbCountryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *MTBCountry) error {
	*o = MTBCountry{}
	return nil
}

func mtbCountryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *MTBCountry) error {
	*o = MTBCountry{}
	return nil
}

func mtbCountryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *MTBCountry) error {
	*o = MTBCountry{}
	return nil
}

func mtbCountryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MTBCountry) error {
	*o = MTBCountry{}
	return nil
}

func mtbCountryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MTBCountry) error {
	*o = MTBCountry{}
	return nil
}

func mtbCountryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MTBCountry) error {
	*o = MTBCountry{}
	return nil
}

func mtbCountryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MTBCountry) error {
	*o = MTBCountry{}
	return nil
}

func mtbCountryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MTBCountry) error {
	*o = MTBCountry{}
	return nil
}

func mtbCountryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MTBCountry) error {
	*o = MTBCountry{}
	return nil
}

func testMTBCountriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &MTBCountry{}
	o := &MTBCountry{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, mtbCountryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MTBCountry object: %s", err)
	}

	AddMTBCountryHook(boil.BeforeInsertHook, mtbCountryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	mtbCountryBeforeInsertHooks = []MTBCountryHook{}

	AddMTBCountryHook(boil.AfterInsertHook, mtbCountryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	mtbCountryAfterInsertHooks = []MTBCountryHook{}

	AddMTBCountryHook(boil.AfterSelectHook, mtbCountryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	mtbCountryAfterSelectHooks = []MTBCountryHook{}

	AddMTBCountryHook(boil.BeforeUpdateHook, mtbCountryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	mtbCountryBeforeUpdateHooks = []MTBCountryHook{}

	AddMTBCountryHook(boil.AfterUpdateHook, mtbCountryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	mtbCountryAfterUpdateHooks = []MTBCountryHook{}

	AddMTBCountryHook(boil.BeforeDeleteHook, mtbCountryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	mtbCountryBeforeDeleteHooks = []MTBCountryHook{}

	AddMTBCountryHook(boil.AfterDeleteHook, mtbCountryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	mtbCountryAfterDeleteHooks = []MTBCountryHook{}

	AddMTBCountryHook(boil.BeforeUpsertHook, mtbCountryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	mtbCountryBeforeUpsertHooks = []MTBCountryHook{}

	AddMTBCountryHook(boil.AfterUpsertHook, mtbCountryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	mtbCountryAfterUpsertHooks = []MTBCountryHook{}
}

func testMTBCountriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBCountry{}
	if err = randomize.Struct(seed, o, mtbCountryDBTypes, true, mtbCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCountry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MTBCountries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMTBCountriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBCountry{}
	if err = randomize.Struct(seed, o, mtbCountryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MTBCountry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(mtbCountryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MTBCountries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMTBCountryToManyCountryDTBBaseInfos(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBCountry
	var b, c DTBBaseInfo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbCountryDBTypes, true, mtbCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCountry struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbBaseInfoDBTypes, false, dtbBaseInfoColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbBaseInfoDBTypes, false, dtbBaseInfoColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CountryID, a.ID)
	queries.Assign(&c.CountryID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CountryDTBBaseInfos().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CountryID, b.CountryID) {
			bFound = true
		}
		if queries.Equal(v.CountryID, c.CountryID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MTBCountrySlice{&a}
	if err = a.L.LoadCountryDTBBaseInfos(ctx, tx, false, (*[]*MTBCountry)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CountryDTBBaseInfos); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CountryDTBBaseInfos = nil
	if err = a.L.LoadCountryDTBBaseInfos(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CountryDTBBaseInfos); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMTBCountryToManyCountryDTBCustomers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBCountry
	var b, c DTBCustomer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbCountryDBTypes, true, mtbCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCountry struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbCustomerDBTypes, false, dtbCustomerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbCustomerDBTypes, false, dtbCustomerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CountryID, a.ID)
	queries.Assign(&c.CountryID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CountryDTBCustomers().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CountryID, b.CountryID) {
			bFound = true
		}
		if queries.Equal(v.CountryID, c.CountryID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MTBCountrySlice{&a}
	if err = a.L.LoadCountryDTBCustomers(ctx, tx, false, (*[]*MTBCountry)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CountryDTBCustomers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CountryDTBCustomers = nil
	if err = a.L.LoadCountryDTBCustomers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CountryDTBCustomers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMTBCountryToManyCountryDTBCustomerAddresses(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBCountry
	var b, c DTBCustomerAddress

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbCountryDBTypes, true, mtbCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCountry struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbCustomerAddressDBTypes, false, dtbCustomerAddressColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbCustomerAddressDBTypes, false, dtbCustomerAddressColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CountryID, a.ID)
	queries.Assign(&c.CountryID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CountryDTBCustomerAddresses().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CountryID, b.CountryID) {
			bFound = true
		}
		if queries.Equal(v.CountryID, c.CountryID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MTBCountrySlice{&a}
	if err = a.L.LoadCountryDTBCustomerAddresses(ctx, tx, false, (*[]*MTBCountry)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CountryDTBCustomerAddresses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CountryDTBCustomerAddresses = nil
	if err = a.L.LoadCountryDTBCustomerAddresses(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CountryDTBCustomerAddresses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMTBCountryToManyCountryDTBOrders(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBCountry
	var b, c DTBOrder

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbCountryDBTypes, true, mtbCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCountry struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbOrderDBTypes, false, dtbOrderColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbOrderDBTypes, false, dtbOrderColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CountryID, a.ID)
	queries.Assign(&c.CountryID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CountryDTBOrders().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CountryID, b.CountryID) {
			bFound = true
		}
		if queries.Equal(v.CountryID, c.CountryID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MTBCountrySlice{&a}
	if err = a.L.LoadCountryDTBOrders(ctx, tx, false, (*[]*MTBCountry)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CountryDTBOrders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CountryDTBOrders = nil
	if err = a.L.LoadCountryDTBOrders(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CountryDTBOrders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMTBCountryToManyCountryDTBShippings(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBCountry
	var b, c DTBShipping

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbCountryDBTypes, true, mtbCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCountry struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbShippingDBTypes, false, dtbShippingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbShippingDBTypes, false, dtbShippingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CountryID, a.ID)
	queries.Assign(&c.CountryID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CountryDTBShippings().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CountryID, b.CountryID) {
			bFound = true
		}
		if queries.Equal(v.CountryID, c.CountryID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MTBCountrySlice{&a}
	if err = a.L.LoadCountryDTBShippings(ctx, tx, false, (*[]*MTBCountry)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CountryDTBShippings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CountryDTBShippings = nil
	if err = a.L.LoadCountryDTBShippings(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CountryDTBShippings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMTBCountryToManyCountryDTBTaxRules(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBCountry
	var b, c DTBTaxRule

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbCountryDBTypes, true, mtbCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCountry struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbTaxRuleDBTypes, false, dtbTaxRuleColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbTaxRuleDBTypes, false, dtbTaxRuleColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CountryID, a.ID)
	queries.Assign(&c.CountryID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CountryDTBTaxRules().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CountryID, b.CountryID) {
			bFound = true
		}
		if queries.Equal(v.CountryID, c.CountryID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MTBCountrySlice{&a}
	if err = a.L.LoadCountryDTBTaxRules(ctx, tx, false, (*[]*MTBCountry)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CountryDTBTaxRules); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CountryDTBTaxRules = nil
	if err = a.L.LoadCountryDTBTaxRules(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CountryDTBTaxRules); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMTBCountryToManyAddOpCountryDTBBaseInfos(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBCountry
	var b, c, d, e DTBBaseInfo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbCountryDBTypes, false, strmangle.SetComplement(mtbCountryPrimaryKeyColumns, mtbCountryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBBaseInfo{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbBaseInfoDBTypes, false, strmangle.SetComplement(dtbBaseInfoPrimaryKeyColumns, dtbBaseInfoColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBBaseInfo{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCountryDTBBaseInfos(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CountryID) {
			t.Error("foreign key was wrong value", a.ID, first.CountryID)
		}
		if !queries.Equal(a.ID, second.CountryID) {
			t.Error("foreign key was wrong value", a.ID, second.CountryID)
		}

		if first.R.Country != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Country != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CountryDTBBaseInfos[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CountryDTBBaseInfos[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CountryDTBBaseInfos().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMTBCountryToManySetOpCountryDTBBaseInfos(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBCountry
	var b, c, d, e DTBBaseInfo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbCountryDBTypes, false, strmangle.SetComplement(mtbCountryPrimaryKeyColumns, mtbCountryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBBaseInfo{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbBaseInfoDBTypes, false, strmangle.SetComplement(dtbBaseInfoPrimaryKeyColumns, dtbBaseInfoColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCountryDTBBaseInfos(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CountryDTBBaseInfos().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCountryDTBBaseInfos(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CountryDTBBaseInfos().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CountryID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CountryID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CountryID) {
		t.Error("foreign key was wrong value", a.ID, d.CountryID)
	}
	if !queries.Equal(a.ID, e.CountryID) {
		t.Error("foreign key was wrong value", a.ID, e.CountryID)
	}

	if b.R.Country != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Country != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Country != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Country != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CountryDTBBaseInfos[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CountryDTBBaseInfos[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMTBCountryToManyRemoveOpCountryDTBBaseInfos(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBCountry
	var b, c, d, e DTBBaseInfo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbCountryDBTypes, false, strmangle.SetComplement(mtbCountryPrimaryKeyColumns, mtbCountryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBBaseInfo{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbBaseInfoDBTypes, false, strmangle.SetComplement(dtbBaseInfoPrimaryKeyColumns, dtbBaseInfoColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCountryDTBBaseInfos(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CountryDTBBaseInfos().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCountryDTBBaseInfos(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CountryDTBBaseInfos().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CountryID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CountryID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Country != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Country != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Country != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Country != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CountryDTBBaseInfos) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CountryDTBBaseInfos[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CountryDTBBaseInfos[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMTBCountryToManyAddOpCountryDTBCustomers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBCountry
	var b, c, d, e DTBCustomer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbCountryDBTypes, false, strmangle.SetComplement(mtbCountryPrimaryKeyColumns, mtbCountryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBCustomer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbCustomerDBTypes, false, strmangle.SetComplement(dtbCustomerPrimaryKeyColumns, dtbCustomerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBCustomer{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCountryDTBCustomers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CountryID) {
			t.Error("foreign key was wrong value", a.ID, first.CountryID)
		}
		if !queries.Equal(a.ID, second.CountryID) {
			t.Error("foreign key was wrong value", a.ID, second.CountryID)
		}

		if first.R.Country != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Country != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CountryDTBCustomers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CountryDTBCustomers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CountryDTBCustomers().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMTBCountryToManySetOpCountryDTBCustomers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBCountry
	var b, c, d, e DTBCustomer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbCountryDBTypes, false, strmangle.SetComplement(mtbCountryPrimaryKeyColumns, mtbCountryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBCustomer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbCustomerDBTypes, false, strmangle.SetComplement(dtbCustomerPrimaryKeyColumns, dtbCustomerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCountryDTBCustomers(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CountryDTBCustomers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCountryDTBCustomers(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CountryDTBCustomers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CountryID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CountryID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CountryID) {
		t.Error("foreign key was wrong value", a.ID, d.CountryID)
	}
	if !queries.Equal(a.ID, e.CountryID) {
		t.Error("foreign key was wrong value", a.ID, e.CountryID)
	}

	if b.R.Country != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Country != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Country != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Country != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CountryDTBCustomers[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CountryDTBCustomers[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMTBCountryToManyRemoveOpCountryDTBCustomers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBCountry
	var b, c, d, e DTBCustomer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbCountryDBTypes, false, strmangle.SetComplement(mtbCountryPrimaryKeyColumns, mtbCountryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBCustomer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbCustomerDBTypes, false, strmangle.SetComplement(dtbCustomerPrimaryKeyColumns, dtbCustomerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCountryDTBCustomers(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CountryDTBCustomers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCountryDTBCustomers(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CountryDTBCustomers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CountryID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CountryID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Country != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Country != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Country != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Country != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CountryDTBCustomers) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CountryDTBCustomers[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CountryDTBCustomers[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMTBCountryToManyAddOpCountryDTBCustomerAddresses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBCountry
	var b, c, d, e DTBCustomerAddress

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbCountryDBTypes, false, strmangle.SetComplement(mtbCountryPrimaryKeyColumns, mtbCountryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBCustomerAddress{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbCustomerAddressDBTypes, false, strmangle.SetComplement(dtbCustomerAddressPrimaryKeyColumns, dtbCustomerAddressColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBCustomerAddress{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCountryDTBCustomerAddresses(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CountryID) {
			t.Error("foreign key was wrong value", a.ID, first.CountryID)
		}
		if !queries.Equal(a.ID, second.CountryID) {
			t.Error("foreign key was wrong value", a.ID, second.CountryID)
		}

		if first.R.Country != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Country != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CountryDTBCustomerAddresses[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CountryDTBCustomerAddresses[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CountryDTBCustomerAddresses().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMTBCountryToManySetOpCountryDTBCustomerAddresses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBCountry
	var b, c, d, e DTBCustomerAddress

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbCountryDBTypes, false, strmangle.SetComplement(mtbCountryPrimaryKeyColumns, mtbCountryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBCustomerAddress{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbCustomerAddressDBTypes, false, strmangle.SetComplement(dtbCustomerAddressPrimaryKeyColumns, dtbCustomerAddressColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCountryDTBCustomerAddresses(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CountryDTBCustomerAddresses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCountryDTBCustomerAddresses(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CountryDTBCustomerAddresses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CountryID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CountryID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CountryID) {
		t.Error("foreign key was wrong value", a.ID, d.CountryID)
	}
	if !queries.Equal(a.ID, e.CountryID) {
		t.Error("foreign key was wrong value", a.ID, e.CountryID)
	}

	if b.R.Country != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Country != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Country != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Country != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CountryDTBCustomerAddresses[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CountryDTBCustomerAddresses[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMTBCountryToManyRemoveOpCountryDTBCustomerAddresses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBCountry
	var b, c, d, e DTBCustomerAddress

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbCountryDBTypes, false, strmangle.SetComplement(mtbCountryPrimaryKeyColumns, mtbCountryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBCustomerAddress{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbCustomerAddressDBTypes, false, strmangle.SetComplement(dtbCustomerAddressPrimaryKeyColumns, dtbCustomerAddressColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCountryDTBCustomerAddresses(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CountryDTBCustomerAddresses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCountryDTBCustomerAddresses(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CountryDTBCustomerAddresses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CountryID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CountryID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Country != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Country != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Country != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Country != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CountryDTBCustomerAddresses) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CountryDTBCustomerAddresses[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CountryDTBCustomerAddresses[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMTBCountryToManyAddOpCountryDTBOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBCountry
	var b, c, d, e DTBOrder

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbCountryDBTypes, false, strmangle.SetComplement(mtbCountryPrimaryKeyColumns, mtbCountryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBOrder{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBOrder{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCountryDTBOrders(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CountryID) {
			t.Error("foreign key was wrong value", a.ID, first.CountryID)
		}
		if !queries.Equal(a.ID, second.CountryID) {
			t.Error("foreign key was wrong value", a.ID, second.CountryID)
		}

		if first.R.Country != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Country != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CountryDTBOrders[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CountryDTBOrders[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CountryDTBOrders().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMTBCountryToManySetOpCountryDTBOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBCountry
	var b, c, d, e DTBOrder

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbCountryDBTypes, false, strmangle.SetComplement(mtbCountryPrimaryKeyColumns, mtbCountryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBOrder{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCountryDTBOrders(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CountryDTBOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCountryDTBOrders(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CountryDTBOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CountryID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CountryID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CountryID) {
		t.Error("foreign key was wrong value", a.ID, d.CountryID)
	}
	if !queries.Equal(a.ID, e.CountryID) {
		t.Error("foreign key was wrong value", a.ID, e.CountryID)
	}

	if b.R.Country != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Country != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Country != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Country != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CountryDTBOrders[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CountryDTBOrders[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMTBCountryToManyRemoveOpCountryDTBOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBCountry
	var b, c, d, e DTBOrder

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbCountryDBTypes, false, strmangle.SetComplement(mtbCountryPrimaryKeyColumns, mtbCountryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBOrder{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCountryDTBOrders(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CountryDTBOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCountryDTBOrders(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CountryDTBOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CountryID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CountryID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Country != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Country != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Country != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Country != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CountryDTBOrders) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CountryDTBOrders[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CountryDTBOrders[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMTBCountryToManyAddOpCountryDTBShippings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBCountry
	var b, c, d, e DTBShipping

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbCountryDBTypes, false, strmangle.SetComplement(mtbCountryPrimaryKeyColumns, mtbCountryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBShipping{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbShippingDBTypes, false, strmangle.SetComplement(dtbShippingPrimaryKeyColumns, dtbShippingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBShipping{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCountryDTBShippings(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CountryID) {
			t.Error("foreign key was wrong value", a.ID, first.CountryID)
		}
		if !queries.Equal(a.ID, second.CountryID) {
			t.Error("foreign key was wrong value", a.ID, second.CountryID)
		}

		if first.R.Country != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Country != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CountryDTBShippings[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CountryDTBShippings[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CountryDTBShippings().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMTBCountryToManySetOpCountryDTBShippings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBCountry
	var b, c, d, e DTBShipping

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbCountryDBTypes, false, strmangle.SetComplement(mtbCountryPrimaryKeyColumns, mtbCountryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBShipping{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbShippingDBTypes, false, strmangle.SetComplement(dtbShippingPrimaryKeyColumns, dtbShippingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCountryDTBShippings(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CountryDTBShippings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCountryDTBShippings(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CountryDTBShippings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CountryID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CountryID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CountryID) {
		t.Error("foreign key was wrong value", a.ID, d.CountryID)
	}
	if !queries.Equal(a.ID, e.CountryID) {
		t.Error("foreign key was wrong value", a.ID, e.CountryID)
	}

	if b.R.Country != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Country != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Country != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Country != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CountryDTBShippings[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CountryDTBShippings[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMTBCountryToManyRemoveOpCountryDTBShippings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBCountry
	var b, c, d, e DTBShipping

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbCountryDBTypes, false, strmangle.SetComplement(mtbCountryPrimaryKeyColumns, mtbCountryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBShipping{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbShippingDBTypes, false, strmangle.SetComplement(dtbShippingPrimaryKeyColumns, dtbShippingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCountryDTBShippings(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CountryDTBShippings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCountryDTBShippings(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CountryDTBShippings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CountryID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CountryID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Country != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Country != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Country != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Country != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CountryDTBShippings) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CountryDTBShippings[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CountryDTBShippings[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMTBCountryToManyAddOpCountryDTBTaxRules(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBCountry
	var b, c, d, e DTBTaxRule

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbCountryDBTypes, false, strmangle.SetComplement(mtbCountryPrimaryKeyColumns, mtbCountryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBTaxRule{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbTaxRuleDBTypes, false, strmangle.SetComplement(dtbTaxRulePrimaryKeyColumns, dtbTaxRuleColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBTaxRule{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCountryDTBTaxRules(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CountryID) {
			t.Error("foreign key was wrong value", a.ID, first.CountryID)
		}
		if !queries.Equal(a.ID, second.CountryID) {
			t.Error("foreign key was wrong value", a.ID, second.CountryID)
		}

		if first.R.Country != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Country != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CountryDTBTaxRules[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CountryDTBTaxRules[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CountryDTBTaxRules().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMTBCountryToManySetOpCountryDTBTaxRules(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBCountry
	var b, c, d, e DTBTaxRule

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbCountryDBTypes, false, strmangle.SetComplement(mtbCountryPrimaryKeyColumns, mtbCountryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBTaxRule{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbTaxRuleDBTypes, false, strmangle.SetComplement(dtbTaxRulePrimaryKeyColumns, dtbTaxRuleColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCountryDTBTaxRules(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CountryDTBTaxRules().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCountryDTBTaxRules(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CountryDTBTaxRules().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CountryID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CountryID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CountryID) {
		t.Error("foreign key was wrong value", a.ID, d.CountryID)
	}
	if !queries.Equal(a.ID, e.CountryID) {
		t.Error("foreign key was wrong value", a.ID, e.CountryID)
	}

	if b.R.Country != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Country != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Country != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Country != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CountryDTBTaxRules[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CountryDTBTaxRules[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMTBCountryToManyRemoveOpCountryDTBTaxRules(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBCountry
	var b, c, d, e DTBTaxRule

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbCountryDBTypes, false, strmangle.SetComplement(mtbCountryPrimaryKeyColumns, mtbCountryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBTaxRule{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbTaxRuleDBTypes, false, strmangle.SetComplement(dtbTaxRulePrimaryKeyColumns, dtbTaxRuleColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCountryDTBTaxRules(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CountryDTBTaxRules().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCountryDTBTaxRules(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CountryDTBTaxRules().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CountryID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CountryID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Country != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Country != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Country != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Country != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CountryDTBTaxRules) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CountryDTBTaxRules[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CountryDTBTaxRules[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMTBCountriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBCountry{}
	if err = randomize.Struct(seed, o, mtbCountryDBTypes, true, mtbCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCountry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMTBCountriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBCountry{}
	if err = randomize.Struct(seed, o, mtbCountryDBTypes, true, mtbCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCountry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MTBCountrySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMTBCountriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBCountry{}
	if err = randomize.Struct(seed, o, mtbCountryDBTypes, true, mtbCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCountry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MTBCountries().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	mtbCountryDBTypes = map[string]string{`ID`: `smallint`, `Name`: `varchar`, `SortNo`: `smallint`, `DiscriminatorType`: `varchar`}
	_                 = bytes.MinRead
)

func testMTBCountriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(mtbCountryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(mtbCountryColumns) == len(mtbCountryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MTBCountry{}
	if err = randomize.Struct(seed, o, mtbCountryDBTypes, true, mtbCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCountry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MTBCountries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mtbCountryDBTypes, true, mtbCountryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MTBCountry struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMTBCountriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(mtbCountryColumns) == len(mtbCountryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MTBCountry{}
	if err = randomize.Struct(seed, o, mtbCountryDBTypes, true, mtbCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCountry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MTBCountries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mtbCountryDBTypes, true, mtbCountryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MTBCountry struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(mtbCountryColumns, mtbCountryPrimaryKeyColumns) {
		fields = mtbCountryColumns
	} else {
		fields = strmangle.SetComplement(
			mtbCountryColumns,
			mtbCountryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MTBCountrySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMTBCountriesUpsert(t *testing.T) {
	t.Parallel()

	if len(mtbCountryColumns) == len(mtbCountryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLMTBCountryUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MTBCountry{}
	if err = randomize.Struct(seed, &o, mtbCountryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MTBCountry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MTBCountry: %s", err)
	}

	count, err := MTBCountries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, mtbCountryDBTypes, false, mtbCountryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MTBCountry struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MTBCountry: %s", err)
	}

	count, err = MTBCountries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
