// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// DTBPage is an object representing the database table.
type DTBPage struct {
	ID                uint        `boil:"id" json:"id" toml:"id" yaml:"id"`
	MasterPageID      null.Uint   `boil:"master_page_id" json:"master_page_id,omitempty" toml:"master_page_id" yaml:"master_page_id,omitempty"`
	PageName          null.String `boil:"page_name" json:"page_name,omitempty" toml:"page_name" yaml:"page_name,omitempty"`
	URL               string      `boil:"url" json:"url" toml:"url" yaml:"url"`
	FileName          null.String `boil:"file_name" json:"file_name,omitempty" toml:"file_name" yaml:"file_name,omitempty"`
	EditType          uint16      `boil:"edit_type" json:"edit_type" toml:"edit_type" yaml:"edit_type"`
	Author            null.String `boil:"author" json:"author,omitempty" toml:"author" yaml:"author,omitempty"`
	Description       null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Keyword           null.String `boil:"keyword" json:"keyword,omitempty" toml:"keyword" yaml:"keyword,omitempty"`
	CreateDate        time.Time   `boil:"create_date" json:"create_date" toml:"create_date" yaml:"create_date"`
	UpdateDate        time.Time   `boil:"update_date" json:"update_date" toml:"update_date" yaml:"update_date"`
	MetaRobots        null.String `boil:"meta_robots" json:"meta_robots,omitempty" toml:"meta_robots" yaml:"meta_robots,omitempty"`
	MetaTags          null.String `boil:"meta_tags" json:"meta_tags,omitempty" toml:"meta_tags" yaml:"meta_tags,omitempty"`
	DiscriminatorType string      `boil:"discriminator_type" json:"discriminator_type" toml:"discriminator_type" yaml:"discriminator_type"`

	R *dtbPageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dtbPageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DTBPageColumns = struct {
	ID                string
	MasterPageID      string
	PageName          string
	URL               string
	FileName          string
	EditType          string
	Author            string
	Description       string
	Keyword           string
	CreateDate        string
	UpdateDate        string
	MetaRobots        string
	MetaTags          string
	DiscriminatorType string
}{
	ID:                "id",
	MasterPageID:      "master_page_id",
	PageName:          "page_name",
	URL:               "url",
	FileName:          "file_name",
	EditType:          "edit_type",
	Author:            "author",
	Description:       "description",
	Keyword:           "keyword",
	CreateDate:        "create_date",
	UpdateDate:        "update_date",
	MetaRobots:        "meta_robots",
	MetaTags:          "meta_tags",
	DiscriminatorType: "discriminator_type",
}

// Generated where

var DTBPageWhere = struct {
	ID                whereHelperuint
	MasterPageID      whereHelpernull_Uint
	PageName          whereHelpernull_String
	URL               whereHelperstring
	FileName          whereHelpernull_String
	EditType          whereHelperuint16
	Author            whereHelpernull_String
	Description       whereHelpernull_String
	Keyword           whereHelpernull_String
	CreateDate        whereHelpertime_Time
	UpdateDate        whereHelpertime_Time
	MetaRobots        whereHelpernull_String
	MetaTags          whereHelpernull_String
	DiscriminatorType whereHelperstring
}{
	ID:                whereHelperuint{field: `id`},
	MasterPageID:      whereHelpernull_Uint{field: `master_page_id`},
	PageName:          whereHelpernull_String{field: `page_name`},
	URL:               whereHelperstring{field: `url`},
	FileName:          whereHelpernull_String{field: `file_name`},
	EditType:          whereHelperuint16{field: `edit_type`},
	Author:            whereHelpernull_String{field: `author`},
	Description:       whereHelpernull_String{field: `description`},
	Keyword:           whereHelpernull_String{field: `keyword`},
	CreateDate:        whereHelpertime_Time{field: `create_date`},
	UpdateDate:        whereHelpertime_Time{field: `update_date`},
	MetaRobots:        whereHelpernull_String{field: `meta_robots`},
	MetaTags:          whereHelpernull_String{field: `meta_tags`},
	DiscriminatorType: whereHelperstring{field: `discriminator_type`},
}

// DTBPageRels is where relationship names are stored.
var DTBPageRels = struct {
	MasterPage         string
	MasterPageDTBPages string
	PageDTBPageLayouts string
}{
	MasterPage:         "MasterPage",
	MasterPageDTBPages: "MasterPageDTBPages",
	PageDTBPageLayouts: "PageDTBPageLayouts",
}

// dtbPageR is where relationships are stored.
type dtbPageR struct {
	MasterPage         *DTBPage
	MasterPageDTBPages DTBPageSlice
	PageDTBPageLayouts DTBPageLayoutSlice
}

// NewStruct creates a new relationship struct
func (*dtbPageR) NewStruct() *dtbPageR {
	return &dtbPageR{}
}

// dtbPageL is where Load methods for each relationship are stored.
type dtbPageL struct{}

var (
	dtbPageColumns               = []string{"id", "master_page_id", "page_name", "url", "file_name", "edit_type", "author", "description", "keyword", "create_date", "update_date", "meta_robots", "meta_tags", "discriminator_type"}
	dtbPageColumnsWithoutDefault = []string{"master_page_id", "page_name", "url", "file_name", "author", "description", "keyword", "create_date", "update_date", "meta_robots", "meta_tags", "discriminator_type"}
	dtbPageColumnsWithDefault    = []string{"id", "edit_type"}
	dtbPagePrimaryKeyColumns     = []string{"id"}
)

type (
	// DTBPageSlice is an alias for a slice of pointers to DTBPage.
	// This should generally be used opposed to []DTBPage.
	DTBPageSlice []*DTBPage
	// DTBPageHook is the signature for custom DTBPage hook methods
	DTBPageHook func(context.Context, boil.ContextExecutor, *DTBPage) error

	dtbPageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dtbPageType                 = reflect.TypeOf(&DTBPage{})
	dtbPageMapping              = queries.MakeStructMapping(dtbPageType)
	dtbPagePrimaryKeyMapping, _ = queries.BindMapping(dtbPageType, dtbPageMapping, dtbPagePrimaryKeyColumns)
	dtbPageInsertCacheMut       sync.RWMutex
	dtbPageInsertCache          = make(map[string]insertCache)
	dtbPageUpdateCacheMut       sync.RWMutex
	dtbPageUpdateCache          = make(map[string]updateCache)
	dtbPageUpsertCacheMut       sync.RWMutex
	dtbPageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dtbPageBeforeInsertHooks []DTBPageHook
var dtbPageBeforeUpdateHooks []DTBPageHook
var dtbPageBeforeDeleteHooks []DTBPageHook
var dtbPageBeforeUpsertHooks []DTBPageHook

var dtbPageAfterInsertHooks []DTBPageHook
var dtbPageAfterSelectHooks []DTBPageHook
var dtbPageAfterUpdateHooks []DTBPageHook
var dtbPageAfterDeleteHooks []DTBPageHook
var dtbPageAfterUpsertHooks []DTBPageHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DTBPage) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbPageBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DTBPage) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbPageBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DTBPage) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbPageBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DTBPage) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbPageBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DTBPage) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbPageAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DTBPage) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbPageAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DTBPage) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbPageAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DTBPage) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbPageAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DTBPage) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbPageAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDTBPageHook registers your hook function for all future operations.
func AddDTBPageHook(hookPoint boil.HookPoint, dtbPageHook DTBPageHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		dtbPageBeforeInsertHooks = append(dtbPageBeforeInsertHooks, dtbPageHook)
	case boil.BeforeUpdateHook:
		dtbPageBeforeUpdateHooks = append(dtbPageBeforeUpdateHooks, dtbPageHook)
	case boil.BeforeDeleteHook:
		dtbPageBeforeDeleteHooks = append(dtbPageBeforeDeleteHooks, dtbPageHook)
	case boil.BeforeUpsertHook:
		dtbPageBeforeUpsertHooks = append(dtbPageBeforeUpsertHooks, dtbPageHook)
	case boil.AfterInsertHook:
		dtbPageAfterInsertHooks = append(dtbPageAfterInsertHooks, dtbPageHook)
	case boil.AfterSelectHook:
		dtbPageAfterSelectHooks = append(dtbPageAfterSelectHooks, dtbPageHook)
	case boil.AfterUpdateHook:
		dtbPageAfterUpdateHooks = append(dtbPageAfterUpdateHooks, dtbPageHook)
	case boil.AfterDeleteHook:
		dtbPageAfterDeleteHooks = append(dtbPageAfterDeleteHooks, dtbPageHook)
	case boil.AfterUpsertHook:
		dtbPageAfterUpsertHooks = append(dtbPageAfterUpsertHooks, dtbPageHook)
	}
}

// One returns a single dtbPage record from the query.
func (q dtbPageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DTBPage, error) {
	o := &DTBPage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for dtb_page")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DTBPage records from the query.
func (q dtbPageQuery) All(ctx context.Context, exec boil.ContextExecutor) (DTBPageSlice, error) {
	var o []*DTBPage

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to DTBPage slice")
	}

	if len(dtbPageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DTBPage records in the query.
func (q dtbPageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count dtb_page rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dtbPageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if dtb_page exists")
	}

	return count > 0, nil
}

// MasterPage pointed to by the foreign key.
func (o *DTBPage) MasterPage(mods ...qm.QueryMod) dtbPageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.MasterPageID),
	}

	queryMods = append(queryMods, mods...)

	query := DTBPages(queryMods...)
	queries.SetFrom(query.Query, "`dtb_page`")

	return query
}

// MasterPageDTBPages retrieves all the dtb_page's DTBPages with an executor via master_page_id column.
func (o *DTBPage) MasterPageDTBPages(mods ...qm.QueryMod) dtbPageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`dtb_page`.`master_page_id`=?", o.ID),
	)

	query := DTBPages(queryMods...)
	queries.SetFrom(query.Query, "`dtb_page`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`dtb_page`.*"})
	}

	return query
}

// PageDTBPageLayouts retrieves all the dtb_page_layout's DTBPageLayouts with an executor via page_id column.
func (o *DTBPage) PageDTBPageLayouts(mods ...qm.QueryMod) dtbPageLayoutQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`dtb_page_layout`.`page_id`=?", o.ID),
	)

	query := DTBPageLayouts(queryMods...)
	queries.SetFrom(query.Query, "`dtb_page_layout`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`dtb_page_layout`.*"})
	}

	return query
}

// LoadMasterPage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dtbPageL) LoadMasterPage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBPage interface{}, mods queries.Applicator) error {
	var slice []*DTBPage
	var object *DTBPage

	if singular {
		object = maybeDTBPage.(*DTBPage)
	} else {
		slice = *maybeDTBPage.(*[]*DTBPage)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbPageR{}
		}
		if !queries.IsNil(object.MasterPageID) {
			args = append(args, object.MasterPageID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbPageR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.MasterPageID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.MasterPageID) {
				args = append(args, obj.MasterPageID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_page`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DTBPage")
	}

	var resultSlice []*DTBPage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DTBPage")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dtb_page")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_page")
	}

	if len(dtbPageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MasterPage = foreign
		if foreign.R == nil {
			foreign.R = &dtbPageR{}
		}
		foreign.R.MasterPageDTBPages = append(foreign.R.MasterPageDTBPages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.MasterPageID, foreign.ID) {
				local.R.MasterPage = foreign
				if foreign.R == nil {
					foreign.R = &dtbPageR{}
				}
				foreign.R.MasterPageDTBPages = append(foreign.R.MasterPageDTBPages, local)
				break
			}
		}
	}

	return nil
}

// LoadMasterPageDTBPages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dtbPageL) LoadMasterPageDTBPages(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBPage interface{}, mods queries.Applicator) error {
	var slice []*DTBPage
	var object *DTBPage

	if singular {
		object = maybeDTBPage.(*DTBPage)
	} else {
		slice = *maybeDTBPage.(*[]*DTBPage)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbPageR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbPageR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_page`), qm.WhereIn(`master_page_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dtb_page")
	}

	var resultSlice []*DTBPage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dtb_page")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dtb_page")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_page")
	}

	if len(dtbPageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MasterPageDTBPages = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dtbPageR{}
			}
			foreign.R.MasterPage = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.MasterPageID) {
				local.R.MasterPageDTBPages = append(local.R.MasterPageDTBPages, foreign)
				if foreign.R == nil {
					foreign.R = &dtbPageR{}
				}
				foreign.R.MasterPage = local
				break
			}
		}
	}

	return nil
}

// LoadPageDTBPageLayouts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dtbPageL) LoadPageDTBPageLayouts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBPage interface{}, mods queries.Applicator) error {
	var slice []*DTBPage
	var object *DTBPage

	if singular {
		object = maybeDTBPage.(*DTBPage)
	} else {
		slice = *maybeDTBPage.(*[]*DTBPage)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbPageR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbPageR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_page_layout`), qm.WhereIn(`page_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dtb_page_layout")
	}

	var resultSlice []*DTBPageLayout
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dtb_page_layout")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dtb_page_layout")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_page_layout")
	}

	if len(dtbPageLayoutAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PageDTBPageLayouts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dtbPageLayoutR{}
			}
			foreign.R.Page = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PageID {
				local.R.PageDTBPageLayouts = append(local.R.PageDTBPageLayouts, foreign)
				if foreign.R == nil {
					foreign.R = &dtbPageLayoutR{}
				}
				foreign.R.Page = local
				break
			}
		}
	}

	return nil
}

// SetMasterPage of the dtbPage to the related item.
// Sets o.R.MasterPage to related.
// Adds o to related.R.MasterPageDTBPages.
func (o *DTBPage) SetMasterPage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DTBPage) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `dtb_page` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"master_page_id"}),
		strmangle.WhereClause("`", "`", 0, dtbPagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.MasterPageID, related.ID)
	if o.R == nil {
		o.R = &dtbPageR{
			MasterPage: related,
		}
	} else {
		o.R.MasterPage = related
	}

	if related.R == nil {
		related.R = &dtbPageR{
			MasterPageDTBPages: DTBPageSlice{o},
		}
	} else {
		related.R.MasterPageDTBPages = append(related.R.MasterPageDTBPages, o)
	}

	return nil
}

// RemoveMasterPage relationship.
// Sets o.R.MasterPage to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *DTBPage) RemoveMasterPage(ctx context.Context, exec boil.ContextExecutor, related *DTBPage) error {
	var err error

	queries.SetScanner(&o.MasterPageID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("master_page_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.MasterPage = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.MasterPageDTBPages {
		if queries.Equal(o.MasterPageID, ri.MasterPageID) {
			continue
		}

		ln := len(related.R.MasterPageDTBPages)
		if ln > 1 && i < ln-1 {
			related.R.MasterPageDTBPages[i] = related.R.MasterPageDTBPages[ln-1]
		}
		related.R.MasterPageDTBPages = related.R.MasterPageDTBPages[:ln-1]
		break
	}
	return nil
}

// AddMasterPageDTBPages adds the given related objects to the existing relationships
// of the dtb_page, optionally inserting them as new records.
// Appends related to o.R.MasterPageDTBPages.
// Sets related.R.MasterPage appropriately.
func (o *DTBPage) AddMasterPageDTBPages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBPage) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.MasterPageID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `dtb_page` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"master_page_id"}),
				strmangle.WhereClause("`", "`", 0, dtbPagePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.MasterPageID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &dtbPageR{
			MasterPageDTBPages: related,
		}
	} else {
		o.R.MasterPageDTBPages = append(o.R.MasterPageDTBPages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dtbPageR{
				MasterPage: o,
			}
		} else {
			rel.R.MasterPage = o
		}
	}
	return nil
}

// SetMasterPageDTBPages removes all previously related items of the
// dtb_page replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.MasterPage's MasterPageDTBPages accordingly.
// Replaces o.R.MasterPageDTBPages with related.
// Sets related.R.MasterPage's MasterPageDTBPages accordingly.
func (o *DTBPage) SetMasterPageDTBPages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBPage) error {
	query := "update `dtb_page` set `master_page_id` = null where `master_page_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.MasterPageDTBPages {
			queries.SetScanner(&rel.MasterPageID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.MasterPage = nil
		}

		o.R.MasterPageDTBPages = nil
	}
	return o.AddMasterPageDTBPages(ctx, exec, insert, related...)
}

// RemoveMasterPageDTBPages relationships from objects passed in.
// Removes related items from R.MasterPageDTBPages (uses pointer comparison, removal does not keep order)
// Sets related.R.MasterPage.
func (o *DTBPage) RemoveMasterPageDTBPages(ctx context.Context, exec boil.ContextExecutor, related ...*DTBPage) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.MasterPageID, nil)
		if rel.R != nil {
			rel.R.MasterPage = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("master_page_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.MasterPageDTBPages {
			if rel != ri {
				continue
			}

			ln := len(o.R.MasterPageDTBPages)
			if ln > 1 && i < ln-1 {
				o.R.MasterPageDTBPages[i] = o.R.MasterPageDTBPages[ln-1]
			}
			o.R.MasterPageDTBPages = o.R.MasterPageDTBPages[:ln-1]
			break
		}
	}

	return nil
}

// AddPageDTBPageLayouts adds the given related objects to the existing relationships
// of the dtb_page, optionally inserting them as new records.
// Appends related to o.R.PageDTBPageLayouts.
// Sets related.R.Page appropriately.
func (o *DTBPage) AddPageDTBPageLayouts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBPageLayout) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PageID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `dtb_page_layout` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"page_id"}),
				strmangle.WhereClause("`", "`", 0, dtbPageLayoutPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.PageID, rel.LayoutID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PageID = o.ID
		}
	}

	if o.R == nil {
		o.R = &dtbPageR{
			PageDTBPageLayouts: related,
		}
	} else {
		o.R.PageDTBPageLayouts = append(o.R.PageDTBPageLayouts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dtbPageLayoutR{
				Page: o,
			}
		} else {
			rel.R.Page = o
		}
	}
	return nil
}

// DTBPages retrieves all the records using an executor.
func DTBPages(mods ...qm.QueryMod) dtbPageQuery {
	mods = append(mods, qm.From("`dtb_page`"))
	return dtbPageQuery{NewQuery(mods...)}
}

// FindDTBPage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDTBPage(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*DTBPage, error) {
	dtbPageObj := &DTBPage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `dtb_page` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, dtbPageObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from dtb_page")
	}

	return dtbPageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DTBPage) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no dtb_page provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dtbPageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dtbPageInsertCacheMut.RLock()
	cache, cached := dtbPageInsertCache[key]
	dtbPageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dtbPageColumns,
			dtbPageColumnsWithDefault,
			dtbPageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dtbPageType, dtbPageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dtbPageType, dtbPageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `dtb_page` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `dtb_page` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `dtb_page` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dtbPagePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into dtb_page")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == dtbPageMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for dtb_page")
	}

CacheNoHooks:
	if !cached {
		dtbPageInsertCacheMut.Lock()
		dtbPageInsertCache[key] = cache
		dtbPageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DTBPage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DTBPage) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dtbPageUpdateCacheMut.RLock()
	cache, cached := dtbPageUpdateCache[key]
	dtbPageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dtbPageColumns,
			dtbPagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update dtb_page, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `dtb_page` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dtbPagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dtbPageType, dtbPageMapping, append(wl, dtbPagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update dtb_page row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for dtb_page")
	}

	if !cached {
		dtbPageUpdateCacheMut.Lock()
		dtbPageUpdateCache[key] = cache
		dtbPageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dtbPageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for dtb_page")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for dtb_page")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DTBPageSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbPagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `dtb_page` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbPagePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in dtbPage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all dtbPage")
	}
	return rowsAff, nil
}

var mySQLDTBPageUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DTBPage) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no dtb_page provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dtbPageColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDTBPageUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dtbPageUpsertCacheMut.RLock()
	cache, cached := dtbPageUpsertCache[key]
	dtbPageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dtbPageColumns,
			dtbPageColumnsWithDefault,
			dtbPageColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			dtbPageColumns,
			dtbPagePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("model: unable to upsert dtb_page, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "dtb_page", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `dtb_page` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dtbPageType, dtbPageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dtbPageType, dtbPageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for dtb_page")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == dtbPageMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dtbPageType, dtbPageMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for dtb_page")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for dtb_page")
	}

CacheNoHooks:
	if !cached {
		dtbPageUpsertCacheMut.Lock()
		dtbPageUpsertCache[key] = cache
		dtbPageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DTBPage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DTBPage) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no DTBPage provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dtbPagePrimaryKeyMapping)
	sql := "DELETE FROM `dtb_page` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from dtb_page")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for dtb_page")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dtbPageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no dtbPageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from dtb_page")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for dtb_page")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DTBPageSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no DTBPage slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(dtbPageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbPagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `dtb_page` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbPagePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from dtbPage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for dtb_page")
	}

	if len(dtbPageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DTBPage) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDTBPage(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DTBPageSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DTBPageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbPagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `dtb_page`.* FROM `dtb_page` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbPagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in DTBPageSlice")
	}

	*o = slice

	return nil
}

// DTBPageExists checks if the DTBPage row exists.
func DTBPageExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `dtb_page` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if dtb_page exists")
	}

	return exists, nil
}
