// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// DTBPageLayout is an object representing the database table.
type DTBPageLayout struct {
	PageID            uint   `boil:"page_id" json:"page_id" toml:"page_id" yaml:"page_id"`
	LayoutID          uint   `boil:"layout_id" json:"layout_id" toml:"layout_id" yaml:"layout_id"`
	SortNo            uint16 `boil:"sort_no" json:"sort_no" toml:"sort_no" yaml:"sort_no"`
	DiscriminatorType string `boil:"discriminator_type" json:"discriminator_type" toml:"discriminator_type" yaml:"discriminator_type"`

	R *dtbPageLayoutR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dtbPageLayoutL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DTBPageLayoutColumns = struct {
	PageID            string
	LayoutID          string
	SortNo            string
	DiscriminatorType string
}{
	PageID:            "page_id",
	LayoutID:          "layout_id",
	SortNo:            "sort_no",
	DiscriminatorType: "discriminator_type",
}

// Generated where

var DTBPageLayoutWhere = struct {
	PageID            whereHelperuint
	LayoutID          whereHelperuint
	SortNo            whereHelperuint16
	DiscriminatorType whereHelperstring
}{
	PageID:            whereHelperuint{field: `page_id`},
	LayoutID:          whereHelperuint{field: `layout_id`},
	SortNo:            whereHelperuint16{field: `sort_no`},
	DiscriminatorType: whereHelperstring{field: `discriminator_type`},
}

// DTBPageLayoutRels is where relationship names are stored.
var DTBPageLayoutRels = struct {
	Layout string
	Page   string
}{
	Layout: "Layout",
	Page:   "Page",
}

// dtbPageLayoutR is where relationships are stored.
type dtbPageLayoutR struct {
	Layout *DTBLayout
	Page   *DTBPage
}

// NewStruct creates a new relationship struct
func (*dtbPageLayoutR) NewStruct() *dtbPageLayoutR {
	return &dtbPageLayoutR{}
}

// dtbPageLayoutL is where Load methods for each relationship are stored.
type dtbPageLayoutL struct{}

var (
	dtbPageLayoutColumns               = []string{"page_id", "layout_id", "sort_no", "discriminator_type"}
	dtbPageLayoutColumnsWithoutDefault = []string{"page_id", "layout_id", "sort_no", "discriminator_type"}
	dtbPageLayoutColumnsWithDefault    = []string{}
	dtbPageLayoutPrimaryKeyColumns     = []string{"page_id", "layout_id"}
)

type (
	// DTBPageLayoutSlice is an alias for a slice of pointers to DTBPageLayout.
	// This should generally be used opposed to []DTBPageLayout.
	DTBPageLayoutSlice []*DTBPageLayout
	// DTBPageLayoutHook is the signature for custom DTBPageLayout hook methods
	DTBPageLayoutHook func(context.Context, boil.ContextExecutor, *DTBPageLayout) error

	dtbPageLayoutQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dtbPageLayoutType                 = reflect.TypeOf(&DTBPageLayout{})
	dtbPageLayoutMapping              = queries.MakeStructMapping(dtbPageLayoutType)
	dtbPageLayoutPrimaryKeyMapping, _ = queries.BindMapping(dtbPageLayoutType, dtbPageLayoutMapping, dtbPageLayoutPrimaryKeyColumns)
	dtbPageLayoutInsertCacheMut       sync.RWMutex
	dtbPageLayoutInsertCache          = make(map[string]insertCache)
	dtbPageLayoutUpdateCacheMut       sync.RWMutex
	dtbPageLayoutUpdateCache          = make(map[string]updateCache)
	dtbPageLayoutUpsertCacheMut       sync.RWMutex
	dtbPageLayoutUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dtbPageLayoutBeforeInsertHooks []DTBPageLayoutHook
var dtbPageLayoutBeforeUpdateHooks []DTBPageLayoutHook
var dtbPageLayoutBeforeDeleteHooks []DTBPageLayoutHook
var dtbPageLayoutBeforeUpsertHooks []DTBPageLayoutHook

var dtbPageLayoutAfterInsertHooks []DTBPageLayoutHook
var dtbPageLayoutAfterSelectHooks []DTBPageLayoutHook
var dtbPageLayoutAfterUpdateHooks []DTBPageLayoutHook
var dtbPageLayoutAfterDeleteHooks []DTBPageLayoutHook
var dtbPageLayoutAfterUpsertHooks []DTBPageLayoutHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DTBPageLayout) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbPageLayoutBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DTBPageLayout) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbPageLayoutBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DTBPageLayout) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbPageLayoutBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DTBPageLayout) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbPageLayoutBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DTBPageLayout) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbPageLayoutAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DTBPageLayout) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbPageLayoutAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DTBPageLayout) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbPageLayoutAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DTBPageLayout) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbPageLayoutAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DTBPageLayout) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbPageLayoutAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDTBPageLayoutHook registers your hook function for all future operations.
func AddDTBPageLayoutHook(hookPoint boil.HookPoint, dtbPageLayoutHook DTBPageLayoutHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		dtbPageLayoutBeforeInsertHooks = append(dtbPageLayoutBeforeInsertHooks, dtbPageLayoutHook)
	case boil.BeforeUpdateHook:
		dtbPageLayoutBeforeUpdateHooks = append(dtbPageLayoutBeforeUpdateHooks, dtbPageLayoutHook)
	case boil.BeforeDeleteHook:
		dtbPageLayoutBeforeDeleteHooks = append(dtbPageLayoutBeforeDeleteHooks, dtbPageLayoutHook)
	case boil.BeforeUpsertHook:
		dtbPageLayoutBeforeUpsertHooks = append(dtbPageLayoutBeforeUpsertHooks, dtbPageLayoutHook)
	case boil.AfterInsertHook:
		dtbPageLayoutAfterInsertHooks = append(dtbPageLayoutAfterInsertHooks, dtbPageLayoutHook)
	case boil.AfterSelectHook:
		dtbPageLayoutAfterSelectHooks = append(dtbPageLayoutAfterSelectHooks, dtbPageLayoutHook)
	case boil.AfterUpdateHook:
		dtbPageLayoutAfterUpdateHooks = append(dtbPageLayoutAfterUpdateHooks, dtbPageLayoutHook)
	case boil.AfterDeleteHook:
		dtbPageLayoutAfterDeleteHooks = append(dtbPageLayoutAfterDeleteHooks, dtbPageLayoutHook)
	case boil.AfterUpsertHook:
		dtbPageLayoutAfterUpsertHooks = append(dtbPageLayoutAfterUpsertHooks, dtbPageLayoutHook)
	}
}

// One returns a single dtbPageLayout record from the query.
func (q dtbPageLayoutQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DTBPageLayout, error) {
	o := &DTBPageLayout{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for dtb_page_layout")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DTBPageLayout records from the query.
func (q dtbPageLayoutQuery) All(ctx context.Context, exec boil.ContextExecutor) (DTBPageLayoutSlice, error) {
	var o []*DTBPageLayout

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to DTBPageLayout slice")
	}

	if len(dtbPageLayoutAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DTBPageLayout records in the query.
func (q dtbPageLayoutQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count dtb_page_layout rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dtbPageLayoutQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if dtb_page_layout exists")
	}

	return count > 0, nil
}

// Layout pointed to by the foreign key.
func (o *DTBPageLayout) Layout(mods ...qm.QueryMod) dtbLayoutQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.LayoutID),
	}

	queryMods = append(queryMods, mods...)

	query := DTBLayouts(queryMods...)
	queries.SetFrom(query.Query, "`dtb_layout`")

	return query
}

// Page pointed to by the foreign key.
func (o *DTBPageLayout) Page(mods ...qm.QueryMod) dtbPageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.PageID),
	}

	queryMods = append(queryMods, mods...)

	query := DTBPages(queryMods...)
	queries.SetFrom(query.Query, "`dtb_page`")

	return query
}

// LoadLayout allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dtbPageLayoutL) LoadLayout(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBPageLayout interface{}, mods queries.Applicator) error {
	var slice []*DTBPageLayout
	var object *DTBPageLayout

	if singular {
		object = maybeDTBPageLayout.(*DTBPageLayout)
	} else {
		slice = *maybeDTBPageLayout.(*[]*DTBPageLayout)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbPageLayoutR{}
		}
		args = append(args, object.LayoutID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbPageLayoutR{}
			}

			for _, a := range args {
				if a == obj.LayoutID {
					continue Outer
				}
			}

			args = append(args, obj.LayoutID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_layout`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DTBLayout")
	}

	var resultSlice []*DTBLayout
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DTBLayout")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dtb_layout")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_layout")
	}

	if len(dtbPageLayoutAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Layout = foreign
		if foreign.R == nil {
			foreign.R = &dtbLayoutR{}
		}
		foreign.R.LayoutDTBPageLayouts = append(foreign.R.LayoutDTBPageLayouts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LayoutID == foreign.ID {
				local.R.Layout = foreign
				if foreign.R == nil {
					foreign.R = &dtbLayoutR{}
				}
				foreign.R.LayoutDTBPageLayouts = append(foreign.R.LayoutDTBPageLayouts, local)
				break
			}
		}
	}

	return nil
}

// LoadPage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dtbPageLayoutL) LoadPage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBPageLayout interface{}, mods queries.Applicator) error {
	var slice []*DTBPageLayout
	var object *DTBPageLayout

	if singular {
		object = maybeDTBPageLayout.(*DTBPageLayout)
	} else {
		slice = *maybeDTBPageLayout.(*[]*DTBPageLayout)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbPageLayoutR{}
		}
		args = append(args, object.PageID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbPageLayoutR{}
			}

			for _, a := range args {
				if a == obj.PageID {
					continue Outer
				}
			}

			args = append(args, obj.PageID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_page`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DTBPage")
	}

	var resultSlice []*DTBPage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DTBPage")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dtb_page")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_page")
	}

	if len(dtbPageLayoutAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Page = foreign
		if foreign.R == nil {
			foreign.R = &dtbPageR{}
		}
		foreign.R.PageDTBPageLayouts = append(foreign.R.PageDTBPageLayouts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PageID == foreign.ID {
				local.R.Page = foreign
				if foreign.R == nil {
					foreign.R = &dtbPageR{}
				}
				foreign.R.PageDTBPageLayouts = append(foreign.R.PageDTBPageLayouts, local)
				break
			}
		}
	}

	return nil
}

// SetLayout of the dtbPageLayout to the related item.
// Sets o.R.Layout to related.
// Adds o to related.R.LayoutDTBPageLayouts.
func (o *DTBPageLayout) SetLayout(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DTBLayout) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `dtb_page_layout` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"layout_id"}),
		strmangle.WhereClause("`", "`", 0, dtbPageLayoutPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.PageID, o.LayoutID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LayoutID = related.ID
	if o.R == nil {
		o.R = &dtbPageLayoutR{
			Layout: related,
		}
	} else {
		o.R.Layout = related
	}

	if related.R == nil {
		related.R = &dtbLayoutR{
			LayoutDTBPageLayouts: DTBPageLayoutSlice{o},
		}
	} else {
		related.R.LayoutDTBPageLayouts = append(related.R.LayoutDTBPageLayouts, o)
	}

	return nil
}

// SetPage of the dtbPageLayout to the related item.
// Sets o.R.Page to related.
// Adds o to related.R.PageDTBPageLayouts.
func (o *DTBPageLayout) SetPage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DTBPage) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `dtb_page_layout` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"page_id"}),
		strmangle.WhereClause("`", "`", 0, dtbPageLayoutPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.PageID, o.LayoutID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PageID = related.ID
	if o.R == nil {
		o.R = &dtbPageLayoutR{
			Page: related,
		}
	} else {
		o.R.Page = related
	}

	if related.R == nil {
		related.R = &dtbPageR{
			PageDTBPageLayouts: DTBPageLayoutSlice{o},
		}
	} else {
		related.R.PageDTBPageLayouts = append(related.R.PageDTBPageLayouts, o)
	}

	return nil
}

// DTBPageLayouts retrieves all the records using an executor.
func DTBPageLayouts(mods ...qm.QueryMod) dtbPageLayoutQuery {
	mods = append(mods, qm.From("`dtb_page_layout`"))
	return dtbPageLayoutQuery{NewQuery(mods...)}
}

// FindDTBPageLayout retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDTBPageLayout(ctx context.Context, exec boil.ContextExecutor, pageID uint, layoutID uint, selectCols ...string) (*DTBPageLayout, error) {
	dtbPageLayoutObj := &DTBPageLayout{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `dtb_page_layout` where `page_id`=? AND `layout_id`=?", sel,
	)

	q := queries.Raw(query, pageID, layoutID)

	err := q.Bind(ctx, exec, dtbPageLayoutObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from dtb_page_layout")
	}

	return dtbPageLayoutObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DTBPageLayout) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no dtb_page_layout provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dtbPageLayoutColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dtbPageLayoutInsertCacheMut.RLock()
	cache, cached := dtbPageLayoutInsertCache[key]
	dtbPageLayoutInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dtbPageLayoutColumns,
			dtbPageLayoutColumnsWithDefault,
			dtbPageLayoutColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dtbPageLayoutType, dtbPageLayoutMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dtbPageLayoutType, dtbPageLayoutMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `dtb_page_layout` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `dtb_page_layout` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `dtb_page_layout` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dtbPageLayoutPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into dtb_page_layout")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PageID,
		o.LayoutID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for dtb_page_layout")
	}

CacheNoHooks:
	if !cached {
		dtbPageLayoutInsertCacheMut.Lock()
		dtbPageLayoutInsertCache[key] = cache
		dtbPageLayoutInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DTBPageLayout.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DTBPageLayout) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dtbPageLayoutUpdateCacheMut.RLock()
	cache, cached := dtbPageLayoutUpdateCache[key]
	dtbPageLayoutUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dtbPageLayoutColumns,
			dtbPageLayoutPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update dtb_page_layout, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `dtb_page_layout` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dtbPageLayoutPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dtbPageLayoutType, dtbPageLayoutMapping, append(wl, dtbPageLayoutPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update dtb_page_layout row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for dtb_page_layout")
	}

	if !cached {
		dtbPageLayoutUpdateCacheMut.Lock()
		dtbPageLayoutUpdateCache[key] = cache
		dtbPageLayoutUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dtbPageLayoutQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for dtb_page_layout")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for dtb_page_layout")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DTBPageLayoutSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbPageLayoutPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `dtb_page_layout` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbPageLayoutPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in dtbPageLayout slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all dtbPageLayout")
	}
	return rowsAff, nil
}

var mySQLDTBPageLayoutUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DTBPageLayout) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no dtb_page_layout provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dtbPageLayoutColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDTBPageLayoutUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dtbPageLayoutUpsertCacheMut.RLock()
	cache, cached := dtbPageLayoutUpsertCache[key]
	dtbPageLayoutUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dtbPageLayoutColumns,
			dtbPageLayoutColumnsWithDefault,
			dtbPageLayoutColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			dtbPageLayoutColumns,
			dtbPageLayoutPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("model: unable to upsert dtb_page_layout, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "dtb_page_layout", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `dtb_page_layout` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dtbPageLayoutType, dtbPageLayoutMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dtbPageLayoutType, dtbPageLayoutMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for dtb_page_layout")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dtbPageLayoutType, dtbPageLayoutMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for dtb_page_layout")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for dtb_page_layout")
	}

CacheNoHooks:
	if !cached {
		dtbPageLayoutUpsertCacheMut.Lock()
		dtbPageLayoutUpsertCache[key] = cache
		dtbPageLayoutUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DTBPageLayout record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DTBPageLayout) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no DTBPageLayout provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dtbPageLayoutPrimaryKeyMapping)
	sql := "DELETE FROM `dtb_page_layout` WHERE `page_id`=? AND `layout_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from dtb_page_layout")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for dtb_page_layout")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dtbPageLayoutQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no dtbPageLayoutQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from dtb_page_layout")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for dtb_page_layout")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DTBPageLayoutSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no DTBPageLayout slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(dtbPageLayoutBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbPageLayoutPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `dtb_page_layout` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbPageLayoutPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from dtbPageLayout slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for dtb_page_layout")
	}

	if len(dtbPageLayoutAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DTBPageLayout) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDTBPageLayout(ctx, exec, o.PageID, o.LayoutID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DTBPageLayoutSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DTBPageLayoutSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbPageLayoutPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `dtb_page_layout`.* FROM `dtb_page_layout` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbPageLayoutPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in DTBPageLayoutSlice")
	}

	*o = slice

	return nil
}

// DTBPageLayoutExists checks if the DTBPageLayout row exists.
func DTBPageLayoutExists(ctx context.Context, exec boil.ContextExecutor, pageID uint, layoutID uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `dtb_page_layout` where `page_id`=? AND `layout_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, pageID, layoutID)
	}

	row := exec.QueryRowContext(ctx, sql, pageID, layoutID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if dtb_page_layout exists")
	}

	return exists, nil
}
