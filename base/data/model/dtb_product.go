// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// DTBProduct is an object representing the database table.
type DTBProduct struct {
	ID                uint        `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatorID         null.Uint   `boil:"creator_id" json:"creator_id,omitempty" toml:"creator_id" yaml:"creator_id,omitempty"`
	ProductStatusID   null.Uint16 `boil:"product_status_id" json:"product_status_id,omitempty" toml:"product_status_id" yaml:"product_status_id,omitempty"`
	Name              string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Note              null.String `boil:"note" json:"note,omitempty" toml:"note" yaml:"note,omitempty"`
	DescriptionList   null.String `boil:"description_list" json:"description_list,omitempty" toml:"description_list" yaml:"description_list,omitempty"`
	DescriptionDetail null.String `boil:"description_detail" json:"description_detail,omitempty" toml:"description_detail" yaml:"description_detail,omitempty"`
	SearchWord        null.String `boil:"search_word" json:"search_word,omitempty" toml:"search_word" yaml:"search_word,omitempty"`
	FreeArea          null.String `boil:"free_area" json:"free_area,omitempty" toml:"free_area" yaml:"free_area,omitempty"`
	CreateDate        time.Time   `boil:"create_date" json:"create_date" toml:"create_date" yaml:"create_date"`
	UpdateDate        time.Time   `boil:"update_date" json:"update_date" toml:"update_date" yaml:"update_date"`
	DiscriminatorType string      `boil:"discriminator_type" json:"discriminator_type" toml:"discriminator_type" yaml:"discriminator_type"`

	R *dtbProductR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dtbProductL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DTBProductColumns = struct {
	ID                string
	CreatorID         string
	ProductStatusID   string
	Name              string
	Note              string
	DescriptionList   string
	DescriptionDetail string
	SearchWord        string
	FreeArea          string
	CreateDate        string
	UpdateDate        string
	DiscriminatorType string
}{
	ID:                "id",
	CreatorID:         "creator_id",
	ProductStatusID:   "product_status_id",
	Name:              "name",
	Note:              "note",
	DescriptionList:   "description_list",
	DescriptionDetail: "description_detail",
	SearchWord:        "search_word",
	FreeArea:          "free_area",
	CreateDate:        "create_date",
	UpdateDate:        "update_date",
	DiscriminatorType: "discriminator_type",
}

// Generated where

var DTBProductWhere = struct {
	ID                whereHelperuint
	CreatorID         whereHelpernull_Uint
	ProductStatusID   whereHelpernull_Uint16
	Name              whereHelperstring
	Note              whereHelpernull_String
	DescriptionList   whereHelpernull_String
	DescriptionDetail whereHelpernull_String
	SearchWord        whereHelpernull_String
	FreeArea          whereHelpernull_String
	CreateDate        whereHelpertime_Time
	UpdateDate        whereHelpertime_Time
	DiscriminatorType whereHelperstring
}{
	ID:                whereHelperuint{field: `id`},
	CreatorID:         whereHelpernull_Uint{field: `creator_id`},
	ProductStatusID:   whereHelpernull_Uint16{field: `product_status_id`},
	Name:              whereHelperstring{field: `name`},
	Note:              whereHelpernull_String{field: `note`},
	DescriptionList:   whereHelpernull_String{field: `description_list`},
	DescriptionDetail: whereHelpernull_String{field: `description_detail`},
	SearchWord:        whereHelpernull_String{field: `search_word`},
	FreeArea:          whereHelpernull_String{field: `free_area`},
	CreateDate:        whereHelpertime_Time{field: `create_date`},
	UpdateDate:        whereHelpertime_Time{field: `update_date`},
	DiscriminatorType: whereHelperstring{field: `discriminator_type`},
}

// DTBProductRels is where relationship names are stored.
var DTBProductRels = struct {
	ProductStatus                      string
	ProductDTBCustomerFavoriteProducts string
	ProductDTBOrderItems               string
	ProductDTBProductCategories        string
	ProductDTBProductImages            string
	ProductDTBProductTags              string
	ProductDTBTaxRules                 string
}{
	ProductStatus:                      "ProductStatus",
	ProductDTBCustomerFavoriteProducts: "ProductDTBCustomerFavoriteProducts",
	ProductDTBOrderItems:               "ProductDTBOrderItems",
	ProductDTBProductCategories:        "ProductDTBProductCategories",
	ProductDTBProductImages:            "ProductDTBProductImages",
	ProductDTBProductTags:              "ProductDTBProductTags",
	ProductDTBTaxRules:                 "ProductDTBTaxRules",
}

// dtbProductR is where relationships are stored.
type dtbProductR struct {
	ProductStatus                      *MTBProductStatus
	ProductDTBCustomerFavoriteProducts DTBCustomerFavoriteProductSlice
	ProductDTBOrderItems               DTBOrderItemSlice
	ProductDTBProductCategories        DTBProductCategorySlice
	ProductDTBProductImages            DTBProductImageSlice
	ProductDTBProductTags              DTBProductTagSlice
	ProductDTBTaxRules                 DTBTaxRuleSlice
}

// NewStruct creates a new relationship struct
func (*dtbProductR) NewStruct() *dtbProductR {
	return &dtbProductR{}
}

// dtbProductL is where Load methods for each relationship are stored.
type dtbProductL struct{}

var (
	dtbProductColumns               = []string{"id", "creator_id", "product_status_id", "name", "note", "description_list", "description_detail", "search_word", "free_area", "create_date", "update_date", "discriminator_type"}
	dtbProductColumnsWithoutDefault = []string{"creator_id", "product_status_id", "name", "note", "description_list", "description_detail", "search_word", "free_area", "create_date", "update_date", "discriminator_type"}
	dtbProductColumnsWithDefault    = []string{"id"}
	dtbProductPrimaryKeyColumns     = []string{"id"}
)

type (
	// DTBProductSlice is an alias for a slice of pointers to DTBProduct.
	// This should generally be used opposed to []DTBProduct.
	DTBProductSlice []*DTBProduct
	// DTBProductHook is the signature for custom DTBProduct hook methods
	DTBProductHook func(context.Context, boil.ContextExecutor, *DTBProduct) error

	dtbProductQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dtbProductType                 = reflect.TypeOf(&DTBProduct{})
	dtbProductMapping              = queries.MakeStructMapping(dtbProductType)
	dtbProductPrimaryKeyMapping, _ = queries.BindMapping(dtbProductType, dtbProductMapping, dtbProductPrimaryKeyColumns)
	dtbProductInsertCacheMut       sync.RWMutex
	dtbProductInsertCache          = make(map[string]insertCache)
	dtbProductUpdateCacheMut       sync.RWMutex
	dtbProductUpdateCache          = make(map[string]updateCache)
	dtbProductUpsertCacheMut       sync.RWMutex
	dtbProductUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dtbProductBeforeInsertHooks []DTBProductHook
var dtbProductBeforeUpdateHooks []DTBProductHook
var dtbProductBeforeDeleteHooks []DTBProductHook
var dtbProductBeforeUpsertHooks []DTBProductHook

var dtbProductAfterInsertHooks []DTBProductHook
var dtbProductAfterSelectHooks []DTBProductHook
var dtbProductAfterUpdateHooks []DTBProductHook
var dtbProductAfterDeleteHooks []DTBProductHook
var dtbProductAfterUpsertHooks []DTBProductHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DTBProduct) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbProductBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DTBProduct) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbProductBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DTBProduct) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbProductBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DTBProduct) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbProductBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DTBProduct) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbProductAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DTBProduct) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbProductAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DTBProduct) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbProductAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DTBProduct) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbProductAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DTBProduct) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbProductAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDTBProductHook registers your hook function for all future operations.
func AddDTBProductHook(hookPoint boil.HookPoint, dtbProductHook DTBProductHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		dtbProductBeforeInsertHooks = append(dtbProductBeforeInsertHooks, dtbProductHook)
	case boil.BeforeUpdateHook:
		dtbProductBeforeUpdateHooks = append(dtbProductBeforeUpdateHooks, dtbProductHook)
	case boil.BeforeDeleteHook:
		dtbProductBeforeDeleteHooks = append(dtbProductBeforeDeleteHooks, dtbProductHook)
	case boil.BeforeUpsertHook:
		dtbProductBeforeUpsertHooks = append(dtbProductBeforeUpsertHooks, dtbProductHook)
	case boil.AfterInsertHook:
		dtbProductAfterInsertHooks = append(dtbProductAfterInsertHooks, dtbProductHook)
	case boil.AfterSelectHook:
		dtbProductAfterSelectHooks = append(dtbProductAfterSelectHooks, dtbProductHook)
	case boil.AfterUpdateHook:
		dtbProductAfterUpdateHooks = append(dtbProductAfterUpdateHooks, dtbProductHook)
	case boil.AfterDeleteHook:
		dtbProductAfterDeleteHooks = append(dtbProductAfterDeleteHooks, dtbProductHook)
	case boil.AfterUpsertHook:
		dtbProductAfterUpsertHooks = append(dtbProductAfterUpsertHooks, dtbProductHook)
	}
}

// One returns a single dtbProduct record from the query.
func (q dtbProductQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DTBProduct, error) {
	o := &DTBProduct{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for dtb_product")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DTBProduct records from the query.
func (q dtbProductQuery) All(ctx context.Context, exec boil.ContextExecutor) (DTBProductSlice, error) {
	var o []*DTBProduct

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to DTBProduct slice")
	}

	if len(dtbProductAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DTBProduct records in the query.
func (q dtbProductQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count dtb_product rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dtbProductQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if dtb_product exists")
	}

	return count > 0, nil
}

// ProductStatus pointed to by the foreign key.
func (o *DTBProduct) ProductStatus(mods ...qm.QueryMod) mtbProductStatusQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ProductStatusID),
	}

	queryMods = append(queryMods, mods...)

	query := MTBProductStatuses(queryMods...)
	queries.SetFrom(query.Query, "`mtb_product_status`")

	return query
}

// ProductDTBCustomerFavoriteProducts retrieves all the dtb_customer_favorite_product's DTBCustomerFavoriteProducts with an executor via product_id column.
func (o *DTBProduct) ProductDTBCustomerFavoriteProducts(mods ...qm.QueryMod) dtbCustomerFavoriteProductQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`dtb_customer_favorite_product`.`product_id`=?", o.ID),
	)

	query := DTBCustomerFavoriteProducts(queryMods...)
	queries.SetFrom(query.Query, "`dtb_customer_favorite_product`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`dtb_customer_favorite_product`.*"})
	}

	return query
}

// ProductDTBOrderItems retrieves all the dtb_order_item's DTBOrderItems with an executor via product_id column.
func (o *DTBProduct) ProductDTBOrderItems(mods ...qm.QueryMod) dtbOrderItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`dtb_order_item`.`product_id`=?", o.ID),
	)

	query := DTBOrderItems(queryMods...)
	queries.SetFrom(query.Query, "`dtb_order_item`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`dtb_order_item`.*"})
	}

	return query
}

// ProductDTBProductCategories retrieves all the dtb_product_category's DTBProductCategories with an executor via product_id column.
func (o *DTBProduct) ProductDTBProductCategories(mods ...qm.QueryMod) dtbProductCategoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`dtb_product_category`.`product_id`=?", o.ID),
	)

	query := DTBProductCategories(queryMods...)
	queries.SetFrom(query.Query, "`dtb_product_category`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`dtb_product_category`.*"})
	}

	return query
}

// ProductDTBProductImages retrieves all the dtb_product_image's DTBProductImages with an executor via product_id column.
func (o *DTBProduct) ProductDTBProductImages(mods ...qm.QueryMod) dtbProductImageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`dtb_product_image`.`product_id`=?", o.ID),
	)

	query := DTBProductImages(queryMods...)
	queries.SetFrom(query.Query, "`dtb_product_image`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`dtb_product_image`.*"})
	}

	return query
}

// ProductDTBProductTags retrieves all the dtb_product_tag's DTBProductTags with an executor via product_id column.
func (o *DTBProduct) ProductDTBProductTags(mods ...qm.QueryMod) dtbProductTagQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`dtb_product_tag`.`product_id`=?", o.ID),
	)

	query := DTBProductTags(queryMods...)
	queries.SetFrom(query.Query, "`dtb_product_tag`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`dtb_product_tag`.*"})
	}

	return query
}

// ProductDTBTaxRules retrieves all the dtb_tax_rule's DTBTaxRules with an executor via product_id column.
func (o *DTBProduct) ProductDTBTaxRules(mods ...qm.QueryMod) dtbTaxRuleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`dtb_tax_rule`.`product_id`=?", o.ID),
	)

	query := DTBTaxRules(queryMods...)
	queries.SetFrom(query.Query, "`dtb_tax_rule`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`dtb_tax_rule`.*"})
	}

	return query
}

// LoadProductStatus allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dtbProductL) LoadProductStatus(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBProduct interface{}, mods queries.Applicator) error {
	var slice []*DTBProduct
	var object *DTBProduct

	if singular {
		object = maybeDTBProduct.(*DTBProduct)
	} else {
		slice = *maybeDTBProduct.(*[]*DTBProduct)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbProductR{}
		}
		if !queries.IsNil(object.ProductStatusID) {
			args = append(args, object.ProductStatusID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbProductR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductStatusID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProductStatusID) {
				args = append(args, obj.ProductStatusID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`mtb_product_status`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MTBProductStatus")
	}

	var resultSlice []*MTBProductStatus
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MTBProductStatus")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mtb_product_status")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mtb_product_status")
	}

	if len(dtbProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductStatus = foreign
		if foreign.R == nil {
			foreign.R = &mtbProductStatusR{}
		}
		foreign.R.ProductStatusDTBProducts = append(foreign.R.ProductStatusDTBProducts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductStatusID, foreign.ID) {
				local.R.ProductStatus = foreign
				if foreign.R == nil {
					foreign.R = &mtbProductStatusR{}
				}
				foreign.R.ProductStatusDTBProducts = append(foreign.R.ProductStatusDTBProducts, local)
				break
			}
		}
	}

	return nil
}

// LoadProductDTBCustomerFavoriteProducts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dtbProductL) LoadProductDTBCustomerFavoriteProducts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBProduct interface{}, mods queries.Applicator) error {
	var slice []*DTBProduct
	var object *DTBProduct

	if singular {
		object = maybeDTBProduct.(*DTBProduct)
	} else {
		slice = *maybeDTBProduct.(*[]*DTBProduct)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbProductR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbProductR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_customer_favorite_product`), qm.WhereIn(`product_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dtb_customer_favorite_product")
	}

	var resultSlice []*DTBCustomerFavoriteProduct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dtb_customer_favorite_product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dtb_customer_favorite_product")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_customer_favorite_product")
	}

	if len(dtbCustomerFavoriteProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductDTBCustomerFavoriteProducts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dtbCustomerFavoriteProductR{}
			}
			foreign.R.Product = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ProductID) {
				local.R.ProductDTBCustomerFavoriteProducts = append(local.R.ProductDTBCustomerFavoriteProducts, foreign)
				if foreign.R == nil {
					foreign.R = &dtbCustomerFavoriteProductR{}
				}
				foreign.R.Product = local
				break
			}
		}
	}

	return nil
}

// LoadProductDTBOrderItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dtbProductL) LoadProductDTBOrderItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBProduct interface{}, mods queries.Applicator) error {
	var slice []*DTBProduct
	var object *DTBProduct

	if singular {
		object = maybeDTBProduct.(*DTBProduct)
	} else {
		slice = *maybeDTBProduct.(*[]*DTBProduct)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbProductR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbProductR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_order_item`), qm.WhereIn(`product_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dtb_order_item")
	}

	var resultSlice []*DTBOrderItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dtb_order_item")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dtb_order_item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_order_item")
	}

	if len(dtbOrderItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductDTBOrderItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dtbOrderItemR{}
			}
			foreign.R.Product = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ProductID) {
				local.R.ProductDTBOrderItems = append(local.R.ProductDTBOrderItems, foreign)
				if foreign.R == nil {
					foreign.R = &dtbOrderItemR{}
				}
				foreign.R.Product = local
				break
			}
		}
	}

	return nil
}

// LoadProductDTBProductCategories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dtbProductL) LoadProductDTBProductCategories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBProduct interface{}, mods queries.Applicator) error {
	var slice []*DTBProduct
	var object *DTBProduct

	if singular {
		object = maybeDTBProduct.(*DTBProduct)
	} else {
		slice = *maybeDTBProduct.(*[]*DTBProduct)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbProductR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbProductR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_product_category`), qm.WhereIn(`product_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dtb_product_category")
	}

	var resultSlice []*DTBProductCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dtb_product_category")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dtb_product_category")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_product_category")
	}

	if len(dtbProductCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductDTBProductCategories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dtbProductCategoryR{}
			}
			foreign.R.Product = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ProductID {
				local.R.ProductDTBProductCategories = append(local.R.ProductDTBProductCategories, foreign)
				if foreign.R == nil {
					foreign.R = &dtbProductCategoryR{}
				}
				foreign.R.Product = local
				break
			}
		}
	}

	return nil
}

// LoadProductDTBProductImages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dtbProductL) LoadProductDTBProductImages(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBProduct interface{}, mods queries.Applicator) error {
	var slice []*DTBProduct
	var object *DTBProduct

	if singular {
		object = maybeDTBProduct.(*DTBProduct)
	} else {
		slice = *maybeDTBProduct.(*[]*DTBProduct)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbProductR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbProductR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_product_image`), qm.WhereIn(`product_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dtb_product_image")
	}

	var resultSlice []*DTBProductImage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dtb_product_image")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dtb_product_image")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_product_image")
	}

	if len(dtbProductImageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductDTBProductImages = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dtbProductImageR{}
			}
			foreign.R.Product = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ProductID) {
				local.R.ProductDTBProductImages = append(local.R.ProductDTBProductImages, foreign)
				if foreign.R == nil {
					foreign.R = &dtbProductImageR{}
				}
				foreign.R.Product = local
				break
			}
		}
	}

	return nil
}

// LoadProductDTBProductTags allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dtbProductL) LoadProductDTBProductTags(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBProduct interface{}, mods queries.Applicator) error {
	var slice []*DTBProduct
	var object *DTBProduct

	if singular {
		object = maybeDTBProduct.(*DTBProduct)
	} else {
		slice = *maybeDTBProduct.(*[]*DTBProduct)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbProductR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbProductR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_product_tag`), qm.WhereIn(`product_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dtb_product_tag")
	}

	var resultSlice []*DTBProductTag
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dtb_product_tag")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dtb_product_tag")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_product_tag")
	}

	if len(dtbProductTagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductDTBProductTags = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dtbProductTagR{}
			}
			foreign.R.Product = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ProductID) {
				local.R.ProductDTBProductTags = append(local.R.ProductDTBProductTags, foreign)
				if foreign.R == nil {
					foreign.R = &dtbProductTagR{}
				}
				foreign.R.Product = local
				break
			}
		}
	}

	return nil
}

// LoadProductDTBTaxRules allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dtbProductL) LoadProductDTBTaxRules(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBProduct interface{}, mods queries.Applicator) error {
	var slice []*DTBProduct
	var object *DTBProduct

	if singular {
		object = maybeDTBProduct.(*DTBProduct)
	} else {
		slice = *maybeDTBProduct.(*[]*DTBProduct)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbProductR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbProductR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_tax_rule`), qm.WhereIn(`product_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dtb_tax_rule")
	}

	var resultSlice []*DTBTaxRule
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dtb_tax_rule")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dtb_tax_rule")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_tax_rule")
	}

	if len(dtbTaxRuleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductDTBTaxRules = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dtbTaxRuleR{}
			}
			foreign.R.Product = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ProductID) {
				local.R.ProductDTBTaxRules = append(local.R.ProductDTBTaxRules, foreign)
				if foreign.R == nil {
					foreign.R = &dtbTaxRuleR{}
				}
				foreign.R.Product = local
				break
			}
		}
	}

	return nil
}

// SetProductStatus of the dtbProduct to the related item.
// Sets o.R.ProductStatus to related.
// Adds o to related.R.ProductStatusDTBProducts.
func (o *DTBProduct) SetProductStatus(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MTBProductStatus) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `dtb_product` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"product_status_id"}),
		strmangle.WhereClause("`", "`", 0, dtbProductPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductStatusID, related.ID)
	if o.R == nil {
		o.R = &dtbProductR{
			ProductStatus: related,
		}
	} else {
		o.R.ProductStatus = related
	}

	if related.R == nil {
		related.R = &mtbProductStatusR{
			ProductStatusDTBProducts: DTBProductSlice{o},
		}
	} else {
		related.R.ProductStatusDTBProducts = append(related.R.ProductStatusDTBProducts, o)
	}

	return nil
}

// RemoveProductStatus relationship.
// Sets o.R.ProductStatus to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *DTBProduct) RemoveProductStatus(ctx context.Context, exec boil.ContextExecutor, related *MTBProductStatus) error {
	var err error

	queries.SetScanner(&o.ProductStatusID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("product_status_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.ProductStatus = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ProductStatusDTBProducts {
		if queries.Equal(o.ProductStatusID, ri.ProductStatusID) {
			continue
		}

		ln := len(related.R.ProductStatusDTBProducts)
		if ln > 1 && i < ln-1 {
			related.R.ProductStatusDTBProducts[i] = related.R.ProductStatusDTBProducts[ln-1]
		}
		related.R.ProductStatusDTBProducts = related.R.ProductStatusDTBProducts[:ln-1]
		break
	}
	return nil
}

// AddProductDTBCustomerFavoriteProducts adds the given related objects to the existing relationships
// of the dtb_product, optionally inserting them as new records.
// Appends related to o.R.ProductDTBCustomerFavoriteProducts.
// Sets related.R.Product appropriately.
func (o *DTBProduct) AddProductDTBCustomerFavoriteProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBCustomerFavoriteProduct) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `dtb_customer_favorite_product` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"product_id"}),
				strmangle.WhereClause("`", "`", 0, dtbCustomerFavoriteProductPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &dtbProductR{
			ProductDTBCustomerFavoriteProducts: related,
		}
	} else {
		o.R.ProductDTBCustomerFavoriteProducts = append(o.R.ProductDTBCustomerFavoriteProducts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dtbCustomerFavoriteProductR{
				Product: o,
			}
		} else {
			rel.R.Product = o
		}
	}
	return nil
}

// SetProductDTBCustomerFavoriteProducts removes all previously related items of the
// dtb_product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Product's ProductDTBCustomerFavoriteProducts accordingly.
// Replaces o.R.ProductDTBCustomerFavoriteProducts with related.
// Sets related.R.Product's ProductDTBCustomerFavoriteProducts accordingly.
func (o *DTBProduct) SetProductDTBCustomerFavoriteProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBCustomerFavoriteProduct) error {
	query := "update `dtb_customer_favorite_product` set `product_id` = null where `product_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ProductDTBCustomerFavoriteProducts {
			queries.SetScanner(&rel.ProductID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Product = nil
		}

		o.R.ProductDTBCustomerFavoriteProducts = nil
	}
	return o.AddProductDTBCustomerFavoriteProducts(ctx, exec, insert, related...)
}

// RemoveProductDTBCustomerFavoriteProducts relationships from objects passed in.
// Removes related items from R.ProductDTBCustomerFavoriteProducts (uses pointer comparison, removal does not keep order)
// Sets related.R.Product.
func (o *DTBProduct) RemoveProductDTBCustomerFavoriteProducts(ctx context.Context, exec boil.ContextExecutor, related ...*DTBCustomerFavoriteProduct) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductID, nil)
		if rel.R != nil {
			rel.R.Product = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("product_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductDTBCustomerFavoriteProducts {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductDTBCustomerFavoriteProducts)
			if ln > 1 && i < ln-1 {
				o.R.ProductDTBCustomerFavoriteProducts[i] = o.R.ProductDTBCustomerFavoriteProducts[ln-1]
			}
			o.R.ProductDTBCustomerFavoriteProducts = o.R.ProductDTBCustomerFavoriteProducts[:ln-1]
			break
		}
	}

	return nil
}

// AddProductDTBOrderItems adds the given related objects to the existing relationships
// of the dtb_product, optionally inserting them as new records.
// Appends related to o.R.ProductDTBOrderItems.
// Sets related.R.Product appropriately.
func (o *DTBProduct) AddProductDTBOrderItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBOrderItem) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `dtb_order_item` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"product_id"}),
				strmangle.WhereClause("`", "`", 0, dtbOrderItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &dtbProductR{
			ProductDTBOrderItems: related,
		}
	} else {
		o.R.ProductDTBOrderItems = append(o.R.ProductDTBOrderItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dtbOrderItemR{
				Product: o,
			}
		} else {
			rel.R.Product = o
		}
	}
	return nil
}

// SetProductDTBOrderItems removes all previously related items of the
// dtb_product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Product's ProductDTBOrderItems accordingly.
// Replaces o.R.ProductDTBOrderItems with related.
// Sets related.R.Product's ProductDTBOrderItems accordingly.
func (o *DTBProduct) SetProductDTBOrderItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBOrderItem) error {
	query := "update `dtb_order_item` set `product_id` = null where `product_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ProductDTBOrderItems {
			queries.SetScanner(&rel.ProductID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Product = nil
		}

		o.R.ProductDTBOrderItems = nil
	}
	return o.AddProductDTBOrderItems(ctx, exec, insert, related...)
}

// RemoveProductDTBOrderItems relationships from objects passed in.
// Removes related items from R.ProductDTBOrderItems (uses pointer comparison, removal does not keep order)
// Sets related.R.Product.
func (o *DTBProduct) RemoveProductDTBOrderItems(ctx context.Context, exec boil.ContextExecutor, related ...*DTBOrderItem) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductID, nil)
		if rel.R != nil {
			rel.R.Product = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("product_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductDTBOrderItems {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductDTBOrderItems)
			if ln > 1 && i < ln-1 {
				o.R.ProductDTBOrderItems[i] = o.R.ProductDTBOrderItems[ln-1]
			}
			o.R.ProductDTBOrderItems = o.R.ProductDTBOrderItems[:ln-1]
			break
		}
	}

	return nil
}

// AddProductDTBProductCategories adds the given related objects to the existing relationships
// of the dtb_product, optionally inserting them as new records.
// Appends related to o.R.ProductDTBProductCategories.
// Sets related.R.Product appropriately.
func (o *DTBProduct) AddProductDTBProductCategories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBProductCategory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `dtb_product_category` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"product_id"}),
				strmangle.WhereClause("`", "`", 0, dtbProductCategoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ProductID, rel.CategoryID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductID = o.ID
		}
	}

	if o.R == nil {
		o.R = &dtbProductR{
			ProductDTBProductCategories: related,
		}
	} else {
		o.R.ProductDTBProductCategories = append(o.R.ProductDTBProductCategories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dtbProductCategoryR{
				Product: o,
			}
		} else {
			rel.R.Product = o
		}
	}
	return nil
}

// AddProductDTBProductImages adds the given related objects to the existing relationships
// of the dtb_product, optionally inserting them as new records.
// Appends related to o.R.ProductDTBProductImages.
// Sets related.R.Product appropriately.
func (o *DTBProduct) AddProductDTBProductImages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBProductImage) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `dtb_product_image` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"product_id"}),
				strmangle.WhereClause("`", "`", 0, dtbProductImagePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &dtbProductR{
			ProductDTBProductImages: related,
		}
	} else {
		o.R.ProductDTBProductImages = append(o.R.ProductDTBProductImages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dtbProductImageR{
				Product: o,
			}
		} else {
			rel.R.Product = o
		}
	}
	return nil
}

// SetProductDTBProductImages removes all previously related items of the
// dtb_product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Product's ProductDTBProductImages accordingly.
// Replaces o.R.ProductDTBProductImages with related.
// Sets related.R.Product's ProductDTBProductImages accordingly.
func (o *DTBProduct) SetProductDTBProductImages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBProductImage) error {
	query := "update `dtb_product_image` set `product_id` = null where `product_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ProductDTBProductImages {
			queries.SetScanner(&rel.ProductID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Product = nil
		}

		o.R.ProductDTBProductImages = nil
	}
	return o.AddProductDTBProductImages(ctx, exec, insert, related...)
}

// RemoveProductDTBProductImages relationships from objects passed in.
// Removes related items from R.ProductDTBProductImages (uses pointer comparison, removal does not keep order)
// Sets related.R.Product.
func (o *DTBProduct) RemoveProductDTBProductImages(ctx context.Context, exec boil.ContextExecutor, related ...*DTBProductImage) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductID, nil)
		if rel.R != nil {
			rel.R.Product = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("product_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductDTBProductImages {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductDTBProductImages)
			if ln > 1 && i < ln-1 {
				o.R.ProductDTBProductImages[i] = o.R.ProductDTBProductImages[ln-1]
			}
			o.R.ProductDTBProductImages = o.R.ProductDTBProductImages[:ln-1]
			break
		}
	}

	return nil
}

// AddProductDTBProductTags adds the given related objects to the existing relationships
// of the dtb_product, optionally inserting them as new records.
// Appends related to o.R.ProductDTBProductTags.
// Sets related.R.Product appropriately.
func (o *DTBProduct) AddProductDTBProductTags(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBProductTag) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `dtb_product_tag` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"product_id"}),
				strmangle.WhereClause("`", "`", 0, dtbProductTagPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &dtbProductR{
			ProductDTBProductTags: related,
		}
	} else {
		o.R.ProductDTBProductTags = append(o.R.ProductDTBProductTags, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dtbProductTagR{
				Product: o,
			}
		} else {
			rel.R.Product = o
		}
	}
	return nil
}

// SetProductDTBProductTags removes all previously related items of the
// dtb_product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Product's ProductDTBProductTags accordingly.
// Replaces o.R.ProductDTBProductTags with related.
// Sets related.R.Product's ProductDTBProductTags accordingly.
func (o *DTBProduct) SetProductDTBProductTags(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBProductTag) error {
	query := "update `dtb_product_tag` set `product_id` = null where `product_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ProductDTBProductTags {
			queries.SetScanner(&rel.ProductID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Product = nil
		}

		o.R.ProductDTBProductTags = nil
	}
	return o.AddProductDTBProductTags(ctx, exec, insert, related...)
}

// RemoveProductDTBProductTags relationships from objects passed in.
// Removes related items from R.ProductDTBProductTags (uses pointer comparison, removal does not keep order)
// Sets related.R.Product.
func (o *DTBProduct) RemoveProductDTBProductTags(ctx context.Context, exec boil.ContextExecutor, related ...*DTBProductTag) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductID, nil)
		if rel.R != nil {
			rel.R.Product = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("product_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductDTBProductTags {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductDTBProductTags)
			if ln > 1 && i < ln-1 {
				o.R.ProductDTBProductTags[i] = o.R.ProductDTBProductTags[ln-1]
			}
			o.R.ProductDTBProductTags = o.R.ProductDTBProductTags[:ln-1]
			break
		}
	}

	return nil
}

// AddProductDTBTaxRules adds the given related objects to the existing relationships
// of the dtb_product, optionally inserting them as new records.
// Appends related to o.R.ProductDTBTaxRules.
// Sets related.R.Product appropriately.
func (o *DTBProduct) AddProductDTBTaxRules(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBTaxRule) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `dtb_tax_rule` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"product_id"}),
				strmangle.WhereClause("`", "`", 0, dtbTaxRulePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &dtbProductR{
			ProductDTBTaxRules: related,
		}
	} else {
		o.R.ProductDTBTaxRules = append(o.R.ProductDTBTaxRules, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dtbTaxRuleR{
				Product: o,
			}
		} else {
			rel.R.Product = o
		}
	}
	return nil
}

// SetProductDTBTaxRules removes all previously related items of the
// dtb_product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Product's ProductDTBTaxRules accordingly.
// Replaces o.R.ProductDTBTaxRules with related.
// Sets related.R.Product's ProductDTBTaxRules accordingly.
func (o *DTBProduct) SetProductDTBTaxRules(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBTaxRule) error {
	query := "update `dtb_tax_rule` set `product_id` = null where `product_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ProductDTBTaxRules {
			queries.SetScanner(&rel.ProductID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Product = nil
		}

		o.R.ProductDTBTaxRules = nil
	}
	return o.AddProductDTBTaxRules(ctx, exec, insert, related...)
}

// RemoveProductDTBTaxRules relationships from objects passed in.
// Removes related items from R.ProductDTBTaxRules (uses pointer comparison, removal does not keep order)
// Sets related.R.Product.
func (o *DTBProduct) RemoveProductDTBTaxRules(ctx context.Context, exec boil.ContextExecutor, related ...*DTBTaxRule) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductID, nil)
		if rel.R != nil {
			rel.R.Product = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("product_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductDTBTaxRules {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductDTBTaxRules)
			if ln > 1 && i < ln-1 {
				o.R.ProductDTBTaxRules[i] = o.R.ProductDTBTaxRules[ln-1]
			}
			o.R.ProductDTBTaxRules = o.R.ProductDTBTaxRules[:ln-1]
			break
		}
	}

	return nil
}

// DTBProducts retrieves all the records using an executor.
func DTBProducts(mods ...qm.QueryMod) dtbProductQuery {
	mods = append(mods, qm.From("`dtb_product`"))
	return dtbProductQuery{NewQuery(mods...)}
}

// FindDTBProduct retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDTBProduct(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*DTBProduct, error) {
	dtbProductObj := &DTBProduct{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `dtb_product` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, dtbProductObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from dtb_product")
	}

	return dtbProductObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DTBProduct) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no dtb_product provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dtbProductColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dtbProductInsertCacheMut.RLock()
	cache, cached := dtbProductInsertCache[key]
	dtbProductInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dtbProductColumns,
			dtbProductColumnsWithDefault,
			dtbProductColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dtbProductType, dtbProductMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dtbProductType, dtbProductMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `dtb_product` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `dtb_product` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `dtb_product` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dtbProductPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into dtb_product")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == dtbProductMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for dtb_product")
	}

CacheNoHooks:
	if !cached {
		dtbProductInsertCacheMut.Lock()
		dtbProductInsertCache[key] = cache
		dtbProductInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DTBProduct.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DTBProduct) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dtbProductUpdateCacheMut.RLock()
	cache, cached := dtbProductUpdateCache[key]
	dtbProductUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dtbProductColumns,
			dtbProductPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update dtb_product, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `dtb_product` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dtbProductPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dtbProductType, dtbProductMapping, append(wl, dtbProductPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update dtb_product row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for dtb_product")
	}

	if !cached {
		dtbProductUpdateCacheMut.Lock()
		dtbProductUpdateCache[key] = cache
		dtbProductUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dtbProductQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for dtb_product")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for dtb_product")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DTBProductSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `dtb_product` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbProductPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in dtbProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all dtbProduct")
	}
	return rowsAff, nil
}

var mySQLDTBProductUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DTBProduct) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no dtb_product provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dtbProductColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDTBProductUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dtbProductUpsertCacheMut.RLock()
	cache, cached := dtbProductUpsertCache[key]
	dtbProductUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dtbProductColumns,
			dtbProductColumnsWithDefault,
			dtbProductColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			dtbProductColumns,
			dtbProductPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("model: unable to upsert dtb_product, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "dtb_product", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `dtb_product` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dtbProductType, dtbProductMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dtbProductType, dtbProductMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for dtb_product")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == dtbProductMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dtbProductType, dtbProductMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for dtb_product")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for dtb_product")
	}

CacheNoHooks:
	if !cached {
		dtbProductUpsertCacheMut.Lock()
		dtbProductUpsertCache[key] = cache
		dtbProductUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DTBProduct record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DTBProduct) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no DTBProduct provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dtbProductPrimaryKeyMapping)
	sql := "DELETE FROM `dtb_product` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from dtb_product")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for dtb_product")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dtbProductQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no dtbProductQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from dtb_product")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for dtb_product")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DTBProductSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no DTBProduct slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(dtbProductBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `dtb_product` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbProductPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from dtbProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for dtb_product")
	}

	if len(dtbProductAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DTBProduct) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDTBProduct(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DTBProductSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DTBProductSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `dtb_product`.* FROM `dtb_product` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbProductPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in DTBProductSlice")
	}

	*o = slice

	return nil
}

// DTBProductExists checks if the DTBProduct row exists.
func DTBProductExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `dtb_product` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if dtb_product exists")
	}

	return exists, nil
}
