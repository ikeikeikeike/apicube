// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// DTBCSV is an object representing the database table.
type DTBCSV struct {
	ID                 uint        `boil:"id" json:"id" toml:"id" yaml:"id"`
	CSVTypeID          null.Uint16 `boil:"csv_type_id" json:"csv_type_id,omitempty" toml:"csv_type_id" yaml:"csv_type_id,omitempty"`
	CreatorID          null.Uint   `boil:"creator_id" json:"creator_id,omitempty" toml:"creator_id" yaml:"creator_id,omitempty"`
	EntityName         string      `boil:"entity_name" json:"entity_name" toml:"entity_name" yaml:"entity_name"`
	FieldName          string      `boil:"field_name" json:"field_name" toml:"field_name" yaml:"field_name"`
	ReferenceFieldName null.String `boil:"reference_field_name" json:"reference_field_name,omitempty" toml:"reference_field_name" yaml:"reference_field_name,omitempty"`
	DispName           string      `boil:"disp_name" json:"disp_name" toml:"disp_name" yaml:"disp_name"`
	SortNo             uint16      `boil:"sort_no" json:"sort_no" toml:"sort_no" yaml:"sort_no"`
	Enabled            bool        `boil:"enabled" json:"enabled" toml:"enabled" yaml:"enabled"`
	CreateDate         time.Time   `boil:"create_date" json:"create_date" toml:"create_date" yaml:"create_date"`
	UpdateDate         time.Time   `boil:"update_date" json:"update_date" toml:"update_date" yaml:"update_date"`
	DiscriminatorType  string      `boil:"discriminator_type" json:"discriminator_type" toml:"discriminator_type" yaml:"discriminator_type"`

	R *dtbCSVR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dtbCSVL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DTBCSVColumns = struct {
	ID                 string
	CSVTypeID          string
	CreatorID          string
	EntityName         string
	FieldName          string
	ReferenceFieldName string
	DispName           string
	SortNo             string
	Enabled            string
	CreateDate         string
	UpdateDate         string
	DiscriminatorType  string
}{
	ID:                 "id",
	CSVTypeID:          "csv_type_id",
	CreatorID:          "creator_id",
	EntityName:         "entity_name",
	FieldName:          "field_name",
	ReferenceFieldName: "reference_field_name",
	DispName:           "disp_name",
	SortNo:             "sort_no",
	Enabled:            "enabled",
	CreateDate:         "create_date",
	UpdateDate:         "update_date",
	DiscriminatorType:  "discriminator_type",
}

// Generated where

type whereHelperuint16 struct{ field string }

func (w whereHelperuint16) EQ(x uint16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint16) NEQ(x uint16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint16) LT(x uint16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint16) LTE(x uint16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint16) GT(x uint16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint16) GTE(x uint16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var DTBCSVWhere = struct {
	ID                 whereHelperuint
	CSVTypeID          whereHelpernull_Uint16
	CreatorID          whereHelpernull_Uint
	EntityName         whereHelperstring
	FieldName          whereHelperstring
	ReferenceFieldName whereHelpernull_String
	DispName           whereHelperstring
	SortNo             whereHelperuint16
	Enabled            whereHelperbool
	CreateDate         whereHelpertime_Time
	UpdateDate         whereHelpertime_Time
	DiscriminatorType  whereHelperstring
}{
	ID:                 whereHelperuint{field: `id`},
	CSVTypeID:          whereHelpernull_Uint16{field: `csv_type_id`},
	CreatorID:          whereHelpernull_Uint{field: `creator_id`},
	EntityName:         whereHelperstring{field: `entity_name`},
	FieldName:          whereHelperstring{field: `field_name`},
	ReferenceFieldName: whereHelpernull_String{field: `reference_field_name`},
	DispName:           whereHelperstring{field: `disp_name`},
	SortNo:             whereHelperuint16{field: `sort_no`},
	Enabled:            whereHelperbool{field: `enabled`},
	CreateDate:         whereHelpertime_Time{field: `create_date`},
	UpdateDate:         whereHelpertime_Time{field: `update_date`},
	DiscriminatorType:  whereHelperstring{field: `discriminator_type`},
}

// DTBCSVRels is where relationship names are stored.
var DTBCSVRels = struct {
	Creator string
	CSVType string
}{
	Creator: "Creator",
	CSVType: "CSVType",
}

// dtbCSVR is where relationships are stored.
type dtbCSVR struct {
	Creator *DTBMember
	CSVType *MTBCSVType
}

// NewStruct creates a new relationship struct
func (*dtbCSVR) NewStruct() *dtbCSVR {
	return &dtbCSVR{}
}

// dtbCSVL is where Load methods for each relationship are stored.
type dtbCSVL struct{}

var (
	dtbCSVColumns               = []string{"id", "csv_type_id", "creator_id", "entity_name", "field_name", "reference_field_name", "disp_name", "sort_no", "enabled", "create_date", "update_date", "discriminator_type"}
	dtbCSVColumnsWithoutDefault = []string{"csv_type_id", "creator_id", "entity_name", "field_name", "reference_field_name", "disp_name", "sort_no", "create_date", "update_date", "discriminator_type"}
	dtbCSVColumnsWithDefault    = []string{"id", "enabled"}
	dtbCSVPrimaryKeyColumns     = []string{"id"}
)

type (
	// DTBCSVSlice is an alias for a slice of pointers to DTBCSV.
	// This should generally be used opposed to []DTBCSV.
	DTBCSVSlice []*DTBCSV
	// DTBCSVHook is the signature for custom DTBCSV hook methods
	DTBCSVHook func(context.Context, boil.ContextExecutor, *DTBCSV) error

	dtbCSVQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dtbCSVType                 = reflect.TypeOf(&DTBCSV{})
	dtbCSVMapping              = queries.MakeStructMapping(dtbCSVType)
	dtbCSVPrimaryKeyMapping, _ = queries.BindMapping(dtbCSVType, dtbCSVMapping, dtbCSVPrimaryKeyColumns)
	dtbCSVInsertCacheMut       sync.RWMutex
	dtbCSVInsertCache          = make(map[string]insertCache)
	dtbCSVUpdateCacheMut       sync.RWMutex
	dtbCSVUpdateCache          = make(map[string]updateCache)
	dtbCSVUpsertCacheMut       sync.RWMutex
	dtbCSVUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dtbCSVBeforeInsertHooks []DTBCSVHook
var dtbCSVBeforeUpdateHooks []DTBCSVHook
var dtbCSVBeforeDeleteHooks []DTBCSVHook
var dtbCSVBeforeUpsertHooks []DTBCSVHook

var dtbCSVAfterInsertHooks []DTBCSVHook
var dtbCSVAfterSelectHooks []DTBCSVHook
var dtbCSVAfterUpdateHooks []DTBCSVHook
var dtbCSVAfterDeleteHooks []DTBCSVHook
var dtbCSVAfterUpsertHooks []DTBCSVHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DTBCSV) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCSVBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DTBCSV) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCSVBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DTBCSV) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCSVBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DTBCSV) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCSVBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DTBCSV) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCSVAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DTBCSV) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCSVAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DTBCSV) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCSVAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DTBCSV) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCSVAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DTBCSV) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCSVAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDTBCSVHook registers your hook function for all future operations.
func AddDTBCSVHook(hookPoint boil.HookPoint, dtbCSVHook DTBCSVHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		dtbCSVBeforeInsertHooks = append(dtbCSVBeforeInsertHooks, dtbCSVHook)
	case boil.BeforeUpdateHook:
		dtbCSVBeforeUpdateHooks = append(dtbCSVBeforeUpdateHooks, dtbCSVHook)
	case boil.BeforeDeleteHook:
		dtbCSVBeforeDeleteHooks = append(dtbCSVBeforeDeleteHooks, dtbCSVHook)
	case boil.BeforeUpsertHook:
		dtbCSVBeforeUpsertHooks = append(dtbCSVBeforeUpsertHooks, dtbCSVHook)
	case boil.AfterInsertHook:
		dtbCSVAfterInsertHooks = append(dtbCSVAfterInsertHooks, dtbCSVHook)
	case boil.AfterSelectHook:
		dtbCSVAfterSelectHooks = append(dtbCSVAfterSelectHooks, dtbCSVHook)
	case boil.AfterUpdateHook:
		dtbCSVAfterUpdateHooks = append(dtbCSVAfterUpdateHooks, dtbCSVHook)
	case boil.AfterDeleteHook:
		dtbCSVAfterDeleteHooks = append(dtbCSVAfterDeleteHooks, dtbCSVHook)
	case boil.AfterUpsertHook:
		dtbCSVAfterUpsertHooks = append(dtbCSVAfterUpsertHooks, dtbCSVHook)
	}
}

// One returns a single dtbCSV record from the query.
func (q dtbCSVQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DTBCSV, error) {
	o := &DTBCSV{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for dtb_csv")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DTBCSV records from the query.
func (q dtbCSVQuery) All(ctx context.Context, exec boil.ContextExecutor) (DTBCSVSlice, error) {
	var o []*DTBCSV

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to DTBCSV slice")
	}

	if len(dtbCSVAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DTBCSV records in the query.
func (q dtbCSVQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count dtb_csv rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dtbCSVQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if dtb_csv exists")
	}

	return count > 0, nil
}

// Creator pointed to by the foreign key.
func (o *DTBCSV) Creator(mods ...qm.QueryMod) dtbMemberQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.CreatorID),
	}

	queryMods = append(queryMods, mods...)

	query := DTBMembers(queryMods...)
	queries.SetFrom(query.Query, "`dtb_member`")

	return query
}

// CSVType pointed to by the foreign key.
func (o *DTBCSV) CSVType(mods ...qm.QueryMod) mtbCSVTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.CSVTypeID),
	}

	queryMods = append(queryMods, mods...)

	query := MTBCSVTypes(queryMods...)
	queries.SetFrom(query.Query, "`mtb_csv_type`")

	return query
}

// LoadCreator allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dtbCSVL) LoadCreator(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBCSV interface{}, mods queries.Applicator) error {
	var slice []*DTBCSV
	var object *DTBCSV

	if singular {
		object = maybeDTBCSV.(*DTBCSV)
	} else {
		slice = *maybeDTBCSV.(*[]*DTBCSV)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbCSVR{}
		}
		if !queries.IsNil(object.CreatorID) {
			args = append(args, object.CreatorID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbCSVR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CreatorID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CreatorID) {
				args = append(args, obj.CreatorID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_member`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DTBMember")
	}

	var resultSlice []*DTBMember
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DTBMember")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dtb_member")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_member")
	}

	if len(dtbCSVAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Creator = foreign
		if foreign.R == nil {
			foreign.R = &dtbMemberR{}
		}
		foreign.R.CreatorDTBCSVS = append(foreign.R.CreatorDTBCSVS, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CreatorID, foreign.ID) {
				local.R.Creator = foreign
				if foreign.R == nil {
					foreign.R = &dtbMemberR{}
				}
				foreign.R.CreatorDTBCSVS = append(foreign.R.CreatorDTBCSVS, local)
				break
			}
		}
	}

	return nil
}

// LoadCSVType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dtbCSVL) LoadCSVType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBCSV interface{}, mods queries.Applicator) error {
	var slice []*DTBCSV
	var object *DTBCSV

	if singular {
		object = maybeDTBCSV.(*DTBCSV)
	} else {
		slice = *maybeDTBCSV.(*[]*DTBCSV)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbCSVR{}
		}
		if !queries.IsNil(object.CSVTypeID) {
			args = append(args, object.CSVTypeID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbCSVR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CSVTypeID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CSVTypeID) {
				args = append(args, obj.CSVTypeID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`mtb_csv_type`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MTBCSVType")
	}

	var resultSlice []*MTBCSVType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MTBCSVType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mtb_csv_type")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mtb_csv_type")
	}

	if len(dtbCSVAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CSVType = foreign
		if foreign.R == nil {
			foreign.R = &mtbCSVTypeR{}
		}
		foreign.R.CSVTypeDTBCSVS = append(foreign.R.CSVTypeDTBCSVS, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CSVTypeID, foreign.ID) {
				local.R.CSVType = foreign
				if foreign.R == nil {
					foreign.R = &mtbCSVTypeR{}
				}
				foreign.R.CSVTypeDTBCSVS = append(foreign.R.CSVTypeDTBCSVS, local)
				break
			}
		}
	}

	return nil
}

// SetCreator of the dtbCSV to the related item.
// Sets o.R.Creator to related.
// Adds o to related.R.CreatorDTBCSVS.
func (o *DTBCSV) SetCreator(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DTBMember) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `dtb_csv` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"creator_id"}),
		strmangle.WhereClause("`", "`", 0, dtbCSVPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CreatorID, related.ID)
	if o.R == nil {
		o.R = &dtbCSVR{
			Creator: related,
		}
	} else {
		o.R.Creator = related
	}

	if related.R == nil {
		related.R = &dtbMemberR{
			CreatorDTBCSVS: DTBCSVSlice{o},
		}
	} else {
		related.R.CreatorDTBCSVS = append(related.R.CreatorDTBCSVS, o)
	}

	return nil
}

// RemoveCreator relationship.
// Sets o.R.Creator to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *DTBCSV) RemoveCreator(ctx context.Context, exec boil.ContextExecutor, related *DTBMember) error {
	var err error

	queries.SetScanner(&o.CreatorID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("creator_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Creator = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CreatorDTBCSVS {
		if queries.Equal(o.CreatorID, ri.CreatorID) {
			continue
		}

		ln := len(related.R.CreatorDTBCSVS)
		if ln > 1 && i < ln-1 {
			related.R.CreatorDTBCSVS[i] = related.R.CreatorDTBCSVS[ln-1]
		}
		related.R.CreatorDTBCSVS = related.R.CreatorDTBCSVS[:ln-1]
		break
	}
	return nil
}

// SetCSVType of the dtbCSV to the related item.
// Sets o.R.CSVType to related.
// Adds o to related.R.CSVTypeDTBCSVS.
func (o *DTBCSV) SetCSVType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MTBCSVType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `dtb_csv` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"csv_type_id"}),
		strmangle.WhereClause("`", "`", 0, dtbCSVPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CSVTypeID, related.ID)
	if o.R == nil {
		o.R = &dtbCSVR{
			CSVType: related,
		}
	} else {
		o.R.CSVType = related
	}

	if related.R == nil {
		related.R = &mtbCSVTypeR{
			CSVTypeDTBCSVS: DTBCSVSlice{o},
		}
	} else {
		related.R.CSVTypeDTBCSVS = append(related.R.CSVTypeDTBCSVS, o)
	}

	return nil
}

// RemoveCSVType relationship.
// Sets o.R.CSVType to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *DTBCSV) RemoveCSVType(ctx context.Context, exec boil.ContextExecutor, related *MTBCSVType) error {
	var err error

	queries.SetScanner(&o.CSVTypeID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("csv_type_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.CSVType = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CSVTypeDTBCSVS {
		if queries.Equal(o.CSVTypeID, ri.CSVTypeID) {
			continue
		}

		ln := len(related.R.CSVTypeDTBCSVS)
		if ln > 1 && i < ln-1 {
			related.R.CSVTypeDTBCSVS[i] = related.R.CSVTypeDTBCSVS[ln-1]
		}
		related.R.CSVTypeDTBCSVS = related.R.CSVTypeDTBCSVS[:ln-1]
		break
	}
	return nil
}

// DTBCSVS retrieves all the records using an executor.
func DTBCSVS(mods ...qm.QueryMod) dtbCSVQuery {
	mods = append(mods, qm.From("`dtb_csv`"))
	return dtbCSVQuery{NewQuery(mods...)}
}

// FindDTBCSV retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDTBCSV(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*DTBCSV, error) {
	dtbCSVObj := &DTBCSV{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `dtb_csv` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, dtbCSVObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from dtb_csv")
	}

	return dtbCSVObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DTBCSV) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no dtb_csv provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dtbCSVColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dtbCSVInsertCacheMut.RLock()
	cache, cached := dtbCSVInsertCache[key]
	dtbCSVInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dtbCSVColumns,
			dtbCSVColumnsWithDefault,
			dtbCSVColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dtbCSVType, dtbCSVMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dtbCSVType, dtbCSVMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `dtb_csv` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `dtb_csv` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `dtb_csv` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dtbCSVPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into dtb_csv")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == dtbCSVMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for dtb_csv")
	}

CacheNoHooks:
	if !cached {
		dtbCSVInsertCacheMut.Lock()
		dtbCSVInsertCache[key] = cache
		dtbCSVInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DTBCSV.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DTBCSV) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dtbCSVUpdateCacheMut.RLock()
	cache, cached := dtbCSVUpdateCache[key]
	dtbCSVUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dtbCSVColumns,
			dtbCSVPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update dtb_csv, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `dtb_csv` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dtbCSVPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dtbCSVType, dtbCSVMapping, append(wl, dtbCSVPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update dtb_csv row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for dtb_csv")
	}

	if !cached {
		dtbCSVUpdateCacheMut.Lock()
		dtbCSVUpdateCache[key] = cache
		dtbCSVUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dtbCSVQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for dtb_csv")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for dtb_csv")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DTBCSVSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbCSVPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `dtb_csv` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbCSVPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in dtbCSV slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all dtbCSV")
	}
	return rowsAff, nil
}

var mySQLDTBCSVUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DTBCSV) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no dtb_csv provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dtbCSVColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDTBCSVUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dtbCSVUpsertCacheMut.RLock()
	cache, cached := dtbCSVUpsertCache[key]
	dtbCSVUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dtbCSVColumns,
			dtbCSVColumnsWithDefault,
			dtbCSVColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			dtbCSVColumns,
			dtbCSVPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("model: unable to upsert dtb_csv, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "dtb_csv", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `dtb_csv` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dtbCSVType, dtbCSVMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dtbCSVType, dtbCSVMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for dtb_csv")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == dtbCSVMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dtbCSVType, dtbCSVMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for dtb_csv")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for dtb_csv")
	}

CacheNoHooks:
	if !cached {
		dtbCSVUpsertCacheMut.Lock()
		dtbCSVUpsertCache[key] = cache
		dtbCSVUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DTBCSV record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DTBCSV) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no DTBCSV provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dtbCSVPrimaryKeyMapping)
	sql := "DELETE FROM `dtb_csv` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from dtb_csv")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for dtb_csv")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dtbCSVQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no dtbCSVQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from dtb_csv")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for dtb_csv")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DTBCSVSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no DTBCSV slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(dtbCSVBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbCSVPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `dtb_csv` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbCSVPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from dtbCSV slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for dtb_csv")
	}

	if len(dtbCSVAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DTBCSV) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDTBCSV(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DTBCSVSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DTBCSVSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbCSVPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `dtb_csv`.* FROM `dtb_csv` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbCSVPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in DTBCSVSlice")
	}

	*o = slice

	return nil
}

// DTBCSVExists checks if the DTBCSV row exists.
func DTBCSVExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `dtb_csv` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if dtb_csv exists")
	}

	return exists, nil
}
