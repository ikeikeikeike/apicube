// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDTBBlockPositions(t *testing.T) {
	t.Parallel()

	query := DTBBlockPositions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDTBBlockPositionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBBlockPosition{}
	if err = randomize.Struct(seed, o, dtbBlockPositionDBTypes, true, dtbBlockPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlockPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBBlockPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBBlockPositionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBBlockPosition{}
	if err = randomize.Struct(seed, o, dtbBlockPositionDBTypes, true, dtbBlockPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlockPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DTBBlockPositions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBBlockPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBBlockPositionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBBlockPosition{}
	if err = randomize.Struct(seed, o, dtbBlockPositionDBTypes, true, dtbBlockPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlockPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBBlockPositionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBBlockPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBBlockPositionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBBlockPosition{}
	if err = randomize.Struct(seed, o, dtbBlockPositionDBTypes, true, dtbBlockPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlockPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DTBBlockPositionExists(ctx, tx, o.Section, o.BlockID, o.LayoutID)
	if err != nil {
		t.Errorf("Unable to check if DTBBlockPosition exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DTBBlockPositionExists to return true, but got false.")
	}
}

func testDTBBlockPositionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBBlockPosition{}
	if err = randomize.Struct(seed, o, dtbBlockPositionDBTypes, true, dtbBlockPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlockPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dtbBlockPositionFound, err := FindDTBBlockPosition(ctx, tx, o.Section, o.BlockID, o.LayoutID)
	if err != nil {
		t.Error(err)
	}

	if dtbBlockPositionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDTBBlockPositionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBBlockPosition{}
	if err = randomize.Struct(seed, o, dtbBlockPositionDBTypes, true, dtbBlockPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlockPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DTBBlockPositions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDTBBlockPositionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBBlockPosition{}
	if err = randomize.Struct(seed, o, dtbBlockPositionDBTypes, true, dtbBlockPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlockPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DTBBlockPositions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDTBBlockPositionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtbBlockPositionOne := &DTBBlockPosition{}
	dtbBlockPositionTwo := &DTBBlockPosition{}
	if err = randomize.Struct(seed, dtbBlockPositionOne, dtbBlockPositionDBTypes, false, dtbBlockPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlockPosition struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbBlockPositionTwo, dtbBlockPositionDBTypes, false, dtbBlockPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlockPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbBlockPositionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbBlockPositionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBBlockPositions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDTBBlockPositionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dtbBlockPositionOne := &DTBBlockPosition{}
	dtbBlockPositionTwo := &DTBBlockPosition{}
	if err = randomize.Struct(seed, dtbBlockPositionOne, dtbBlockPositionDBTypes, false, dtbBlockPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlockPosition struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbBlockPositionTwo, dtbBlockPositionDBTypes, false, dtbBlockPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlockPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbBlockPositionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbBlockPositionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBBlockPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dtbBlockPositionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBBlockPosition) error {
	*o = DTBBlockPosition{}
	return nil
}

func dtbBlockPositionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBBlockPosition) error {
	*o = DTBBlockPosition{}
	return nil
}

func dtbBlockPositionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DTBBlockPosition) error {
	*o = DTBBlockPosition{}
	return nil
}

func dtbBlockPositionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBBlockPosition) error {
	*o = DTBBlockPosition{}
	return nil
}

func dtbBlockPositionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBBlockPosition) error {
	*o = DTBBlockPosition{}
	return nil
}

func dtbBlockPositionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBBlockPosition) error {
	*o = DTBBlockPosition{}
	return nil
}

func dtbBlockPositionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBBlockPosition) error {
	*o = DTBBlockPosition{}
	return nil
}

func dtbBlockPositionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBBlockPosition) error {
	*o = DTBBlockPosition{}
	return nil
}

func dtbBlockPositionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBBlockPosition) error {
	*o = DTBBlockPosition{}
	return nil
}

func testDTBBlockPositionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DTBBlockPosition{}
	o := &DTBBlockPosition{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dtbBlockPositionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBBlockPosition object: %s", err)
	}

	AddDTBBlockPositionHook(boil.BeforeInsertHook, dtbBlockPositionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dtbBlockPositionBeforeInsertHooks = []DTBBlockPositionHook{}

	AddDTBBlockPositionHook(boil.AfterInsertHook, dtbBlockPositionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dtbBlockPositionAfterInsertHooks = []DTBBlockPositionHook{}

	AddDTBBlockPositionHook(boil.AfterSelectHook, dtbBlockPositionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dtbBlockPositionAfterSelectHooks = []DTBBlockPositionHook{}

	AddDTBBlockPositionHook(boil.BeforeUpdateHook, dtbBlockPositionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dtbBlockPositionBeforeUpdateHooks = []DTBBlockPositionHook{}

	AddDTBBlockPositionHook(boil.AfterUpdateHook, dtbBlockPositionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dtbBlockPositionAfterUpdateHooks = []DTBBlockPositionHook{}

	AddDTBBlockPositionHook(boil.BeforeDeleteHook, dtbBlockPositionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dtbBlockPositionBeforeDeleteHooks = []DTBBlockPositionHook{}

	AddDTBBlockPositionHook(boil.AfterDeleteHook, dtbBlockPositionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dtbBlockPositionAfterDeleteHooks = []DTBBlockPositionHook{}

	AddDTBBlockPositionHook(boil.BeforeUpsertHook, dtbBlockPositionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dtbBlockPositionBeforeUpsertHooks = []DTBBlockPositionHook{}

	AddDTBBlockPositionHook(boil.AfterUpsertHook, dtbBlockPositionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dtbBlockPositionAfterUpsertHooks = []DTBBlockPositionHook{}
}

func testDTBBlockPositionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBBlockPosition{}
	if err = randomize.Struct(seed, o, dtbBlockPositionDBTypes, true, dtbBlockPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlockPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBBlockPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBBlockPositionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBBlockPosition{}
	if err = randomize.Struct(seed, o, dtbBlockPositionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DTBBlockPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dtbBlockPositionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DTBBlockPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBBlockPositionToOneDTBLayoutUsingLayout(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBBlockPosition
	var foreign DTBLayout

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbBlockPositionDBTypes, false, dtbBlockPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlockPosition struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dtbLayoutDBTypes, false, dtbLayoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBLayout struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.LayoutID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Layout().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBBlockPositionSlice{&local}
	if err = local.L.LoadLayout(ctx, tx, false, (*[]*DTBBlockPosition)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Layout == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Layout = nil
	if err = local.L.LoadLayout(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Layout == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBBlockPositionToOneDTBBlockUsingBlock(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBBlockPosition
	var foreign DTBBlock

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbBlockPositionDBTypes, false, dtbBlockPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlockPosition struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dtbBlockDBTypes, false, dtbBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlock struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.BlockID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Block().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBBlockPositionSlice{&local}
	if err = local.L.LoadBlock(ctx, tx, false, (*[]*DTBBlockPosition)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Block == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Block = nil
	if err = local.L.LoadBlock(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Block == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBBlockPositionToOneSetOpDTBLayoutUsingLayout(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBBlockPosition
	var b, c DTBLayout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbBlockPositionDBTypes, false, strmangle.SetComplement(dtbBlockPositionPrimaryKeyColumns, dtbBlockPositionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbLayoutDBTypes, false, strmangle.SetComplement(dtbLayoutPrimaryKeyColumns, dtbLayoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbLayoutDBTypes, false, strmangle.SetComplement(dtbLayoutPrimaryKeyColumns, dtbLayoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DTBLayout{&b, &c} {
		err = a.SetLayout(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Layout != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.LayoutDTBBlockPositions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.LayoutID != x.ID {
			t.Error("foreign key was wrong value", a.LayoutID)
		}

		if exists, err := DTBBlockPositionExists(ctx, tx, a.Section, a.BlockID, a.LayoutID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testDTBBlockPositionToOneSetOpDTBBlockUsingBlock(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBBlockPosition
	var b, c DTBBlock

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbBlockPositionDBTypes, false, strmangle.SetComplement(dtbBlockPositionPrimaryKeyColumns, dtbBlockPositionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbBlockDBTypes, false, strmangle.SetComplement(dtbBlockPrimaryKeyColumns, dtbBlockColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbBlockDBTypes, false, strmangle.SetComplement(dtbBlockPrimaryKeyColumns, dtbBlockColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DTBBlock{&b, &c} {
		err = a.SetBlock(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Block != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.BlockDTBBlockPositions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.BlockID != x.ID {
			t.Error("foreign key was wrong value", a.BlockID)
		}

		if exists, err := DTBBlockPositionExists(ctx, tx, a.Section, a.BlockID, a.LayoutID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testDTBBlockPositionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBBlockPosition{}
	if err = randomize.Struct(seed, o, dtbBlockPositionDBTypes, true, dtbBlockPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlockPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBBlockPositionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBBlockPosition{}
	if err = randomize.Struct(seed, o, dtbBlockPositionDBTypes, true, dtbBlockPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlockPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBBlockPositionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBBlockPositionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBBlockPosition{}
	if err = randomize.Struct(seed, o, dtbBlockPositionDBTypes, true, dtbBlockPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlockPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBBlockPositions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dtbBlockPositionDBTypes = map[string]string{`Section`: `int`, `BlockID`: `int`, `LayoutID`: `int`, `BlockRow`: `int`, `DiscriminatorType`: `varchar`}
	_                       = bytes.MinRead
)

func testDTBBlockPositionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dtbBlockPositionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dtbBlockPositionColumns) == len(dtbBlockPositionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBBlockPosition{}
	if err = randomize.Struct(seed, o, dtbBlockPositionDBTypes, true, dtbBlockPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlockPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBBlockPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbBlockPositionDBTypes, true, dtbBlockPositionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBBlockPosition struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDTBBlockPositionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dtbBlockPositionColumns) == len(dtbBlockPositionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBBlockPosition{}
	if err = randomize.Struct(seed, o, dtbBlockPositionDBTypes, true, dtbBlockPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlockPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBBlockPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbBlockPositionDBTypes, true, dtbBlockPositionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBBlockPosition struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dtbBlockPositionColumns, dtbBlockPositionPrimaryKeyColumns) {
		fields = dtbBlockPositionColumns
	} else {
		fields = strmangle.SetComplement(
			dtbBlockPositionColumns,
			dtbBlockPositionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DTBBlockPositionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDTBBlockPositionsUpsert(t *testing.T) {
	t.Parallel()

	if len(dtbBlockPositionColumns) == len(dtbBlockPositionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDTBBlockPositionUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DTBBlockPosition{}
	if err = randomize.Struct(seed, &o, dtbBlockPositionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBBlockPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBBlockPosition: %s", err)
	}

	count, err := DTBBlockPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dtbBlockPositionDBTypes, false, dtbBlockPositionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBBlockPosition struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBBlockPosition: %s", err)
	}

	count, err = DTBBlockPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
