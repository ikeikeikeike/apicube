// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDTBDeliveries(t *testing.T) {
	t.Parallel()

	query := DTBDeliveries()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDTBDeliveriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBDelivery{}
	if err = randomize.Struct(seed, o, dtbDeliveryDBTypes, true, dtbDeliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDelivery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBDeliveries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBDeliveriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBDelivery{}
	if err = randomize.Struct(seed, o, dtbDeliveryDBTypes, true, dtbDeliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDelivery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DTBDeliveries().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBDeliveries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBDeliveriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBDelivery{}
	if err = randomize.Struct(seed, o, dtbDeliveryDBTypes, true, dtbDeliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDelivery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBDeliverySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBDeliveries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBDeliveriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBDelivery{}
	if err = randomize.Struct(seed, o, dtbDeliveryDBTypes, true, dtbDeliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDelivery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DTBDeliveryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DTBDelivery exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DTBDeliveryExists to return true, but got false.")
	}
}

func testDTBDeliveriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBDelivery{}
	if err = randomize.Struct(seed, o, dtbDeliveryDBTypes, true, dtbDeliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDelivery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dtbDeliveryFound, err := FindDTBDelivery(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if dtbDeliveryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDTBDeliveriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBDelivery{}
	if err = randomize.Struct(seed, o, dtbDeliveryDBTypes, true, dtbDeliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDelivery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DTBDeliveries().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDTBDeliveriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBDelivery{}
	if err = randomize.Struct(seed, o, dtbDeliveryDBTypes, true, dtbDeliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDelivery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DTBDeliveries().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDTBDeliveriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtbDeliveryOne := &DTBDelivery{}
	dtbDeliveryTwo := &DTBDelivery{}
	if err = randomize.Struct(seed, dtbDeliveryOne, dtbDeliveryDBTypes, false, dtbDeliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDelivery struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbDeliveryTwo, dtbDeliveryDBTypes, false, dtbDeliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDelivery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbDeliveryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbDeliveryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBDeliveries().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDTBDeliveriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dtbDeliveryOne := &DTBDelivery{}
	dtbDeliveryTwo := &DTBDelivery{}
	if err = randomize.Struct(seed, dtbDeliveryOne, dtbDeliveryDBTypes, false, dtbDeliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDelivery struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbDeliveryTwo, dtbDeliveryDBTypes, false, dtbDeliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDelivery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbDeliveryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbDeliveryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBDeliveries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dtbDeliveryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBDelivery) error {
	*o = DTBDelivery{}
	return nil
}

func dtbDeliveryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBDelivery) error {
	*o = DTBDelivery{}
	return nil
}

func dtbDeliveryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DTBDelivery) error {
	*o = DTBDelivery{}
	return nil
}

func dtbDeliveryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBDelivery) error {
	*o = DTBDelivery{}
	return nil
}

func dtbDeliveryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBDelivery) error {
	*o = DTBDelivery{}
	return nil
}

func dtbDeliveryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBDelivery) error {
	*o = DTBDelivery{}
	return nil
}

func dtbDeliveryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBDelivery) error {
	*o = DTBDelivery{}
	return nil
}

func dtbDeliveryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBDelivery) error {
	*o = DTBDelivery{}
	return nil
}

func dtbDeliveryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBDelivery) error {
	*o = DTBDelivery{}
	return nil
}

func testDTBDeliveriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DTBDelivery{}
	o := &DTBDelivery{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dtbDeliveryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBDelivery object: %s", err)
	}

	AddDTBDeliveryHook(boil.BeforeInsertHook, dtbDeliveryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dtbDeliveryBeforeInsertHooks = []DTBDeliveryHook{}

	AddDTBDeliveryHook(boil.AfterInsertHook, dtbDeliveryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dtbDeliveryAfterInsertHooks = []DTBDeliveryHook{}

	AddDTBDeliveryHook(boil.AfterSelectHook, dtbDeliveryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dtbDeliveryAfterSelectHooks = []DTBDeliveryHook{}

	AddDTBDeliveryHook(boil.BeforeUpdateHook, dtbDeliveryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dtbDeliveryBeforeUpdateHooks = []DTBDeliveryHook{}

	AddDTBDeliveryHook(boil.AfterUpdateHook, dtbDeliveryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dtbDeliveryAfterUpdateHooks = []DTBDeliveryHook{}

	AddDTBDeliveryHook(boil.BeforeDeleteHook, dtbDeliveryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dtbDeliveryBeforeDeleteHooks = []DTBDeliveryHook{}

	AddDTBDeliveryHook(boil.AfterDeleteHook, dtbDeliveryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dtbDeliveryAfterDeleteHooks = []DTBDeliveryHook{}

	AddDTBDeliveryHook(boil.BeforeUpsertHook, dtbDeliveryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dtbDeliveryBeforeUpsertHooks = []DTBDeliveryHook{}

	AddDTBDeliveryHook(boil.AfterUpsertHook, dtbDeliveryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dtbDeliveryAfterUpsertHooks = []DTBDeliveryHook{}
}

func testDTBDeliveriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBDelivery{}
	if err = randomize.Struct(seed, o, dtbDeliveryDBTypes, true, dtbDeliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDelivery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBDeliveries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBDeliveriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBDelivery{}
	if err = randomize.Struct(seed, o, dtbDeliveryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DTBDelivery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dtbDeliveryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DTBDeliveries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBDeliveryToManyDeliveryDTBDeliveryFees(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBDelivery
	var b, c DTBDeliveryFee

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbDeliveryDBTypes, true, dtbDeliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDelivery struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbDeliveryFeeDBTypes, false, dtbDeliveryFeeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbDeliveryFeeDBTypes, false, dtbDeliveryFeeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.DeliveryID, a.ID)
	queries.Assign(&c.DeliveryID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DeliveryDTBDeliveryFees().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.DeliveryID, b.DeliveryID) {
			bFound = true
		}
		if queries.Equal(v.DeliveryID, c.DeliveryID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBDeliverySlice{&a}
	if err = a.L.LoadDeliveryDTBDeliveryFees(ctx, tx, false, (*[]*DTBDelivery)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DeliveryDTBDeliveryFees); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DeliveryDTBDeliveryFees = nil
	if err = a.L.LoadDeliveryDTBDeliveryFees(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DeliveryDTBDeliveryFees); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBDeliveryToManyDeliveryDTBDeliveryTimes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBDelivery
	var b, c DTBDeliveryTime

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbDeliveryDBTypes, true, dtbDeliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDelivery struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbDeliveryTimeDBTypes, false, dtbDeliveryTimeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbDeliveryTimeDBTypes, false, dtbDeliveryTimeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.DeliveryID, a.ID)
	queries.Assign(&c.DeliveryID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DeliveryDTBDeliveryTimes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.DeliveryID, b.DeliveryID) {
			bFound = true
		}
		if queries.Equal(v.DeliveryID, c.DeliveryID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBDeliverySlice{&a}
	if err = a.L.LoadDeliveryDTBDeliveryTimes(ctx, tx, false, (*[]*DTBDelivery)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DeliveryDTBDeliveryTimes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DeliveryDTBDeliveryTimes = nil
	if err = a.L.LoadDeliveryDTBDeliveryTimes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DeliveryDTBDeliveryTimes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBDeliveryToManyDeliveryDTBPaymentOptions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBDelivery
	var b, c DTBPaymentOption

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbDeliveryDBTypes, true, dtbDeliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDelivery struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbPaymentOptionDBTypes, false, dtbPaymentOptionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbPaymentOptionDBTypes, false, dtbPaymentOptionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.DeliveryID = a.ID
	c.DeliveryID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DeliveryDTBPaymentOptions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.DeliveryID == b.DeliveryID {
			bFound = true
		}
		if v.DeliveryID == c.DeliveryID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBDeliverySlice{&a}
	if err = a.L.LoadDeliveryDTBPaymentOptions(ctx, tx, false, (*[]*DTBDelivery)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DeliveryDTBPaymentOptions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DeliveryDTBPaymentOptions = nil
	if err = a.L.LoadDeliveryDTBPaymentOptions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DeliveryDTBPaymentOptions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBDeliveryToManyDeliveryDTBShippings(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBDelivery
	var b, c DTBShipping

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbDeliveryDBTypes, true, dtbDeliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDelivery struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbShippingDBTypes, false, dtbShippingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbShippingDBTypes, false, dtbShippingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.DeliveryID, a.ID)
	queries.Assign(&c.DeliveryID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DeliveryDTBShippings().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.DeliveryID, b.DeliveryID) {
			bFound = true
		}
		if queries.Equal(v.DeliveryID, c.DeliveryID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBDeliverySlice{&a}
	if err = a.L.LoadDeliveryDTBShippings(ctx, tx, false, (*[]*DTBDelivery)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DeliveryDTBShippings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DeliveryDTBShippings = nil
	if err = a.L.LoadDeliveryDTBShippings(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DeliveryDTBShippings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBDeliveryToManyAddOpDeliveryDTBDeliveryFees(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBDelivery
	var b, c, d, e DTBDeliveryFee

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbDeliveryDBTypes, false, strmangle.SetComplement(dtbDeliveryPrimaryKeyColumns, dtbDeliveryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBDeliveryFee{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbDeliveryFeeDBTypes, false, strmangle.SetComplement(dtbDeliveryFeePrimaryKeyColumns, dtbDeliveryFeeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBDeliveryFee{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDeliveryDTBDeliveryFees(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.DeliveryID) {
			t.Error("foreign key was wrong value", a.ID, first.DeliveryID)
		}
		if !queries.Equal(a.ID, second.DeliveryID) {
			t.Error("foreign key was wrong value", a.ID, second.DeliveryID)
		}

		if first.R.Delivery != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Delivery != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DeliveryDTBDeliveryFees[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DeliveryDTBDeliveryFees[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DeliveryDTBDeliveryFees().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDTBDeliveryToManySetOpDeliveryDTBDeliveryFees(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBDelivery
	var b, c, d, e DTBDeliveryFee

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbDeliveryDBTypes, false, strmangle.SetComplement(dtbDeliveryPrimaryKeyColumns, dtbDeliveryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBDeliveryFee{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbDeliveryFeeDBTypes, false, strmangle.SetComplement(dtbDeliveryFeePrimaryKeyColumns, dtbDeliveryFeeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetDeliveryDTBDeliveryFees(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.DeliveryDTBDeliveryFees().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetDeliveryDTBDeliveryFees(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.DeliveryDTBDeliveryFees().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.DeliveryID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.DeliveryID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.DeliveryID) {
		t.Error("foreign key was wrong value", a.ID, d.DeliveryID)
	}
	if !queries.Equal(a.ID, e.DeliveryID) {
		t.Error("foreign key was wrong value", a.ID, e.DeliveryID)
	}

	if b.R.Delivery != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Delivery != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Delivery != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Delivery != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.DeliveryDTBDeliveryFees[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.DeliveryDTBDeliveryFees[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDTBDeliveryToManyRemoveOpDeliveryDTBDeliveryFees(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBDelivery
	var b, c, d, e DTBDeliveryFee

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbDeliveryDBTypes, false, strmangle.SetComplement(dtbDeliveryPrimaryKeyColumns, dtbDeliveryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBDeliveryFee{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbDeliveryFeeDBTypes, false, strmangle.SetComplement(dtbDeliveryFeePrimaryKeyColumns, dtbDeliveryFeeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddDeliveryDTBDeliveryFees(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.DeliveryDTBDeliveryFees().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveDeliveryDTBDeliveryFees(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.DeliveryDTBDeliveryFees().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.DeliveryID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.DeliveryID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Delivery != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Delivery != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Delivery != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Delivery != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.DeliveryDTBDeliveryFees) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.DeliveryDTBDeliveryFees[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.DeliveryDTBDeliveryFees[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDTBDeliveryToManyAddOpDeliveryDTBDeliveryTimes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBDelivery
	var b, c, d, e DTBDeliveryTime

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbDeliveryDBTypes, false, strmangle.SetComplement(dtbDeliveryPrimaryKeyColumns, dtbDeliveryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBDeliveryTime{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbDeliveryTimeDBTypes, false, strmangle.SetComplement(dtbDeliveryTimePrimaryKeyColumns, dtbDeliveryTimeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBDeliveryTime{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDeliveryDTBDeliveryTimes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.DeliveryID) {
			t.Error("foreign key was wrong value", a.ID, first.DeliveryID)
		}
		if !queries.Equal(a.ID, second.DeliveryID) {
			t.Error("foreign key was wrong value", a.ID, second.DeliveryID)
		}

		if first.R.Delivery != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Delivery != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DeliveryDTBDeliveryTimes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DeliveryDTBDeliveryTimes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DeliveryDTBDeliveryTimes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDTBDeliveryToManySetOpDeliveryDTBDeliveryTimes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBDelivery
	var b, c, d, e DTBDeliveryTime

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbDeliveryDBTypes, false, strmangle.SetComplement(dtbDeliveryPrimaryKeyColumns, dtbDeliveryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBDeliveryTime{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbDeliveryTimeDBTypes, false, strmangle.SetComplement(dtbDeliveryTimePrimaryKeyColumns, dtbDeliveryTimeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetDeliveryDTBDeliveryTimes(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.DeliveryDTBDeliveryTimes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetDeliveryDTBDeliveryTimes(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.DeliveryDTBDeliveryTimes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.DeliveryID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.DeliveryID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.DeliveryID) {
		t.Error("foreign key was wrong value", a.ID, d.DeliveryID)
	}
	if !queries.Equal(a.ID, e.DeliveryID) {
		t.Error("foreign key was wrong value", a.ID, e.DeliveryID)
	}

	if b.R.Delivery != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Delivery != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Delivery != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Delivery != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.DeliveryDTBDeliveryTimes[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.DeliveryDTBDeliveryTimes[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDTBDeliveryToManyRemoveOpDeliveryDTBDeliveryTimes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBDelivery
	var b, c, d, e DTBDeliveryTime

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbDeliveryDBTypes, false, strmangle.SetComplement(dtbDeliveryPrimaryKeyColumns, dtbDeliveryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBDeliveryTime{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbDeliveryTimeDBTypes, false, strmangle.SetComplement(dtbDeliveryTimePrimaryKeyColumns, dtbDeliveryTimeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddDeliveryDTBDeliveryTimes(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.DeliveryDTBDeliveryTimes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveDeliveryDTBDeliveryTimes(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.DeliveryDTBDeliveryTimes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.DeliveryID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.DeliveryID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Delivery != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Delivery != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Delivery != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Delivery != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.DeliveryDTBDeliveryTimes) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.DeliveryDTBDeliveryTimes[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.DeliveryDTBDeliveryTimes[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDTBDeliveryToManyAddOpDeliveryDTBPaymentOptions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBDelivery
	var b, c, d, e DTBPaymentOption

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbDeliveryDBTypes, false, strmangle.SetComplement(dtbDeliveryPrimaryKeyColumns, dtbDeliveryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBPaymentOption{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbPaymentOptionDBTypes, false, strmangle.SetComplement(dtbPaymentOptionPrimaryKeyColumns, dtbPaymentOptionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBPaymentOption{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDeliveryDTBPaymentOptions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.DeliveryID {
			t.Error("foreign key was wrong value", a.ID, first.DeliveryID)
		}
		if a.ID != second.DeliveryID {
			t.Error("foreign key was wrong value", a.ID, second.DeliveryID)
		}

		if first.R.Delivery != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Delivery != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DeliveryDTBPaymentOptions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DeliveryDTBPaymentOptions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DeliveryDTBPaymentOptions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testDTBDeliveryToManyAddOpDeliveryDTBShippings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBDelivery
	var b, c, d, e DTBShipping

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbDeliveryDBTypes, false, strmangle.SetComplement(dtbDeliveryPrimaryKeyColumns, dtbDeliveryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBShipping{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbShippingDBTypes, false, strmangle.SetComplement(dtbShippingPrimaryKeyColumns, dtbShippingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBShipping{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDeliveryDTBShippings(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.DeliveryID) {
			t.Error("foreign key was wrong value", a.ID, first.DeliveryID)
		}
		if !queries.Equal(a.ID, second.DeliveryID) {
			t.Error("foreign key was wrong value", a.ID, second.DeliveryID)
		}

		if first.R.Delivery != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Delivery != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DeliveryDTBShippings[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DeliveryDTBShippings[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DeliveryDTBShippings().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDTBDeliveryToManySetOpDeliveryDTBShippings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBDelivery
	var b, c, d, e DTBShipping

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbDeliveryDBTypes, false, strmangle.SetComplement(dtbDeliveryPrimaryKeyColumns, dtbDeliveryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBShipping{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbShippingDBTypes, false, strmangle.SetComplement(dtbShippingPrimaryKeyColumns, dtbShippingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetDeliveryDTBShippings(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.DeliveryDTBShippings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetDeliveryDTBShippings(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.DeliveryDTBShippings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.DeliveryID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.DeliveryID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.DeliveryID) {
		t.Error("foreign key was wrong value", a.ID, d.DeliveryID)
	}
	if !queries.Equal(a.ID, e.DeliveryID) {
		t.Error("foreign key was wrong value", a.ID, e.DeliveryID)
	}

	if b.R.Delivery != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Delivery != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Delivery != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Delivery != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.DeliveryDTBShippings[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.DeliveryDTBShippings[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDTBDeliveryToManyRemoveOpDeliveryDTBShippings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBDelivery
	var b, c, d, e DTBShipping

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbDeliveryDBTypes, false, strmangle.SetComplement(dtbDeliveryPrimaryKeyColumns, dtbDeliveryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBShipping{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbShippingDBTypes, false, strmangle.SetComplement(dtbShippingPrimaryKeyColumns, dtbShippingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddDeliveryDTBShippings(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.DeliveryDTBShippings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveDeliveryDTBShippings(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.DeliveryDTBShippings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.DeliveryID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.DeliveryID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Delivery != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Delivery != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Delivery != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Delivery != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.DeliveryDTBShippings) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.DeliveryDTBShippings[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.DeliveryDTBShippings[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDTBDeliveryToOneMTBSaleTypeUsingSaleType(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBDelivery
	var foreign MTBSaleType

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbDeliveryDBTypes, true, dtbDeliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDelivery struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, mtbSaleTypeDBTypes, false, mtbSaleTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBSaleType struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.SaleTypeID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.SaleType().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBDeliverySlice{&local}
	if err = local.L.LoadSaleType(ctx, tx, false, (*[]*DTBDelivery)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SaleType == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SaleType = nil
	if err = local.L.LoadSaleType(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SaleType == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBDeliveryToOneSetOpMTBSaleTypeUsingSaleType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBDelivery
	var b, c MTBSaleType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbDeliveryDBTypes, false, strmangle.SetComplement(dtbDeliveryPrimaryKeyColumns, dtbDeliveryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbSaleTypeDBTypes, false, strmangle.SetComplement(mtbSaleTypePrimaryKeyColumns, mtbSaleTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mtbSaleTypeDBTypes, false, strmangle.SetComplement(mtbSaleTypePrimaryKeyColumns, mtbSaleTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MTBSaleType{&b, &c} {
		err = a.SetSaleType(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SaleType != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SaleTypeDTBDeliveries[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.SaleTypeID, x.ID) {
			t.Error("foreign key was wrong value", a.SaleTypeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SaleTypeID))
		reflect.Indirect(reflect.ValueOf(&a.SaleTypeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.SaleTypeID, x.ID) {
			t.Error("foreign key was wrong value", a.SaleTypeID, x.ID)
		}
	}
}

func testDTBDeliveryToOneRemoveOpMTBSaleTypeUsingSaleType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBDelivery
	var b MTBSaleType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbDeliveryDBTypes, false, strmangle.SetComplement(dtbDeliveryPrimaryKeyColumns, dtbDeliveryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbSaleTypeDBTypes, false, strmangle.SetComplement(mtbSaleTypePrimaryKeyColumns, mtbSaleTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSaleType(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSaleType(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.SaleType().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.SaleType != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.SaleTypeID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.SaleTypeDTBDeliveries) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBDeliveriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBDelivery{}
	if err = randomize.Struct(seed, o, dtbDeliveryDBTypes, true, dtbDeliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDelivery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBDeliveriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBDelivery{}
	if err = randomize.Struct(seed, o, dtbDeliveryDBTypes, true, dtbDeliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDelivery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBDeliverySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBDeliveriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBDelivery{}
	if err = randomize.Struct(seed, o, dtbDeliveryDBTypes, true, dtbDeliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDelivery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBDeliveries().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dtbDeliveryDBTypes = map[string]string{`ID`: `int`, `CreatorID`: `int`, `SaleTypeID`: `smallint`, `Name`: `varchar`, `ServiceName`: `varchar`, `Description`: `varchar`, `ConfirmURL`: `varchar`, `SortNo`: `int`, `Visible`: `tinyint`, `CreateDate`: `datetime`, `UpdateDate`: `datetime`, `DiscriminatorType`: `varchar`}
	_                  = bytes.MinRead
)

func testDTBDeliveriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dtbDeliveryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dtbDeliveryColumns) == len(dtbDeliveryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBDelivery{}
	if err = randomize.Struct(seed, o, dtbDeliveryDBTypes, true, dtbDeliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDelivery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBDeliveries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbDeliveryDBTypes, true, dtbDeliveryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBDelivery struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDTBDeliveriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dtbDeliveryColumns) == len(dtbDeliveryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBDelivery{}
	if err = randomize.Struct(seed, o, dtbDeliveryDBTypes, true, dtbDeliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDelivery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBDeliveries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbDeliveryDBTypes, true, dtbDeliveryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBDelivery struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dtbDeliveryColumns, dtbDeliveryPrimaryKeyColumns) {
		fields = dtbDeliveryColumns
	} else {
		fields = strmangle.SetComplement(
			dtbDeliveryColumns,
			dtbDeliveryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DTBDeliverySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDTBDeliveriesUpsert(t *testing.T) {
	t.Parallel()

	if len(dtbDeliveryColumns) == len(dtbDeliveryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDTBDeliveryUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DTBDelivery{}
	if err = randomize.Struct(seed, &o, dtbDeliveryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBDelivery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBDelivery: %s", err)
	}

	count, err := DTBDeliveries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dtbDeliveryDBTypes, false, dtbDeliveryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBDelivery struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBDelivery: %s", err)
	}

	count, err = DTBDeliveries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
