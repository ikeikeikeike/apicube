// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// DTBProductCategory is an object representing the database table.
type DTBProductCategory struct {
	ProductID         uint   `boil:"product_id" json:"product_id" toml:"product_id" yaml:"product_id"`
	CategoryID        uint   `boil:"category_id" json:"category_id" toml:"category_id" yaml:"category_id"`
	DiscriminatorType string `boil:"discriminator_type" json:"discriminator_type" toml:"discriminator_type" yaml:"discriminator_type"`

	R *dtbProductCategoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dtbProductCategoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DTBProductCategoryColumns = struct {
	ProductID         string
	CategoryID        string
	DiscriminatorType string
}{
	ProductID:         "product_id",
	CategoryID:        "category_id",
	DiscriminatorType: "discriminator_type",
}

// Generated where

var DTBProductCategoryWhere = struct {
	ProductID         whereHelperuint
	CategoryID        whereHelperuint
	DiscriminatorType whereHelperstring
}{
	ProductID:         whereHelperuint{field: `product_id`},
	CategoryID:        whereHelperuint{field: `category_id`},
	DiscriminatorType: whereHelperstring{field: `discriminator_type`},
}

// DTBProductCategoryRels is where relationship names are stored.
var DTBProductCategoryRels = struct {
	Product string
}{
	Product: "Product",
}

// dtbProductCategoryR is where relationships are stored.
type dtbProductCategoryR struct {
	Product *DTBProduct
}

// NewStruct creates a new relationship struct
func (*dtbProductCategoryR) NewStruct() *dtbProductCategoryR {
	return &dtbProductCategoryR{}
}

// dtbProductCategoryL is where Load methods for each relationship are stored.
type dtbProductCategoryL struct{}

var (
	dtbProductCategoryColumns               = []string{"product_id", "category_id", "discriminator_type"}
	dtbProductCategoryColumnsWithoutDefault = []string{"product_id", "category_id", "discriminator_type"}
	dtbProductCategoryColumnsWithDefault    = []string{}
	dtbProductCategoryPrimaryKeyColumns     = []string{"product_id", "category_id"}
)

type (
	// DTBProductCategorySlice is an alias for a slice of pointers to DTBProductCategory.
	// This should generally be used opposed to []DTBProductCategory.
	DTBProductCategorySlice []*DTBProductCategory
	// DTBProductCategoryHook is the signature for custom DTBProductCategory hook methods
	DTBProductCategoryHook func(context.Context, boil.ContextExecutor, *DTBProductCategory) error

	dtbProductCategoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dtbProductCategoryType                 = reflect.TypeOf(&DTBProductCategory{})
	dtbProductCategoryMapping              = queries.MakeStructMapping(dtbProductCategoryType)
	dtbProductCategoryPrimaryKeyMapping, _ = queries.BindMapping(dtbProductCategoryType, dtbProductCategoryMapping, dtbProductCategoryPrimaryKeyColumns)
	dtbProductCategoryInsertCacheMut       sync.RWMutex
	dtbProductCategoryInsertCache          = make(map[string]insertCache)
	dtbProductCategoryUpdateCacheMut       sync.RWMutex
	dtbProductCategoryUpdateCache          = make(map[string]updateCache)
	dtbProductCategoryUpsertCacheMut       sync.RWMutex
	dtbProductCategoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dtbProductCategoryBeforeInsertHooks []DTBProductCategoryHook
var dtbProductCategoryBeforeUpdateHooks []DTBProductCategoryHook
var dtbProductCategoryBeforeDeleteHooks []DTBProductCategoryHook
var dtbProductCategoryBeforeUpsertHooks []DTBProductCategoryHook

var dtbProductCategoryAfterInsertHooks []DTBProductCategoryHook
var dtbProductCategoryAfterSelectHooks []DTBProductCategoryHook
var dtbProductCategoryAfterUpdateHooks []DTBProductCategoryHook
var dtbProductCategoryAfterDeleteHooks []DTBProductCategoryHook
var dtbProductCategoryAfterUpsertHooks []DTBProductCategoryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DTBProductCategory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbProductCategoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DTBProductCategory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbProductCategoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DTBProductCategory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbProductCategoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DTBProductCategory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbProductCategoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DTBProductCategory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbProductCategoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DTBProductCategory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbProductCategoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DTBProductCategory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbProductCategoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DTBProductCategory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbProductCategoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DTBProductCategory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbProductCategoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDTBProductCategoryHook registers your hook function for all future operations.
func AddDTBProductCategoryHook(hookPoint boil.HookPoint, dtbProductCategoryHook DTBProductCategoryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		dtbProductCategoryBeforeInsertHooks = append(dtbProductCategoryBeforeInsertHooks, dtbProductCategoryHook)
	case boil.BeforeUpdateHook:
		dtbProductCategoryBeforeUpdateHooks = append(dtbProductCategoryBeforeUpdateHooks, dtbProductCategoryHook)
	case boil.BeforeDeleteHook:
		dtbProductCategoryBeforeDeleteHooks = append(dtbProductCategoryBeforeDeleteHooks, dtbProductCategoryHook)
	case boil.BeforeUpsertHook:
		dtbProductCategoryBeforeUpsertHooks = append(dtbProductCategoryBeforeUpsertHooks, dtbProductCategoryHook)
	case boil.AfterInsertHook:
		dtbProductCategoryAfterInsertHooks = append(dtbProductCategoryAfterInsertHooks, dtbProductCategoryHook)
	case boil.AfterSelectHook:
		dtbProductCategoryAfterSelectHooks = append(dtbProductCategoryAfterSelectHooks, dtbProductCategoryHook)
	case boil.AfterUpdateHook:
		dtbProductCategoryAfterUpdateHooks = append(dtbProductCategoryAfterUpdateHooks, dtbProductCategoryHook)
	case boil.AfterDeleteHook:
		dtbProductCategoryAfterDeleteHooks = append(dtbProductCategoryAfterDeleteHooks, dtbProductCategoryHook)
	case boil.AfterUpsertHook:
		dtbProductCategoryAfterUpsertHooks = append(dtbProductCategoryAfterUpsertHooks, dtbProductCategoryHook)
	}
}

// One returns a single dtbProductCategory record from the query.
func (q dtbProductCategoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DTBProductCategory, error) {
	o := &DTBProductCategory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for dtb_product_category")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DTBProductCategory records from the query.
func (q dtbProductCategoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (DTBProductCategorySlice, error) {
	var o []*DTBProductCategory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to DTBProductCategory slice")
	}

	if len(dtbProductCategoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DTBProductCategory records in the query.
func (q dtbProductCategoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count dtb_product_category rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dtbProductCategoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if dtb_product_category exists")
	}

	return count > 0, nil
}

// Product pointed to by the foreign key.
func (o *DTBProductCategory) Product(mods ...qm.QueryMod) dtbProductQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	query := DTBProducts(queryMods...)
	queries.SetFrom(query.Query, "`dtb_product`")

	return query
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dtbProductCategoryL) LoadProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBProductCategory interface{}, mods queries.Applicator) error {
	var slice []*DTBProductCategory
	var object *DTBProductCategory

	if singular {
		object = maybeDTBProductCategory.(*DTBProductCategory)
	} else {
		slice = *maybeDTBProductCategory.(*[]*DTBProductCategory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbProductCategoryR{}
		}
		args = append(args, object.ProductID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbProductCategoryR{}
			}

			for _, a := range args {
				if a == obj.ProductID {
					continue Outer
				}
			}

			args = append(args, obj.ProductID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_product`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DTBProduct")
	}

	var resultSlice []*DTBProduct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DTBProduct")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dtb_product")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_product")
	}

	if len(dtbProductCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &dtbProductR{}
		}
		foreign.R.ProductDTBProductCategories = append(foreign.R.ProductDTBProductCategories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductID == foreign.ID {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &dtbProductR{}
				}
				foreign.R.ProductDTBProductCategories = append(foreign.R.ProductDTBProductCategories, local)
				break
			}
		}
	}

	return nil
}

// SetProduct of the dtbProductCategory to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.ProductDTBProductCategories.
func (o *DTBProductCategory) SetProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DTBProduct) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `dtb_product_category` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"product_id"}),
		strmangle.WhereClause("`", "`", 0, dtbProductCategoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ProductID, o.CategoryID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductID = related.ID
	if o.R == nil {
		o.R = &dtbProductCategoryR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &dtbProductR{
			ProductDTBProductCategories: DTBProductCategorySlice{o},
		}
	} else {
		related.R.ProductDTBProductCategories = append(related.R.ProductDTBProductCategories, o)
	}

	return nil
}

// DTBProductCategories retrieves all the records using an executor.
func DTBProductCategories(mods ...qm.QueryMod) dtbProductCategoryQuery {
	mods = append(mods, qm.From("`dtb_product_category`"))
	return dtbProductCategoryQuery{NewQuery(mods...)}
}

// FindDTBProductCategory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDTBProductCategory(ctx context.Context, exec boil.ContextExecutor, productID uint, categoryID uint, selectCols ...string) (*DTBProductCategory, error) {
	dtbProductCategoryObj := &DTBProductCategory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `dtb_product_category` where `product_id`=? AND `category_id`=?", sel,
	)

	q := queries.Raw(query, productID, categoryID)

	err := q.Bind(ctx, exec, dtbProductCategoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from dtb_product_category")
	}

	return dtbProductCategoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DTBProductCategory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no dtb_product_category provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dtbProductCategoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dtbProductCategoryInsertCacheMut.RLock()
	cache, cached := dtbProductCategoryInsertCache[key]
	dtbProductCategoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dtbProductCategoryColumns,
			dtbProductCategoryColumnsWithDefault,
			dtbProductCategoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dtbProductCategoryType, dtbProductCategoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dtbProductCategoryType, dtbProductCategoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `dtb_product_category` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `dtb_product_category` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `dtb_product_category` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dtbProductCategoryPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into dtb_product_category")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ProductID,
		o.CategoryID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for dtb_product_category")
	}

CacheNoHooks:
	if !cached {
		dtbProductCategoryInsertCacheMut.Lock()
		dtbProductCategoryInsertCache[key] = cache
		dtbProductCategoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DTBProductCategory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DTBProductCategory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dtbProductCategoryUpdateCacheMut.RLock()
	cache, cached := dtbProductCategoryUpdateCache[key]
	dtbProductCategoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dtbProductCategoryColumns,
			dtbProductCategoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update dtb_product_category, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `dtb_product_category` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dtbProductCategoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dtbProductCategoryType, dtbProductCategoryMapping, append(wl, dtbProductCategoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update dtb_product_category row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for dtb_product_category")
	}

	if !cached {
		dtbProductCategoryUpdateCacheMut.Lock()
		dtbProductCategoryUpdateCache[key] = cache
		dtbProductCategoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dtbProductCategoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for dtb_product_category")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for dtb_product_category")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DTBProductCategorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbProductCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `dtb_product_category` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbProductCategoryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in dtbProductCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all dtbProductCategory")
	}
	return rowsAff, nil
}

var mySQLDTBProductCategoryUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DTBProductCategory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no dtb_product_category provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dtbProductCategoryColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDTBProductCategoryUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dtbProductCategoryUpsertCacheMut.RLock()
	cache, cached := dtbProductCategoryUpsertCache[key]
	dtbProductCategoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dtbProductCategoryColumns,
			dtbProductCategoryColumnsWithDefault,
			dtbProductCategoryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			dtbProductCategoryColumns,
			dtbProductCategoryPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("model: unable to upsert dtb_product_category, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "dtb_product_category", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `dtb_product_category` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dtbProductCategoryType, dtbProductCategoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dtbProductCategoryType, dtbProductCategoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for dtb_product_category")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dtbProductCategoryType, dtbProductCategoryMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for dtb_product_category")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for dtb_product_category")
	}

CacheNoHooks:
	if !cached {
		dtbProductCategoryUpsertCacheMut.Lock()
		dtbProductCategoryUpsertCache[key] = cache
		dtbProductCategoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DTBProductCategory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DTBProductCategory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no DTBProductCategory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dtbProductCategoryPrimaryKeyMapping)
	sql := "DELETE FROM `dtb_product_category` WHERE `product_id`=? AND `category_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from dtb_product_category")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for dtb_product_category")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dtbProductCategoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no dtbProductCategoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from dtb_product_category")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for dtb_product_category")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DTBProductCategorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no DTBProductCategory slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(dtbProductCategoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbProductCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `dtb_product_category` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbProductCategoryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from dtbProductCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for dtb_product_category")
	}

	if len(dtbProductCategoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DTBProductCategory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDTBProductCategory(ctx, exec, o.ProductID, o.CategoryID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DTBProductCategorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DTBProductCategorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbProductCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `dtb_product_category`.* FROM `dtb_product_category` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbProductCategoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in DTBProductCategorySlice")
	}

	*o = slice

	return nil
}

// DTBProductCategoryExists checks if the DTBProductCategory row exists.
func DTBProductCategoryExists(ctx context.Context, exec boil.ContextExecutor, productID uint, categoryID uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `dtb_product_category` where `product_id`=? AND `category_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, productID, categoryID)
	}

	row := exec.QueryRowContext(ctx, sql, productID, categoryID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if dtb_product_category exists")
	}

	return exists, nil
}
