// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// MTBOrderStatusColor is an object representing the database table.
type MTBOrderStatusColor struct {
	ID                uint16 `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name              string `boil:"name" json:"name" toml:"name" yaml:"name"`
	SortNo            uint16 `boil:"sort_no" json:"sort_no" toml:"sort_no" yaml:"sort_no"`
	DiscriminatorType string `boil:"discriminator_type" json:"discriminator_type" toml:"discriminator_type" yaml:"discriminator_type"`

	R *mtbOrderStatusColorR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L mtbOrderStatusColorL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MTBOrderStatusColorColumns = struct {
	ID                string
	Name              string
	SortNo            string
	DiscriminatorType string
}{
	ID:                "id",
	Name:              "name",
	SortNo:            "sort_no",
	DiscriminatorType: "discriminator_type",
}

// Generated where

var MTBOrderStatusColorWhere = struct {
	ID                whereHelperuint16
	Name              whereHelperstring
	SortNo            whereHelperuint16
	DiscriminatorType whereHelperstring
}{
	ID:                whereHelperuint16{field: `id`},
	Name:              whereHelperstring{field: `name`},
	SortNo:            whereHelperuint16{field: `sort_no`},
	DiscriminatorType: whereHelperstring{field: `discriminator_type`},
}

// MTBOrderStatusColorRels is where relationship names are stored.
var MTBOrderStatusColorRels = struct {
}{}

// mtbOrderStatusColorR is where relationships are stored.
type mtbOrderStatusColorR struct {
}

// NewStruct creates a new relationship struct
func (*mtbOrderStatusColorR) NewStruct() *mtbOrderStatusColorR {
	return &mtbOrderStatusColorR{}
}

// mtbOrderStatusColorL is where Load methods for each relationship are stored.
type mtbOrderStatusColorL struct{}

var (
	mtbOrderStatusColorColumns               = []string{"id", "name", "sort_no", "discriminator_type"}
	mtbOrderStatusColorColumnsWithoutDefault = []string{"id", "name", "sort_no", "discriminator_type"}
	mtbOrderStatusColorColumnsWithDefault    = []string{}
	mtbOrderStatusColorPrimaryKeyColumns     = []string{"id"}
)

type (
	// MTBOrderStatusColorSlice is an alias for a slice of pointers to MTBOrderStatusColor.
	// This should generally be used opposed to []MTBOrderStatusColor.
	MTBOrderStatusColorSlice []*MTBOrderStatusColor
	// MTBOrderStatusColorHook is the signature for custom MTBOrderStatusColor hook methods
	MTBOrderStatusColorHook func(context.Context, boil.ContextExecutor, *MTBOrderStatusColor) error

	mtbOrderStatusColorQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mtbOrderStatusColorType                 = reflect.TypeOf(&MTBOrderStatusColor{})
	mtbOrderStatusColorMapping              = queries.MakeStructMapping(mtbOrderStatusColorType)
	mtbOrderStatusColorPrimaryKeyMapping, _ = queries.BindMapping(mtbOrderStatusColorType, mtbOrderStatusColorMapping, mtbOrderStatusColorPrimaryKeyColumns)
	mtbOrderStatusColorInsertCacheMut       sync.RWMutex
	mtbOrderStatusColorInsertCache          = make(map[string]insertCache)
	mtbOrderStatusColorUpdateCacheMut       sync.RWMutex
	mtbOrderStatusColorUpdateCache          = make(map[string]updateCache)
	mtbOrderStatusColorUpsertCacheMut       sync.RWMutex
	mtbOrderStatusColorUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mtbOrderStatusColorBeforeInsertHooks []MTBOrderStatusColorHook
var mtbOrderStatusColorBeforeUpdateHooks []MTBOrderStatusColorHook
var mtbOrderStatusColorBeforeDeleteHooks []MTBOrderStatusColorHook
var mtbOrderStatusColorBeforeUpsertHooks []MTBOrderStatusColorHook

var mtbOrderStatusColorAfterInsertHooks []MTBOrderStatusColorHook
var mtbOrderStatusColorAfterSelectHooks []MTBOrderStatusColorHook
var mtbOrderStatusColorAfterUpdateHooks []MTBOrderStatusColorHook
var mtbOrderStatusColorAfterDeleteHooks []MTBOrderStatusColorHook
var mtbOrderStatusColorAfterUpsertHooks []MTBOrderStatusColorHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MTBOrderStatusColor) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mtbOrderStatusColorBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MTBOrderStatusColor) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mtbOrderStatusColorBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MTBOrderStatusColor) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mtbOrderStatusColorBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MTBOrderStatusColor) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mtbOrderStatusColorBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MTBOrderStatusColor) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mtbOrderStatusColorAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MTBOrderStatusColor) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mtbOrderStatusColorAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MTBOrderStatusColor) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mtbOrderStatusColorAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MTBOrderStatusColor) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mtbOrderStatusColorAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MTBOrderStatusColor) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mtbOrderStatusColorAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMTBOrderStatusColorHook registers your hook function for all future operations.
func AddMTBOrderStatusColorHook(hookPoint boil.HookPoint, mtbOrderStatusColorHook MTBOrderStatusColorHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		mtbOrderStatusColorBeforeInsertHooks = append(mtbOrderStatusColorBeforeInsertHooks, mtbOrderStatusColorHook)
	case boil.BeforeUpdateHook:
		mtbOrderStatusColorBeforeUpdateHooks = append(mtbOrderStatusColorBeforeUpdateHooks, mtbOrderStatusColorHook)
	case boil.BeforeDeleteHook:
		mtbOrderStatusColorBeforeDeleteHooks = append(mtbOrderStatusColorBeforeDeleteHooks, mtbOrderStatusColorHook)
	case boil.BeforeUpsertHook:
		mtbOrderStatusColorBeforeUpsertHooks = append(mtbOrderStatusColorBeforeUpsertHooks, mtbOrderStatusColorHook)
	case boil.AfterInsertHook:
		mtbOrderStatusColorAfterInsertHooks = append(mtbOrderStatusColorAfterInsertHooks, mtbOrderStatusColorHook)
	case boil.AfterSelectHook:
		mtbOrderStatusColorAfterSelectHooks = append(mtbOrderStatusColorAfterSelectHooks, mtbOrderStatusColorHook)
	case boil.AfterUpdateHook:
		mtbOrderStatusColorAfterUpdateHooks = append(mtbOrderStatusColorAfterUpdateHooks, mtbOrderStatusColorHook)
	case boil.AfterDeleteHook:
		mtbOrderStatusColorAfterDeleteHooks = append(mtbOrderStatusColorAfterDeleteHooks, mtbOrderStatusColorHook)
	case boil.AfterUpsertHook:
		mtbOrderStatusColorAfterUpsertHooks = append(mtbOrderStatusColorAfterUpsertHooks, mtbOrderStatusColorHook)
	}
}

// One returns a single mtbOrderStatusColor record from the query.
func (q mtbOrderStatusColorQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MTBOrderStatusColor, error) {
	o := &MTBOrderStatusColor{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for mtb_order_status_color")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MTBOrderStatusColor records from the query.
func (q mtbOrderStatusColorQuery) All(ctx context.Context, exec boil.ContextExecutor) (MTBOrderStatusColorSlice, error) {
	var o []*MTBOrderStatusColor

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to MTBOrderStatusColor slice")
	}

	if len(mtbOrderStatusColorAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MTBOrderStatusColor records in the query.
func (q mtbOrderStatusColorQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count mtb_order_status_color rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mtbOrderStatusColorQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if mtb_order_status_color exists")
	}

	return count > 0, nil
}

// MTBOrderStatusColors retrieves all the records using an executor.
func MTBOrderStatusColors(mods ...qm.QueryMod) mtbOrderStatusColorQuery {
	mods = append(mods, qm.From("`mtb_order_status_color`"))
	return mtbOrderStatusColorQuery{NewQuery(mods...)}
}

// FindMTBOrderStatusColor retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMTBOrderStatusColor(ctx context.Context, exec boil.ContextExecutor, iD uint16, selectCols ...string) (*MTBOrderStatusColor, error) {
	mtbOrderStatusColorObj := &MTBOrderStatusColor{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `mtb_order_status_color` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, mtbOrderStatusColorObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from mtb_order_status_color")
	}

	return mtbOrderStatusColorObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MTBOrderStatusColor) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no mtb_order_status_color provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mtbOrderStatusColorColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mtbOrderStatusColorInsertCacheMut.RLock()
	cache, cached := mtbOrderStatusColorInsertCache[key]
	mtbOrderStatusColorInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mtbOrderStatusColorColumns,
			mtbOrderStatusColorColumnsWithDefault,
			mtbOrderStatusColorColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mtbOrderStatusColorType, mtbOrderStatusColorMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mtbOrderStatusColorType, mtbOrderStatusColorMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `mtb_order_status_color` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `mtb_order_status_color` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `mtb_order_status_color` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, mtbOrderStatusColorPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into mtb_order_status_color")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for mtb_order_status_color")
	}

CacheNoHooks:
	if !cached {
		mtbOrderStatusColorInsertCacheMut.Lock()
		mtbOrderStatusColorInsertCache[key] = cache
		mtbOrderStatusColorInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MTBOrderStatusColor.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MTBOrderStatusColor) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mtbOrderStatusColorUpdateCacheMut.RLock()
	cache, cached := mtbOrderStatusColorUpdateCache[key]
	mtbOrderStatusColorUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mtbOrderStatusColorColumns,
			mtbOrderStatusColorPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update mtb_order_status_color, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `mtb_order_status_color` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, mtbOrderStatusColorPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mtbOrderStatusColorType, mtbOrderStatusColorMapping, append(wl, mtbOrderStatusColorPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update mtb_order_status_color row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for mtb_order_status_color")
	}

	if !cached {
		mtbOrderStatusColorUpdateCacheMut.Lock()
		mtbOrderStatusColorUpdateCache[key] = cache
		mtbOrderStatusColorUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mtbOrderStatusColorQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for mtb_order_status_color")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for mtb_order_status_color")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MTBOrderStatusColorSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mtbOrderStatusColorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `mtb_order_status_color` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mtbOrderStatusColorPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in mtbOrderStatusColor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all mtbOrderStatusColor")
	}
	return rowsAff, nil
}

var mySQLMTBOrderStatusColorUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MTBOrderStatusColor) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no mtb_order_status_color provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mtbOrderStatusColorColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLMTBOrderStatusColorUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mtbOrderStatusColorUpsertCacheMut.RLock()
	cache, cached := mtbOrderStatusColorUpsertCache[key]
	mtbOrderStatusColorUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mtbOrderStatusColorColumns,
			mtbOrderStatusColorColumnsWithDefault,
			mtbOrderStatusColorColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			mtbOrderStatusColorColumns,
			mtbOrderStatusColorPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("model: unable to upsert mtb_order_status_color, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "mtb_order_status_color", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `mtb_order_status_color` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(mtbOrderStatusColorType, mtbOrderStatusColorMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mtbOrderStatusColorType, mtbOrderStatusColorMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for mtb_order_status_color")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(mtbOrderStatusColorType, mtbOrderStatusColorMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for mtb_order_status_color")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for mtb_order_status_color")
	}

CacheNoHooks:
	if !cached {
		mtbOrderStatusColorUpsertCacheMut.Lock()
		mtbOrderStatusColorUpsertCache[key] = cache
		mtbOrderStatusColorUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MTBOrderStatusColor record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MTBOrderStatusColor) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no MTBOrderStatusColor provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mtbOrderStatusColorPrimaryKeyMapping)
	sql := "DELETE FROM `mtb_order_status_color` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from mtb_order_status_color")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for mtb_order_status_color")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mtbOrderStatusColorQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no mtbOrderStatusColorQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from mtb_order_status_color")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for mtb_order_status_color")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MTBOrderStatusColorSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no MTBOrderStatusColor slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(mtbOrderStatusColorBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mtbOrderStatusColorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `mtb_order_status_color` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mtbOrderStatusColorPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from mtbOrderStatusColor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for mtb_order_status_color")
	}

	if len(mtbOrderStatusColorAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MTBOrderStatusColor) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMTBOrderStatusColor(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MTBOrderStatusColorSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MTBOrderStatusColorSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mtbOrderStatusColorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `mtb_order_status_color`.* FROM `mtb_order_status_color` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mtbOrderStatusColorPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in MTBOrderStatusColorSlice")
	}

	*o = slice

	return nil
}

// MTBOrderStatusColorExists checks if the MTBOrderStatusColor row exists.
func MTBOrderStatusColorExists(ctx context.Context, exec boil.ContextExecutor, iD uint16) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `mtb_order_status_color` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if mtb_order_status_color exists")
	}

	return exists, nil
}
