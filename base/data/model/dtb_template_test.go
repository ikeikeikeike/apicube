// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDTBTemplates(t *testing.T) {
	t.Parallel()

	query := DTBTemplates()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDTBTemplatesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBTemplate{}
	if err = randomize.Struct(seed, o, dtbTemplateDBTypes, true, dtbTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBTemplatesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBTemplate{}
	if err = randomize.Struct(seed, o, dtbTemplateDBTypes, true, dtbTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DTBTemplates().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBTemplatesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBTemplate{}
	if err = randomize.Struct(seed, o, dtbTemplateDBTypes, true, dtbTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBTemplateSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBTemplatesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBTemplate{}
	if err = randomize.Struct(seed, o, dtbTemplateDBTypes, true, dtbTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DTBTemplateExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DTBTemplate exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DTBTemplateExists to return true, but got false.")
	}
}

func testDTBTemplatesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBTemplate{}
	if err = randomize.Struct(seed, o, dtbTemplateDBTypes, true, dtbTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dtbTemplateFound, err := FindDTBTemplate(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if dtbTemplateFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDTBTemplatesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBTemplate{}
	if err = randomize.Struct(seed, o, dtbTemplateDBTypes, true, dtbTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DTBTemplates().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDTBTemplatesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBTemplate{}
	if err = randomize.Struct(seed, o, dtbTemplateDBTypes, true, dtbTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DTBTemplates().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDTBTemplatesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtbTemplateOne := &DTBTemplate{}
	dtbTemplateTwo := &DTBTemplate{}
	if err = randomize.Struct(seed, dtbTemplateOne, dtbTemplateDBTypes, false, dtbTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTemplate struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbTemplateTwo, dtbTemplateDBTypes, false, dtbTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbTemplateOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbTemplateTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBTemplates().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDTBTemplatesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dtbTemplateOne := &DTBTemplate{}
	dtbTemplateTwo := &DTBTemplate{}
	if err = randomize.Struct(seed, dtbTemplateOne, dtbTemplateDBTypes, false, dtbTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTemplate struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbTemplateTwo, dtbTemplateDBTypes, false, dtbTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbTemplateOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbTemplateTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dtbTemplateBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBTemplate) error {
	*o = DTBTemplate{}
	return nil
}

func dtbTemplateAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBTemplate) error {
	*o = DTBTemplate{}
	return nil
}

func dtbTemplateAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DTBTemplate) error {
	*o = DTBTemplate{}
	return nil
}

func dtbTemplateBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBTemplate) error {
	*o = DTBTemplate{}
	return nil
}

func dtbTemplateAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBTemplate) error {
	*o = DTBTemplate{}
	return nil
}

func dtbTemplateBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBTemplate) error {
	*o = DTBTemplate{}
	return nil
}

func dtbTemplateAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBTemplate) error {
	*o = DTBTemplate{}
	return nil
}

func dtbTemplateBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBTemplate) error {
	*o = DTBTemplate{}
	return nil
}

func dtbTemplateAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBTemplate) error {
	*o = DTBTemplate{}
	return nil
}

func testDTBTemplatesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DTBTemplate{}
	o := &DTBTemplate{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dtbTemplateDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBTemplate object: %s", err)
	}

	AddDTBTemplateHook(boil.BeforeInsertHook, dtbTemplateBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dtbTemplateBeforeInsertHooks = []DTBTemplateHook{}

	AddDTBTemplateHook(boil.AfterInsertHook, dtbTemplateAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dtbTemplateAfterInsertHooks = []DTBTemplateHook{}

	AddDTBTemplateHook(boil.AfterSelectHook, dtbTemplateAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dtbTemplateAfterSelectHooks = []DTBTemplateHook{}

	AddDTBTemplateHook(boil.BeforeUpdateHook, dtbTemplateBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dtbTemplateBeforeUpdateHooks = []DTBTemplateHook{}

	AddDTBTemplateHook(boil.AfterUpdateHook, dtbTemplateAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dtbTemplateAfterUpdateHooks = []DTBTemplateHook{}

	AddDTBTemplateHook(boil.BeforeDeleteHook, dtbTemplateBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dtbTemplateBeforeDeleteHooks = []DTBTemplateHook{}

	AddDTBTemplateHook(boil.AfterDeleteHook, dtbTemplateAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dtbTemplateAfterDeleteHooks = []DTBTemplateHook{}

	AddDTBTemplateHook(boil.BeforeUpsertHook, dtbTemplateBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dtbTemplateBeforeUpsertHooks = []DTBTemplateHook{}

	AddDTBTemplateHook(boil.AfterUpsertHook, dtbTemplateAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dtbTemplateAfterUpsertHooks = []DTBTemplateHook{}
}

func testDTBTemplatesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBTemplate{}
	if err = randomize.Struct(seed, o, dtbTemplateDBTypes, true, dtbTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBTemplatesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBTemplate{}
	if err = randomize.Struct(seed, o, dtbTemplateDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DTBTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dtbTemplateColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DTBTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBTemplateToOneMTBDeviceTypeUsingDeviceType(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBTemplate
	var foreign MTBDeviceType

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbTemplateDBTypes, true, dtbTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTemplate struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, mtbDeviceTypeDBTypes, false, mtbDeviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBDeviceType struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.DeviceTypeID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.DeviceType().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBTemplateSlice{&local}
	if err = local.L.LoadDeviceType(ctx, tx, false, (*[]*DTBTemplate)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DeviceType == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.DeviceType = nil
	if err = local.L.LoadDeviceType(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DeviceType == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBTemplateToOneSetOpMTBDeviceTypeUsingDeviceType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBTemplate
	var b, c MTBDeviceType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbTemplateDBTypes, false, strmangle.SetComplement(dtbTemplatePrimaryKeyColumns, dtbTemplateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbDeviceTypeDBTypes, false, strmangle.SetComplement(mtbDeviceTypePrimaryKeyColumns, mtbDeviceTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mtbDeviceTypeDBTypes, false, strmangle.SetComplement(mtbDeviceTypePrimaryKeyColumns, mtbDeviceTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MTBDeviceType{&b, &c} {
		err = a.SetDeviceType(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.DeviceType != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DeviceTypeDTBTemplates[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.DeviceTypeID, x.ID) {
			t.Error("foreign key was wrong value", a.DeviceTypeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DeviceTypeID))
		reflect.Indirect(reflect.ValueOf(&a.DeviceTypeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.DeviceTypeID, x.ID) {
			t.Error("foreign key was wrong value", a.DeviceTypeID, x.ID)
		}
	}
}

func testDTBTemplateToOneRemoveOpMTBDeviceTypeUsingDeviceType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBTemplate
	var b MTBDeviceType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbTemplateDBTypes, false, strmangle.SetComplement(dtbTemplatePrimaryKeyColumns, dtbTemplateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbDeviceTypeDBTypes, false, strmangle.SetComplement(mtbDeviceTypePrimaryKeyColumns, mtbDeviceTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetDeviceType(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveDeviceType(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.DeviceType().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.DeviceType != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.DeviceTypeID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.DeviceTypeDTBTemplates) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBTemplatesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBTemplate{}
	if err = randomize.Struct(seed, o, dtbTemplateDBTypes, true, dtbTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBTemplatesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBTemplate{}
	if err = randomize.Struct(seed, o, dtbTemplateDBTypes, true, dtbTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBTemplateSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBTemplatesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBTemplate{}
	if err = randomize.Struct(seed, o, dtbTemplateDBTypes, true, dtbTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBTemplates().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dtbTemplateDBTypes = map[string]string{`ID`: `int`, `DeviceTypeID`: `smallint`, `TemplateCode`: `varchar`, `TemplateName`: `varchar`, `CreateDate`: `datetime`, `UpdateDate`: `datetime`, `DiscriminatorType`: `varchar`}
	_                  = bytes.MinRead
)

func testDTBTemplatesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dtbTemplatePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dtbTemplateColumns) == len(dtbTemplatePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBTemplate{}
	if err = randomize.Struct(seed, o, dtbTemplateDBTypes, true, dtbTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbTemplateDBTypes, true, dtbTemplatePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBTemplate struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDTBTemplatesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dtbTemplateColumns) == len(dtbTemplatePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBTemplate{}
	if err = randomize.Struct(seed, o, dtbTemplateDBTypes, true, dtbTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbTemplateDBTypes, true, dtbTemplatePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBTemplate struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dtbTemplateColumns, dtbTemplatePrimaryKeyColumns) {
		fields = dtbTemplateColumns
	} else {
		fields = strmangle.SetComplement(
			dtbTemplateColumns,
			dtbTemplatePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DTBTemplateSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDTBTemplatesUpsert(t *testing.T) {
	t.Parallel()

	if len(dtbTemplateColumns) == len(dtbTemplatePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDTBTemplateUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DTBTemplate{}
	if err = randomize.Struct(seed, &o, dtbTemplateDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBTemplate: %s", err)
	}

	count, err := DTBTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dtbTemplateDBTypes, false, dtbTemplatePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBTemplate struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBTemplate: %s", err)
	}

	count, err = DTBTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
