// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// DTBCategory is an object representing the database table.
type DTBCategory struct {
	ID                uint      `boil:"id" json:"id" toml:"id" yaml:"id"`
	ParentCategoryID  null.Uint `boil:"parent_category_id" json:"parent_category_id,omitempty" toml:"parent_category_id" yaml:"parent_category_id,omitempty"`
	CreatorID         null.Uint `boil:"creator_id" json:"creator_id,omitempty" toml:"creator_id" yaml:"creator_id,omitempty"`
	CategoryName      string    `boil:"category_name" json:"category_name" toml:"category_name" yaml:"category_name"`
	Hierarchy         uint      `boil:"hierarchy" json:"hierarchy" toml:"hierarchy" yaml:"hierarchy"`
	SortNo            int       `boil:"sort_no" json:"sort_no" toml:"sort_no" yaml:"sort_no"`
	CreateDate        time.Time `boil:"create_date" json:"create_date" toml:"create_date" yaml:"create_date"`
	UpdateDate        time.Time `boil:"update_date" json:"update_date" toml:"update_date" yaml:"update_date"`
	DiscriminatorType string    `boil:"discriminator_type" json:"discriminator_type" toml:"discriminator_type" yaml:"discriminator_type"`

	R *dtbCategoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dtbCategoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DTBCategoryColumns = struct {
	ID                string
	ParentCategoryID  string
	CreatorID         string
	CategoryName      string
	Hierarchy         string
	SortNo            string
	CreateDate        string
	UpdateDate        string
	DiscriminatorType string
}{
	ID:                "id",
	ParentCategoryID:  "parent_category_id",
	CreatorID:         "creator_id",
	CategoryName:      "category_name",
	Hierarchy:         "hierarchy",
	SortNo:            "sort_no",
	CreateDate:        "create_date",
	UpdateDate:        "update_date",
	DiscriminatorType: "discriminator_type",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var DTBCategoryWhere = struct {
	ID                whereHelperuint
	ParentCategoryID  whereHelpernull_Uint
	CreatorID         whereHelpernull_Uint
	CategoryName      whereHelperstring
	Hierarchy         whereHelperuint
	SortNo            whereHelperint
	CreateDate        whereHelpertime_Time
	UpdateDate        whereHelpertime_Time
	DiscriminatorType whereHelperstring
}{
	ID:                whereHelperuint{field: `id`},
	ParentCategoryID:  whereHelpernull_Uint{field: `parent_category_id`},
	CreatorID:         whereHelpernull_Uint{field: `creator_id`},
	CategoryName:      whereHelperstring{field: `category_name`},
	Hierarchy:         whereHelperuint{field: `hierarchy`},
	SortNo:            whereHelperint{field: `sort_no`},
	CreateDate:        whereHelpertime_Time{field: `create_date`},
	UpdateDate:        whereHelpertime_Time{field: `update_date`},
	DiscriminatorType: whereHelperstring{field: `discriminator_type`},
}

// DTBCategoryRels is where relationship names are stored.
var DTBCategoryRels = struct {
	ParentCategory               string
	ParentCategoryDTBCategories  string
	CategoryDTBProductCategories string
}{
	ParentCategory:               "ParentCategory",
	ParentCategoryDTBCategories:  "ParentCategoryDTBCategories",
	CategoryDTBProductCategories: "CategoryDTBProductCategories",
}

// dtbCategoryR is where relationships are stored.
type dtbCategoryR struct {
	ParentCategory               *DTBCategory
	ParentCategoryDTBCategories  DTBCategorySlice
	CategoryDTBProductCategories DTBProductCategorySlice
}

// NewStruct creates a new relationship struct
func (*dtbCategoryR) NewStruct() *dtbCategoryR {
	return &dtbCategoryR{}
}

// dtbCategoryL is where Load methods for each relationship are stored.
type dtbCategoryL struct{}

var (
	dtbCategoryColumns               = []string{"id", "parent_category_id", "creator_id", "category_name", "hierarchy", "sort_no", "create_date", "update_date", "discriminator_type"}
	dtbCategoryColumnsWithoutDefault = []string{"parent_category_id", "creator_id", "category_name", "hierarchy", "sort_no", "create_date", "update_date", "discriminator_type"}
	dtbCategoryColumnsWithDefault    = []string{"id"}
	dtbCategoryPrimaryKeyColumns     = []string{"id"}
)

type (
	// DTBCategorySlice is an alias for a slice of pointers to DTBCategory.
	// This should generally be used opposed to []DTBCategory.
	DTBCategorySlice []*DTBCategory
	// DTBCategoryHook is the signature for custom DTBCategory hook methods
	DTBCategoryHook func(context.Context, boil.ContextExecutor, *DTBCategory) error

	dtbCategoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dtbCategoryType                 = reflect.TypeOf(&DTBCategory{})
	dtbCategoryMapping              = queries.MakeStructMapping(dtbCategoryType)
	dtbCategoryPrimaryKeyMapping, _ = queries.BindMapping(dtbCategoryType, dtbCategoryMapping, dtbCategoryPrimaryKeyColumns)
	dtbCategoryInsertCacheMut       sync.RWMutex
	dtbCategoryInsertCache          = make(map[string]insertCache)
	dtbCategoryUpdateCacheMut       sync.RWMutex
	dtbCategoryUpdateCache          = make(map[string]updateCache)
	dtbCategoryUpsertCacheMut       sync.RWMutex
	dtbCategoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dtbCategoryBeforeInsertHooks []DTBCategoryHook
var dtbCategoryBeforeUpdateHooks []DTBCategoryHook
var dtbCategoryBeforeDeleteHooks []DTBCategoryHook
var dtbCategoryBeforeUpsertHooks []DTBCategoryHook

var dtbCategoryAfterInsertHooks []DTBCategoryHook
var dtbCategoryAfterSelectHooks []DTBCategoryHook
var dtbCategoryAfterUpdateHooks []DTBCategoryHook
var dtbCategoryAfterDeleteHooks []DTBCategoryHook
var dtbCategoryAfterUpsertHooks []DTBCategoryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DTBCategory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCategoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DTBCategory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCategoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DTBCategory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCategoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DTBCategory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCategoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DTBCategory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCategoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DTBCategory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCategoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DTBCategory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCategoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DTBCategory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCategoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DTBCategory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCategoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDTBCategoryHook registers your hook function for all future operations.
func AddDTBCategoryHook(hookPoint boil.HookPoint, dtbCategoryHook DTBCategoryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		dtbCategoryBeforeInsertHooks = append(dtbCategoryBeforeInsertHooks, dtbCategoryHook)
	case boil.BeforeUpdateHook:
		dtbCategoryBeforeUpdateHooks = append(dtbCategoryBeforeUpdateHooks, dtbCategoryHook)
	case boil.BeforeDeleteHook:
		dtbCategoryBeforeDeleteHooks = append(dtbCategoryBeforeDeleteHooks, dtbCategoryHook)
	case boil.BeforeUpsertHook:
		dtbCategoryBeforeUpsertHooks = append(dtbCategoryBeforeUpsertHooks, dtbCategoryHook)
	case boil.AfterInsertHook:
		dtbCategoryAfterInsertHooks = append(dtbCategoryAfterInsertHooks, dtbCategoryHook)
	case boil.AfterSelectHook:
		dtbCategoryAfterSelectHooks = append(dtbCategoryAfterSelectHooks, dtbCategoryHook)
	case boil.AfterUpdateHook:
		dtbCategoryAfterUpdateHooks = append(dtbCategoryAfterUpdateHooks, dtbCategoryHook)
	case boil.AfterDeleteHook:
		dtbCategoryAfterDeleteHooks = append(dtbCategoryAfterDeleteHooks, dtbCategoryHook)
	case boil.AfterUpsertHook:
		dtbCategoryAfterUpsertHooks = append(dtbCategoryAfterUpsertHooks, dtbCategoryHook)
	}
}

// One returns a single dtbCategory record from the query.
func (q dtbCategoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DTBCategory, error) {
	o := &DTBCategory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for dtb_category")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DTBCategory records from the query.
func (q dtbCategoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (DTBCategorySlice, error) {
	var o []*DTBCategory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to DTBCategory slice")
	}

	if len(dtbCategoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DTBCategory records in the query.
func (q dtbCategoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count dtb_category rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dtbCategoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if dtb_category exists")
	}

	return count > 0, nil
}

// ParentCategory pointed to by the foreign key.
func (o *DTBCategory) ParentCategory(mods ...qm.QueryMod) dtbCategoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ParentCategoryID),
	}

	queryMods = append(queryMods, mods...)

	query := DTBCategories(queryMods...)
	queries.SetFrom(query.Query, "`dtb_category`")

	return query
}

// ParentCategoryDTBCategories retrieves all the dtb_category's DTBCategories with an executor via parent_category_id column.
func (o *DTBCategory) ParentCategoryDTBCategories(mods ...qm.QueryMod) dtbCategoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`dtb_category`.`parent_category_id`=?", o.ID),
	)

	query := DTBCategories(queryMods...)
	queries.SetFrom(query.Query, "`dtb_category`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`dtb_category`.*"})
	}

	return query
}

// CategoryDTBProductCategories retrieves all the dtb_product_category's DTBProductCategories with an executor via category_id column.
func (o *DTBCategory) CategoryDTBProductCategories(mods ...qm.QueryMod) dtbProductCategoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`dtb_product_category`.`category_id`=?", o.ID),
	)

	query := DTBProductCategories(queryMods...)
	queries.SetFrom(query.Query, "`dtb_product_category`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`dtb_product_category`.*"})
	}

	return query
}

// LoadParentCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dtbCategoryL) LoadParentCategory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBCategory interface{}, mods queries.Applicator) error {
	var slice []*DTBCategory
	var object *DTBCategory

	if singular {
		object = maybeDTBCategory.(*DTBCategory)
	} else {
		slice = *maybeDTBCategory.(*[]*DTBCategory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbCategoryR{}
		}
		if !queries.IsNil(object.ParentCategoryID) {
			args = append(args, object.ParentCategoryID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbCategoryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ParentCategoryID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ParentCategoryID) {
				args = append(args, obj.ParentCategoryID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_category`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DTBCategory")
	}

	var resultSlice []*DTBCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DTBCategory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dtb_category")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_category")
	}

	if len(dtbCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ParentCategory = foreign
		if foreign.R == nil {
			foreign.R = &dtbCategoryR{}
		}
		foreign.R.ParentCategoryDTBCategories = append(foreign.R.ParentCategoryDTBCategories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ParentCategoryID, foreign.ID) {
				local.R.ParentCategory = foreign
				if foreign.R == nil {
					foreign.R = &dtbCategoryR{}
				}
				foreign.R.ParentCategoryDTBCategories = append(foreign.R.ParentCategoryDTBCategories, local)
				break
			}
		}
	}

	return nil
}

// LoadParentCategoryDTBCategories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dtbCategoryL) LoadParentCategoryDTBCategories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBCategory interface{}, mods queries.Applicator) error {
	var slice []*DTBCategory
	var object *DTBCategory

	if singular {
		object = maybeDTBCategory.(*DTBCategory)
	} else {
		slice = *maybeDTBCategory.(*[]*DTBCategory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbCategoryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbCategoryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_category`), qm.WhereIn(`parent_category_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dtb_category")
	}

	var resultSlice []*DTBCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dtb_category")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dtb_category")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_category")
	}

	if len(dtbCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ParentCategoryDTBCategories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dtbCategoryR{}
			}
			foreign.R.ParentCategory = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ParentCategoryID) {
				local.R.ParentCategoryDTBCategories = append(local.R.ParentCategoryDTBCategories, foreign)
				if foreign.R == nil {
					foreign.R = &dtbCategoryR{}
				}
				foreign.R.ParentCategory = local
				break
			}
		}
	}

	return nil
}

// LoadCategoryDTBProductCategories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dtbCategoryL) LoadCategoryDTBProductCategories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBCategory interface{}, mods queries.Applicator) error {
	var slice []*DTBCategory
	var object *DTBCategory

	if singular {
		object = maybeDTBCategory.(*DTBCategory)
	} else {
		slice = *maybeDTBCategory.(*[]*DTBCategory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbCategoryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbCategoryR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_product_category`), qm.WhereIn(`category_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dtb_product_category")
	}

	var resultSlice []*DTBProductCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dtb_product_category")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dtb_product_category")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_product_category")
	}

	if len(dtbProductCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CategoryDTBProductCategories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dtbProductCategoryR{}
			}
			foreign.R.Category = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CategoryID {
				local.R.CategoryDTBProductCategories = append(local.R.CategoryDTBProductCategories, foreign)
				if foreign.R == nil {
					foreign.R = &dtbProductCategoryR{}
				}
				foreign.R.Category = local
				break
			}
		}
	}

	return nil
}

// SetParentCategory of the dtbCategory to the related item.
// Sets o.R.ParentCategory to related.
// Adds o to related.R.ParentCategoryDTBCategories.
func (o *DTBCategory) SetParentCategory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DTBCategory) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `dtb_category` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"parent_category_id"}),
		strmangle.WhereClause("`", "`", 0, dtbCategoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ParentCategoryID, related.ID)
	if o.R == nil {
		o.R = &dtbCategoryR{
			ParentCategory: related,
		}
	} else {
		o.R.ParentCategory = related
	}

	if related.R == nil {
		related.R = &dtbCategoryR{
			ParentCategoryDTBCategories: DTBCategorySlice{o},
		}
	} else {
		related.R.ParentCategoryDTBCategories = append(related.R.ParentCategoryDTBCategories, o)
	}

	return nil
}

// RemoveParentCategory relationship.
// Sets o.R.ParentCategory to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *DTBCategory) RemoveParentCategory(ctx context.Context, exec boil.ContextExecutor, related *DTBCategory) error {
	var err error

	queries.SetScanner(&o.ParentCategoryID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("parent_category_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.ParentCategory = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ParentCategoryDTBCategories {
		if queries.Equal(o.ParentCategoryID, ri.ParentCategoryID) {
			continue
		}

		ln := len(related.R.ParentCategoryDTBCategories)
		if ln > 1 && i < ln-1 {
			related.R.ParentCategoryDTBCategories[i] = related.R.ParentCategoryDTBCategories[ln-1]
		}
		related.R.ParentCategoryDTBCategories = related.R.ParentCategoryDTBCategories[:ln-1]
		break
	}
	return nil
}

// AddParentCategoryDTBCategories adds the given related objects to the existing relationships
// of the dtb_category, optionally inserting them as new records.
// Appends related to o.R.ParentCategoryDTBCategories.
// Sets related.R.ParentCategory appropriately.
func (o *DTBCategory) AddParentCategoryDTBCategories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBCategory) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ParentCategoryID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `dtb_category` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"parent_category_id"}),
				strmangle.WhereClause("`", "`", 0, dtbCategoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ParentCategoryID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &dtbCategoryR{
			ParentCategoryDTBCategories: related,
		}
	} else {
		o.R.ParentCategoryDTBCategories = append(o.R.ParentCategoryDTBCategories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dtbCategoryR{
				ParentCategory: o,
			}
		} else {
			rel.R.ParentCategory = o
		}
	}
	return nil
}

// SetParentCategoryDTBCategories removes all previously related items of the
// dtb_category replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ParentCategory's ParentCategoryDTBCategories accordingly.
// Replaces o.R.ParentCategoryDTBCategories with related.
// Sets related.R.ParentCategory's ParentCategoryDTBCategories accordingly.
func (o *DTBCategory) SetParentCategoryDTBCategories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBCategory) error {
	query := "update `dtb_category` set `parent_category_id` = null where `parent_category_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ParentCategoryDTBCategories {
			queries.SetScanner(&rel.ParentCategoryID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ParentCategory = nil
		}

		o.R.ParentCategoryDTBCategories = nil
	}
	return o.AddParentCategoryDTBCategories(ctx, exec, insert, related...)
}

// RemoveParentCategoryDTBCategories relationships from objects passed in.
// Removes related items from R.ParentCategoryDTBCategories (uses pointer comparison, removal does not keep order)
// Sets related.R.ParentCategory.
func (o *DTBCategory) RemoveParentCategoryDTBCategories(ctx context.Context, exec boil.ContextExecutor, related ...*DTBCategory) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ParentCategoryID, nil)
		if rel.R != nil {
			rel.R.ParentCategory = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("parent_category_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ParentCategoryDTBCategories {
			if rel != ri {
				continue
			}

			ln := len(o.R.ParentCategoryDTBCategories)
			if ln > 1 && i < ln-1 {
				o.R.ParentCategoryDTBCategories[i] = o.R.ParentCategoryDTBCategories[ln-1]
			}
			o.R.ParentCategoryDTBCategories = o.R.ParentCategoryDTBCategories[:ln-1]
			break
		}
	}

	return nil
}

// AddCategoryDTBProductCategories adds the given related objects to the existing relationships
// of the dtb_category, optionally inserting them as new records.
// Appends related to o.R.CategoryDTBProductCategories.
// Sets related.R.Category appropriately.
func (o *DTBCategory) AddCategoryDTBProductCategories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBProductCategory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CategoryID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `dtb_product_category` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"category_id"}),
				strmangle.WhereClause("`", "`", 0, dtbProductCategoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ProductID, rel.CategoryID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CategoryID = o.ID
		}
	}

	if o.R == nil {
		o.R = &dtbCategoryR{
			CategoryDTBProductCategories: related,
		}
	} else {
		o.R.CategoryDTBProductCategories = append(o.R.CategoryDTBProductCategories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dtbProductCategoryR{
				Category: o,
			}
		} else {
			rel.R.Category = o
		}
	}
	return nil
}

// DTBCategories retrieves all the records using an executor.
func DTBCategories(mods ...qm.QueryMod) dtbCategoryQuery {
	mods = append(mods, qm.From("`dtb_category`"))
	return dtbCategoryQuery{NewQuery(mods...)}
}

// FindDTBCategory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDTBCategory(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*DTBCategory, error) {
	dtbCategoryObj := &DTBCategory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `dtb_category` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, dtbCategoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from dtb_category")
	}

	return dtbCategoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DTBCategory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no dtb_category provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dtbCategoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dtbCategoryInsertCacheMut.RLock()
	cache, cached := dtbCategoryInsertCache[key]
	dtbCategoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dtbCategoryColumns,
			dtbCategoryColumnsWithDefault,
			dtbCategoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dtbCategoryType, dtbCategoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dtbCategoryType, dtbCategoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `dtb_category` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `dtb_category` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `dtb_category` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dtbCategoryPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into dtb_category")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == dtbCategoryMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for dtb_category")
	}

CacheNoHooks:
	if !cached {
		dtbCategoryInsertCacheMut.Lock()
		dtbCategoryInsertCache[key] = cache
		dtbCategoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DTBCategory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DTBCategory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dtbCategoryUpdateCacheMut.RLock()
	cache, cached := dtbCategoryUpdateCache[key]
	dtbCategoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dtbCategoryColumns,
			dtbCategoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update dtb_category, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `dtb_category` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dtbCategoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dtbCategoryType, dtbCategoryMapping, append(wl, dtbCategoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update dtb_category row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for dtb_category")
	}

	if !cached {
		dtbCategoryUpdateCacheMut.Lock()
		dtbCategoryUpdateCache[key] = cache
		dtbCategoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dtbCategoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for dtb_category")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for dtb_category")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DTBCategorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `dtb_category` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbCategoryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in dtbCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all dtbCategory")
	}
	return rowsAff, nil
}

var mySQLDTBCategoryUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DTBCategory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no dtb_category provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dtbCategoryColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDTBCategoryUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dtbCategoryUpsertCacheMut.RLock()
	cache, cached := dtbCategoryUpsertCache[key]
	dtbCategoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dtbCategoryColumns,
			dtbCategoryColumnsWithDefault,
			dtbCategoryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			dtbCategoryColumns,
			dtbCategoryPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("model: unable to upsert dtb_category, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "dtb_category", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `dtb_category` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dtbCategoryType, dtbCategoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dtbCategoryType, dtbCategoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for dtb_category")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == dtbCategoryMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dtbCategoryType, dtbCategoryMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for dtb_category")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for dtb_category")
	}

CacheNoHooks:
	if !cached {
		dtbCategoryUpsertCacheMut.Lock()
		dtbCategoryUpsertCache[key] = cache
		dtbCategoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DTBCategory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DTBCategory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no DTBCategory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dtbCategoryPrimaryKeyMapping)
	sql := "DELETE FROM `dtb_category` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from dtb_category")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for dtb_category")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dtbCategoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no dtbCategoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from dtb_category")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for dtb_category")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DTBCategorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no DTBCategory slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(dtbCategoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `dtb_category` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbCategoryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from dtbCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for dtb_category")
	}

	if len(dtbCategoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DTBCategory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDTBCategory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DTBCategorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DTBCategorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `dtb_category`.* FROM `dtb_category` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbCategoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in DTBCategorySlice")
	}

	*o = slice

	return nil
}

// DTBCategoryExists checks if the DTBCategory row exists.
func DTBCategoryExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `dtb_category` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if dtb_category exists")
	}

	return exists, nil
}
