// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDTBCustomers(t *testing.T) {
	t.Parallel()

	query := DTBCustomers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDTBCustomersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBCustomer{}
	if err = randomize.Struct(seed, o, dtbCustomerDBTypes, true, dtbCustomerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBCustomers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBCustomersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBCustomer{}
	if err = randomize.Struct(seed, o, dtbCustomerDBTypes, true, dtbCustomerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DTBCustomers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBCustomers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBCustomersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBCustomer{}
	if err = randomize.Struct(seed, o, dtbCustomerDBTypes, true, dtbCustomerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBCustomerSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBCustomers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBCustomersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBCustomer{}
	if err = randomize.Struct(seed, o, dtbCustomerDBTypes, true, dtbCustomerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DTBCustomerExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DTBCustomer exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DTBCustomerExists to return true, but got false.")
	}
}

func testDTBCustomersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBCustomer{}
	if err = randomize.Struct(seed, o, dtbCustomerDBTypes, true, dtbCustomerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dtbCustomerFound, err := FindDTBCustomer(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if dtbCustomerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDTBCustomersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBCustomer{}
	if err = randomize.Struct(seed, o, dtbCustomerDBTypes, true, dtbCustomerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DTBCustomers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDTBCustomersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBCustomer{}
	if err = randomize.Struct(seed, o, dtbCustomerDBTypes, true, dtbCustomerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DTBCustomers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDTBCustomersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtbCustomerOne := &DTBCustomer{}
	dtbCustomerTwo := &DTBCustomer{}
	if err = randomize.Struct(seed, dtbCustomerOne, dtbCustomerDBTypes, false, dtbCustomerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomer struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbCustomerTwo, dtbCustomerDBTypes, false, dtbCustomerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbCustomerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbCustomerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBCustomers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDTBCustomersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dtbCustomerOne := &DTBCustomer{}
	dtbCustomerTwo := &DTBCustomer{}
	if err = randomize.Struct(seed, dtbCustomerOne, dtbCustomerDBTypes, false, dtbCustomerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomer struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbCustomerTwo, dtbCustomerDBTypes, false, dtbCustomerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbCustomerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbCustomerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBCustomers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dtbCustomerBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBCustomer) error {
	*o = DTBCustomer{}
	return nil
}

func dtbCustomerAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBCustomer) error {
	*o = DTBCustomer{}
	return nil
}

func dtbCustomerAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DTBCustomer) error {
	*o = DTBCustomer{}
	return nil
}

func dtbCustomerBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBCustomer) error {
	*o = DTBCustomer{}
	return nil
}

func dtbCustomerAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBCustomer) error {
	*o = DTBCustomer{}
	return nil
}

func dtbCustomerBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBCustomer) error {
	*o = DTBCustomer{}
	return nil
}

func dtbCustomerAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBCustomer) error {
	*o = DTBCustomer{}
	return nil
}

func dtbCustomerBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBCustomer) error {
	*o = DTBCustomer{}
	return nil
}

func dtbCustomerAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBCustomer) error {
	*o = DTBCustomer{}
	return nil
}

func testDTBCustomersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DTBCustomer{}
	o := &DTBCustomer{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dtbCustomerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBCustomer object: %s", err)
	}

	AddDTBCustomerHook(boil.BeforeInsertHook, dtbCustomerBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dtbCustomerBeforeInsertHooks = []DTBCustomerHook{}

	AddDTBCustomerHook(boil.AfterInsertHook, dtbCustomerAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dtbCustomerAfterInsertHooks = []DTBCustomerHook{}

	AddDTBCustomerHook(boil.AfterSelectHook, dtbCustomerAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dtbCustomerAfterSelectHooks = []DTBCustomerHook{}

	AddDTBCustomerHook(boil.BeforeUpdateHook, dtbCustomerBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dtbCustomerBeforeUpdateHooks = []DTBCustomerHook{}

	AddDTBCustomerHook(boil.AfterUpdateHook, dtbCustomerAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dtbCustomerAfterUpdateHooks = []DTBCustomerHook{}

	AddDTBCustomerHook(boil.BeforeDeleteHook, dtbCustomerBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dtbCustomerBeforeDeleteHooks = []DTBCustomerHook{}

	AddDTBCustomerHook(boil.AfterDeleteHook, dtbCustomerAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dtbCustomerAfterDeleteHooks = []DTBCustomerHook{}

	AddDTBCustomerHook(boil.BeforeUpsertHook, dtbCustomerBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dtbCustomerBeforeUpsertHooks = []DTBCustomerHook{}

	AddDTBCustomerHook(boil.AfterUpsertHook, dtbCustomerAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dtbCustomerAfterUpsertHooks = []DTBCustomerHook{}
}

func testDTBCustomersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBCustomer{}
	if err = randomize.Struct(seed, o, dtbCustomerDBTypes, true, dtbCustomerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBCustomers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBCustomersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBCustomer{}
	if err = randomize.Struct(seed, o, dtbCustomerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DTBCustomer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dtbCustomerColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DTBCustomers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBCustomerToManyCustomerDTBCarts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBCustomer
	var b, c DTBCart

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbCustomerDBTypes, true, dtbCustomerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomer struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbCartDBTypes, false, dtbCartColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbCartDBTypes, false, dtbCartColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CustomerID, a.ID)
	queries.Assign(&c.CustomerID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CustomerDTBCarts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CustomerID, b.CustomerID) {
			bFound = true
		}
		if queries.Equal(v.CustomerID, c.CustomerID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBCustomerSlice{&a}
	if err = a.L.LoadCustomerDTBCarts(ctx, tx, false, (*[]*DTBCustomer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CustomerDTBCarts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CustomerDTBCarts = nil
	if err = a.L.LoadCustomerDTBCarts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CustomerDTBCarts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBCustomerToManyCustomerDTBCustomerAddresses(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBCustomer
	var b, c DTBCustomerAddress

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbCustomerDBTypes, true, dtbCustomerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomer struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbCustomerAddressDBTypes, false, dtbCustomerAddressColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbCustomerAddressDBTypes, false, dtbCustomerAddressColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CustomerID, a.ID)
	queries.Assign(&c.CustomerID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CustomerDTBCustomerAddresses().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CustomerID, b.CustomerID) {
			bFound = true
		}
		if queries.Equal(v.CustomerID, c.CustomerID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBCustomerSlice{&a}
	if err = a.L.LoadCustomerDTBCustomerAddresses(ctx, tx, false, (*[]*DTBCustomer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CustomerDTBCustomerAddresses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CustomerDTBCustomerAddresses = nil
	if err = a.L.LoadCustomerDTBCustomerAddresses(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CustomerDTBCustomerAddresses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBCustomerToManyCustomerDTBCustomerFavoriteProducts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBCustomer
	var b, c DTBCustomerFavoriteProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbCustomerDBTypes, true, dtbCustomerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomer struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbCustomerFavoriteProductDBTypes, false, dtbCustomerFavoriteProductColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbCustomerFavoriteProductDBTypes, false, dtbCustomerFavoriteProductColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CustomerID, a.ID)
	queries.Assign(&c.CustomerID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CustomerDTBCustomerFavoriteProducts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CustomerID, b.CustomerID) {
			bFound = true
		}
		if queries.Equal(v.CustomerID, c.CustomerID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBCustomerSlice{&a}
	if err = a.L.LoadCustomerDTBCustomerFavoriteProducts(ctx, tx, false, (*[]*DTBCustomer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CustomerDTBCustomerFavoriteProducts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CustomerDTBCustomerFavoriteProducts = nil
	if err = a.L.LoadCustomerDTBCustomerFavoriteProducts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CustomerDTBCustomerFavoriteProducts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBCustomerToManyCustomerDTBOrders(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBCustomer
	var b, c DTBOrder

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbCustomerDBTypes, true, dtbCustomerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomer struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbOrderDBTypes, false, dtbOrderColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbOrderDBTypes, false, dtbOrderColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CustomerID, a.ID)
	queries.Assign(&c.CustomerID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CustomerDTBOrders().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CustomerID, b.CustomerID) {
			bFound = true
		}
		if queries.Equal(v.CustomerID, c.CustomerID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBCustomerSlice{&a}
	if err = a.L.LoadCustomerDTBOrders(ctx, tx, false, (*[]*DTBCustomer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CustomerDTBOrders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CustomerDTBOrders = nil
	if err = a.L.LoadCustomerDTBOrders(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CustomerDTBOrders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBCustomerToManyAddOpCustomerDTBCarts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBCustomer
	var b, c, d, e DTBCart

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbCustomerDBTypes, false, strmangle.SetComplement(dtbCustomerPrimaryKeyColumns, dtbCustomerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBCart{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbCartDBTypes, false, strmangle.SetComplement(dtbCartPrimaryKeyColumns, dtbCartColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBCart{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCustomerDTBCarts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CustomerID) {
			t.Error("foreign key was wrong value", a.ID, first.CustomerID)
		}
		if !queries.Equal(a.ID, second.CustomerID) {
			t.Error("foreign key was wrong value", a.ID, second.CustomerID)
		}

		if first.R.Customer != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Customer != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CustomerDTBCarts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CustomerDTBCarts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CustomerDTBCarts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDTBCustomerToManySetOpCustomerDTBCarts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBCustomer
	var b, c, d, e DTBCart

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbCustomerDBTypes, false, strmangle.SetComplement(dtbCustomerPrimaryKeyColumns, dtbCustomerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBCart{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbCartDBTypes, false, strmangle.SetComplement(dtbCartPrimaryKeyColumns, dtbCartColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCustomerDTBCarts(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CustomerDTBCarts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCustomerDTBCarts(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CustomerDTBCarts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CustomerID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CustomerID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CustomerID) {
		t.Error("foreign key was wrong value", a.ID, d.CustomerID)
	}
	if !queries.Equal(a.ID, e.CustomerID) {
		t.Error("foreign key was wrong value", a.ID, e.CustomerID)
	}

	if b.R.Customer != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Customer != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Customer != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Customer != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CustomerDTBCarts[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CustomerDTBCarts[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDTBCustomerToManyRemoveOpCustomerDTBCarts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBCustomer
	var b, c, d, e DTBCart

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbCustomerDBTypes, false, strmangle.SetComplement(dtbCustomerPrimaryKeyColumns, dtbCustomerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBCart{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbCartDBTypes, false, strmangle.SetComplement(dtbCartPrimaryKeyColumns, dtbCartColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCustomerDTBCarts(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CustomerDTBCarts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCustomerDTBCarts(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CustomerDTBCarts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CustomerID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CustomerID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Customer != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Customer != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Customer != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Customer != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CustomerDTBCarts) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CustomerDTBCarts[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CustomerDTBCarts[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDTBCustomerToManyAddOpCustomerDTBCustomerAddresses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBCustomer
	var b, c, d, e DTBCustomerAddress

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbCustomerDBTypes, false, strmangle.SetComplement(dtbCustomerPrimaryKeyColumns, dtbCustomerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBCustomerAddress{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbCustomerAddressDBTypes, false, strmangle.SetComplement(dtbCustomerAddressPrimaryKeyColumns, dtbCustomerAddressColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBCustomerAddress{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCustomerDTBCustomerAddresses(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CustomerID) {
			t.Error("foreign key was wrong value", a.ID, first.CustomerID)
		}
		if !queries.Equal(a.ID, second.CustomerID) {
			t.Error("foreign key was wrong value", a.ID, second.CustomerID)
		}

		if first.R.Customer != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Customer != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CustomerDTBCustomerAddresses[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CustomerDTBCustomerAddresses[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CustomerDTBCustomerAddresses().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDTBCustomerToManySetOpCustomerDTBCustomerAddresses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBCustomer
	var b, c, d, e DTBCustomerAddress

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbCustomerDBTypes, false, strmangle.SetComplement(dtbCustomerPrimaryKeyColumns, dtbCustomerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBCustomerAddress{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbCustomerAddressDBTypes, false, strmangle.SetComplement(dtbCustomerAddressPrimaryKeyColumns, dtbCustomerAddressColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCustomerDTBCustomerAddresses(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CustomerDTBCustomerAddresses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCustomerDTBCustomerAddresses(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CustomerDTBCustomerAddresses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CustomerID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CustomerID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CustomerID) {
		t.Error("foreign key was wrong value", a.ID, d.CustomerID)
	}
	if !queries.Equal(a.ID, e.CustomerID) {
		t.Error("foreign key was wrong value", a.ID, e.CustomerID)
	}

	if b.R.Customer != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Customer != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Customer != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Customer != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CustomerDTBCustomerAddresses[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CustomerDTBCustomerAddresses[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDTBCustomerToManyRemoveOpCustomerDTBCustomerAddresses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBCustomer
	var b, c, d, e DTBCustomerAddress

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbCustomerDBTypes, false, strmangle.SetComplement(dtbCustomerPrimaryKeyColumns, dtbCustomerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBCustomerAddress{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbCustomerAddressDBTypes, false, strmangle.SetComplement(dtbCustomerAddressPrimaryKeyColumns, dtbCustomerAddressColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCustomerDTBCustomerAddresses(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CustomerDTBCustomerAddresses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCustomerDTBCustomerAddresses(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CustomerDTBCustomerAddresses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CustomerID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CustomerID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Customer != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Customer != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Customer != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Customer != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CustomerDTBCustomerAddresses) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CustomerDTBCustomerAddresses[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CustomerDTBCustomerAddresses[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDTBCustomerToManyAddOpCustomerDTBCustomerFavoriteProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBCustomer
	var b, c, d, e DTBCustomerFavoriteProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbCustomerDBTypes, false, strmangle.SetComplement(dtbCustomerPrimaryKeyColumns, dtbCustomerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBCustomerFavoriteProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbCustomerFavoriteProductDBTypes, false, strmangle.SetComplement(dtbCustomerFavoriteProductPrimaryKeyColumns, dtbCustomerFavoriteProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBCustomerFavoriteProduct{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCustomerDTBCustomerFavoriteProducts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CustomerID) {
			t.Error("foreign key was wrong value", a.ID, first.CustomerID)
		}
		if !queries.Equal(a.ID, second.CustomerID) {
			t.Error("foreign key was wrong value", a.ID, second.CustomerID)
		}

		if first.R.Customer != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Customer != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CustomerDTBCustomerFavoriteProducts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CustomerDTBCustomerFavoriteProducts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CustomerDTBCustomerFavoriteProducts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDTBCustomerToManySetOpCustomerDTBCustomerFavoriteProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBCustomer
	var b, c, d, e DTBCustomerFavoriteProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbCustomerDBTypes, false, strmangle.SetComplement(dtbCustomerPrimaryKeyColumns, dtbCustomerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBCustomerFavoriteProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbCustomerFavoriteProductDBTypes, false, strmangle.SetComplement(dtbCustomerFavoriteProductPrimaryKeyColumns, dtbCustomerFavoriteProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCustomerDTBCustomerFavoriteProducts(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CustomerDTBCustomerFavoriteProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCustomerDTBCustomerFavoriteProducts(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CustomerDTBCustomerFavoriteProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CustomerID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CustomerID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CustomerID) {
		t.Error("foreign key was wrong value", a.ID, d.CustomerID)
	}
	if !queries.Equal(a.ID, e.CustomerID) {
		t.Error("foreign key was wrong value", a.ID, e.CustomerID)
	}

	if b.R.Customer != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Customer != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Customer != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Customer != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CustomerDTBCustomerFavoriteProducts[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CustomerDTBCustomerFavoriteProducts[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDTBCustomerToManyRemoveOpCustomerDTBCustomerFavoriteProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBCustomer
	var b, c, d, e DTBCustomerFavoriteProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbCustomerDBTypes, false, strmangle.SetComplement(dtbCustomerPrimaryKeyColumns, dtbCustomerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBCustomerFavoriteProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbCustomerFavoriteProductDBTypes, false, strmangle.SetComplement(dtbCustomerFavoriteProductPrimaryKeyColumns, dtbCustomerFavoriteProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCustomerDTBCustomerFavoriteProducts(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CustomerDTBCustomerFavoriteProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCustomerDTBCustomerFavoriteProducts(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CustomerDTBCustomerFavoriteProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CustomerID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CustomerID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Customer != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Customer != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Customer != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Customer != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CustomerDTBCustomerFavoriteProducts) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CustomerDTBCustomerFavoriteProducts[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CustomerDTBCustomerFavoriteProducts[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDTBCustomerToManyAddOpCustomerDTBOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBCustomer
	var b, c, d, e DTBOrder

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbCustomerDBTypes, false, strmangle.SetComplement(dtbCustomerPrimaryKeyColumns, dtbCustomerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBOrder{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBOrder{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCustomerDTBOrders(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CustomerID) {
			t.Error("foreign key was wrong value", a.ID, first.CustomerID)
		}
		if !queries.Equal(a.ID, second.CustomerID) {
			t.Error("foreign key was wrong value", a.ID, second.CustomerID)
		}

		if first.R.Customer != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Customer != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CustomerDTBOrders[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CustomerDTBOrders[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CustomerDTBOrders().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDTBCustomerToManySetOpCustomerDTBOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBCustomer
	var b, c, d, e DTBOrder

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbCustomerDBTypes, false, strmangle.SetComplement(dtbCustomerPrimaryKeyColumns, dtbCustomerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBOrder{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCustomerDTBOrders(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CustomerDTBOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCustomerDTBOrders(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CustomerDTBOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CustomerID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CustomerID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CustomerID) {
		t.Error("foreign key was wrong value", a.ID, d.CustomerID)
	}
	if !queries.Equal(a.ID, e.CustomerID) {
		t.Error("foreign key was wrong value", a.ID, e.CustomerID)
	}

	if b.R.Customer != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Customer != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Customer != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Customer != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CustomerDTBOrders[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CustomerDTBOrders[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDTBCustomerToManyRemoveOpCustomerDTBOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBCustomer
	var b, c, d, e DTBOrder

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbCustomerDBTypes, false, strmangle.SetComplement(dtbCustomerPrimaryKeyColumns, dtbCustomerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBOrder{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCustomerDTBOrders(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CustomerDTBOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCustomerDTBOrders(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CustomerDTBOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CustomerID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CustomerID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Customer != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Customer != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Customer != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Customer != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CustomerDTBOrders) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CustomerDTBOrders[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CustomerDTBOrders[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDTBCustomerToOneMTBSexUsingSex(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBCustomer
	var foreign MTBSex

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbCustomerDBTypes, true, dtbCustomerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomer struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, mtbSexDBTypes, false, mtbSexColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBSex struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.SexID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Sex().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBCustomerSlice{&local}
	if err = local.L.LoadSex(ctx, tx, false, (*[]*DTBCustomer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Sex == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Sex = nil
	if err = local.L.LoadSex(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Sex == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBCustomerToOneMTBJobUsingJob(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBCustomer
	var foreign MTBJob

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbCustomerDBTypes, true, dtbCustomerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomer struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, mtbJobDBTypes, false, mtbJobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBJob struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.JobID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Job().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBCustomerSlice{&local}
	if err = local.L.LoadJob(ctx, tx, false, (*[]*DTBCustomer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Job == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Job = nil
	if err = local.L.LoadJob(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Job == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBCustomerToOneMTBCustomerStatusUsingCustomerStatus(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBCustomer
	var foreign MTBCustomerStatus

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbCustomerDBTypes, true, dtbCustomerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomer struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, mtbCustomerStatusDBTypes, false, mtbCustomerStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCustomerStatus struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CustomerStatusID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.CustomerStatus().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBCustomerSlice{&local}
	if err = local.L.LoadCustomerStatus(ctx, tx, false, (*[]*DTBCustomer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CustomerStatus == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.CustomerStatus = nil
	if err = local.L.LoadCustomerStatus(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CustomerStatus == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBCustomerToOneMTBPrefUsingPref(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBCustomer
	var foreign MTBPref

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbCustomerDBTypes, true, dtbCustomerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomer struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, mtbPrefDBTypes, false, mtbPrefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPref struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.PrefID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Pref().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBCustomerSlice{&local}
	if err = local.L.LoadPref(ctx, tx, false, (*[]*DTBCustomer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Pref == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Pref = nil
	if err = local.L.LoadPref(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Pref == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBCustomerToOneMTBCountryUsingCountry(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBCustomer
	var foreign MTBCountry

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbCustomerDBTypes, true, dtbCustomerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomer struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, mtbCountryDBTypes, false, mtbCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCountry struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CountryID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Country().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBCustomerSlice{&local}
	if err = local.L.LoadCountry(ctx, tx, false, (*[]*DTBCustomer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Country == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Country = nil
	if err = local.L.LoadCountry(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Country == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBCustomerToOneSetOpMTBSexUsingSex(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBCustomer
	var b, c MTBSex

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbCustomerDBTypes, false, strmangle.SetComplement(dtbCustomerPrimaryKeyColumns, dtbCustomerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbSexDBTypes, false, strmangle.SetComplement(mtbSexPrimaryKeyColumns, mtbSexColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mtbSexDBTypes, false, strmangle.SetComplement(mtbSexPrimaryKeyColumns, mtbSexColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MTBSex{&b, &c} {
		err = a.SetSex(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Sex != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SexDTBCustomers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.SexID, x.ID) {
			t.Error("foreign key was wrong value", a.SexID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SexID))
		reflect.Indirect(reflect.ValueOf(&a.SexID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.SexID, x.ID) {
			t.Error("foreign key was wrong value", a.SexID, x.ID)
		}
	}
}

func testDTBCustomerToOneRemoveOpMTBSexUsingSex(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBCustomer
	var b MTBSex

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbCustomerDBTypes, false, strmangle.SetComplement(dtbCustomerPrimaryKeyColumns, dtbCustomerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbSexDBTypes, false, strmangle.SetComplement(mtbSexPrimaryKeyColumns, mtbSexColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSex(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSex(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Sex().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Sex != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.SexID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.SexDTBCustomers) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBCustomerToOneSetOpMTBJobUsingJob(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBCustomer
	var b, c MTBJob

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbCustomerDBTypes, false, strmangle.SetComplement(dtbCustomerPrimaryKeyColumns, dtbCustomerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbJobDBTypes, false, strmangle.SetComplement(mtbJobPrimaryKeyColumns, mtbJobColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mtbJobDBTypes, false, strmangle.SetComplement(mtbJobPrimaryKeyColumns, mtbJobColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MTBJob{&b, &c} {
		err = a.SetJob(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Job != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.JobDTBCustomers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.JobID, x.ID) {
			t.Error("foreign key was wrong value", a.JobID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.JobID))
		reflect.Indirect(reflect.ValueOf(&a.JobID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.JobID, x.ID) {
			t.Error("foreign key was wrong value", a.JobID, x.ID)
		}
	}
}

func testDTBCustomerToOneRemoveOpMTBJobUsingJob(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBCustomer
	var b MTBJob

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbCustomerDBTypes, false, strmangle.SetComplement(dtbCustomerPrimaryKeyColumns, dtbCustomerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbJobDBTypes, false, strmangle.SetComplement(mtbJobPrimaryKeyColumns, mtbJobColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetJob(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveJob(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Job().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Job != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.JobID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.JobDTBCustomers) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBCustomerToOneSetOpMTBCustomerStatusUsingCustomerStatus(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBCustomer
	var b, c MTBCustomerStatus

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbCustomerDBTypes, false, strmangle.SetComplement(dtbCustomerPrimaryKeyColumns, dtbCustomerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbCustomerStatusDBTypes, false, strmangle.SetComplement(mtbCustomerStatusPrimaryKeyColumns, mtbCustomerStatusColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mtbCustomerStatusDBTypes, false, strmangle.SetComplement(mtbCustomerStatusPrimaryKeyColumns, mtbCustomerStatusColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MTBCustomerStatus{&b, &c} {
		err = a.SetCustomerStatus(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.CustomerStatus != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CustomerStatusDTBCustomers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CustomerStatusID, x.ID) {
			t.Error("foreign key was wrong value", a.CustomerStatusID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CustomerStatusID))
		reflect.Indirect(reflect.ValueOf(&a.CustomerStatusID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CustomerStatusID, x.ID) {
			t.Error("foreign key was wrong value", a.CustomerStatusID, x.ID)
		}
	}
}

func testDTBCustomerToOneRemoveOpMTBCustomerStatusUsingCustomerStatus(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBCustomer
	var b MTBCustomerStatus

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbCustomerDBTypes, false, strmangle.SetComplement(dtbCustomerPrimaryKeyColumns, dtbCustomerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbCustomerStatusDBTypes, false, strmangle.SetComplement(mtbCustomerStatusPrimaryKeyColumns, mtbCustomerStatusColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCustomerStatus(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCustomerStatus(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.CustomerStatus().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.CustomerStatus != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CustomerStatusID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CustomerStatusDTBCustomers) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBCustomerToOneSetOpMTBPrefUsingPref(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBCustomer
	var b, c MTBPref

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbCustomerDBTypes, false, strmangle.SetComplement(dtbCustomerPrimaryKeyColumns, dtbCustomerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MTBPref{&b, &c} {
		err = a.SetPref(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Pref != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PrefDTBCustomers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.PrefID, x.ID) {
			t.Error("foreign key was wrong value", a.PrefID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PrefID))
		reflect.Indirect(reflect.ValueOf(&a.PrefID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.PrefID, x.ID) {
			t.Error("foreign key was wrong value", a.PrefID, x.ID)
		}
	}
}

func testDTBCustomerToOneRemoveOpMTBPrefUsingPref(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBCustomer
	var b MTBPref

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbCustomerDBTypes, false, strmangle.SetComplement(dtbCustomerPrimaryKeyColumns, dtbCustomerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetPref(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemovePref(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Pref().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Pref != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.PrefID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.PrefDTBCustomers) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBCustomerToOneSetOpMTBCountryUsingCountry(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBCustomer
	var b, c MTBCountry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbCustomerDBTypes, false, strmangle.SetComplement(dtbCustomerPrimaryKeyColumns, dtbCustomerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbCountryDBTypes, false, strmangle.SetComplement(mtbCountryPrimaryKeyColumns, mtbCountryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mtbCountryDBTypes, false, strmangle.SetComplement(mtbCountryPrimaryKeyColumns, mtbCountryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MTBCountry{&b, &c} {
		err = a.SetCountry(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Country != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CountryDTBCustomers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CountryID, x.ID) {
			t.Error("foreign key was wrong value", a.CountryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CountryID))
		reflect.Indirect(reflect.ValueOf(&a.CountryID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CountryID, x.ID) {
			t.Error("foreign key was wrong value", a.CountryID, x.ID)
		}
	}
}

func testDTBCustomerToOneRemoveOpMTBCountryUsingCountry(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBCustomer
	var b MTBCountry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbCustomerDBTypes, false, strmangle.SetComplement(dtbCustomerPrimaryKeyColumns, dtbCustomerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbCountryDBTypes, false, strmangle.SetComplement(mtbCountryPrimaryKeyColumns, mtbCountryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCountry(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCountry(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Country().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Country != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CountryID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CountryDTBCustomers) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBCustomersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBCustomer{}
	if err = randomize.Struct(seed, o, dtbCustomerDBTypes, true, dtbCustomerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBCustomersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBCustomer{}
	if err = randomize.Struct(seed, o, dtbCustomerDBTypes, true, dtbCustomerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBCustomerSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBCustomersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBCustomer{}
	if err = randomize.Struct(seed, o, dtbCustomerDBTypes, true, dtbCustomerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBCustomers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dtbCustomerDBTypes = map[string]string{`ID`: `int`, `CustomerStatusID`: `smallint`, `SexID`: `smallint`, `JobID`: `smallint`, `CountryID`: `smallint`, `PrefID`: `smallint`, `Name01`: `varchar`, `Name02`: `varchar`, `Kana01`: `varchar`, `Kana02`: `varchar`, `CompanyName`: `varchar`, `PostalCode`: `varchar`, `Addr01`: `varchar`, `Addr02`: `varchar`, `Email`: `varchar`, `PhoneNumber`: `varchar`, `Birth`: `datetime`, `Password`: `varchar`, `Salt`: `varchar`, `SecretKey`: `varchar`, `FirstBuyDate`: `datetime`, `LastBuyDate`: `datetime`, `BuyTimes`: `decimal`, `BuyTotal`: `decimal`, `Note`: `varchar`, `ResetKey`: `varchar`, `ResetExpire`: `datetime`, `Point`: `decimal`, `CreateDate`: `datetime`, `UpdateDate`: `datetime`, `DiscriminatorType`: `varchar`}
	_                  = bytes.MinRead
)

func testDTBCustomersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dtbCustomerPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dtbCustomerColumns) == len(dtbCustomerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBCustomer{}
	if err = randomize.Struct(seed, o, dtbCustomerDBTypes, true, dtbCustomerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBCustomers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbCustomerDBTypes, true, dtbCustomerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBCustomer struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDTBCustomersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dtbCustomerColumns) == len(dtbCustomerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBCustomer{}
	if err = randomize.Struct(seed, o, dtbCustomerDBTypes, true, dtbCustomerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCustomer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBCustomers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbCustomerDBTypes, true, dtbCustomerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBCustomer struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dtbCustomerColumns, dtbCustomerPrimaryKeyColumns) {
		fields = dtbCustomerColumns
	} else {
		fields = strmangle.SetComplement(
			dtbCustomerColumns,
			dtbCustomerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DTBCustomerSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDTBCustomersUpsert(t *testing.T) {
	t.Parallel()

	if len(dtbCustomerColumns) == len(dtbCustomerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDTBCustomerUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DTBCustomer{}
	if err = randomize.Struct(seed, &o, dtbCustomerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBCustomer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBCustomer: %s", err)
	}

	count, err := DTBCustomers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dtbCustomerDBTypes, false, dtbCustomerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBCustomer struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBCustomer: %s", err)
	}

	count, err = DTBCustomers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
