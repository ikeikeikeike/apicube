// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDTBMembers(t *testing.T) {
	t.Parallel()

	query := DTBMembers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDTBMembersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBMember{}
	if err = randomize.Struct(seed, o, dtbMemberDBTypes, true, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBMembersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBMember{}
	if err = randomize.Struct(seed, o, dtbMemberDBTypes, true, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DTBMembers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBMembersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBMember{}
	if err = randomize.Struct(seed, o, dtbMemberDBTypes, true, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBMemberSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBMembersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBMember{}
	if err = randomize.Struct(seed, o, dtbMemberDBTypes, true, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DTBMemberExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DTBMember exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DTBMemberExists to return true, but got false.")
	}
}

func testDTBMembersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBMember{}
	if err = randomize.Struct(seed, o, dtbMemberDBTypes, true, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dtbMemberFound, err := FindDTBMember(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if dtbMemberFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDTBMembersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBMember{}
	if err = randomize.Struct(seed, o, dtbMemberDBTypes, true, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DTBMembers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDTBMembersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBMember{}
	if err = randomize.Struct(seed, o, dtbMemberDBTypes, true, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DTBMembers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDTBMembersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtbMemberOne := &DTBMember{}
	dtbMemberTwo := &DTBMember{}
	if err = randomize.Struct(seed, dtbMemberOne, dtbMemberDBTypes, false, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbMemberTwo, dtbMemberDBTypes, false, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbMemberOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbMemberTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBMembers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDTBMembersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dtbMemberOne := &DTBMember{}
	dtbMemberTwo := &DTBMember{}
	if err = randomize.Struct(seed, dtbMemberOne, dtbMemberDBTypes, false, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbMemberTwo, dtbMemberDBTypes, false, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbMemberOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbMemberTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dtbMemberBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBMember) error {
	*o = DTBMember{}
	return nil
}

func dtbMemberAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBMember) error {
	*o = DTBMember{}
	return nil
}

func dtbMemberAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DTBMember) error {
	*o = DTBMember{}
	return nil
}

func dtbMemberBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBMember) error {
	*o = DTBMember{}
	return nil
}

func dtbMemberAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBMember) error {
	*o = DTBMember{}
	return nil
}

func dtbMemberBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBMember) error {
	*o = DTBMember{}
	return nil
}

func dtbMemberAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBMember) error {
	*o = DTBMember{}
	return nil
}

func dtbMemberBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBMember) error {
	*o = DTBMember{}
	return nil
}

func dtbMemberAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBMember) error {
	*o = DTBMember{}
	return nil
}

func testDTBMembersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DTBMember{}
	o := &DTBMember{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dtbMemberDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBMember object: %s", err)
	}

	AddDTBMemberHook(boil.BeforeInsertHook, dtbMemberBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dtbMemberBeforeInsertHooks = []DTBMemberHook{}

	AddDTBMemberHook(boil.AfterInsertHook, dtbMemberAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dtbMemberAfterInsertHooks = []DTBMemberHook{}

	AddDTBMemberHook(boil.AfterSelectHook, dtbMemberAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dtbMemberAfterSelectHooks = []DTBMemberHook{}

	AddDTBMemberHook(boil.BeforeUpdateHook, dtbMemberBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dtbMemberBeforeUpdateHooks = []DTBMemberHook{}

	AddDTBMemberHook(boil.AfterUpdateHook, dtbMemberAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dtbMemberAfterUpdateHooks = []DTBMemberHook{}

	AddDTBMemberHook(boil.BeforeDeleteHook, dtbMemberBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dtbMemberBeforeDeleteHooks = []DTBMemberHook{}

	AddDTBMemberHook(boil.AfterDeleteHook, dtbMemberAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dtbMemberAfterDeleteHooks = []DTBMemberHook{}

	AddDTBMemberHook(boil.BeforeUpsertHook, dtbMemberBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dtbMemberBeforeUpsertHooks = []DTBMemberHook{}

	AddDTBMemberHook(boil.AfterUpsertHook, dtbMemberAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dtbMemberAfterUpsertHooks = []DTBMemberHook{}
}

func testDTBMembersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBMember{}
	if err = randomize.Struct(seed, o, dtbMemberDBTypes, true, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBMembersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBMember{}
	if err = randomize.Struct(seed, o, dtbMemberDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dtbMemberColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DTBMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBMemberToManyCreatorDTBAuthorityRoles(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c DTBAuthorityRole

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, true, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbAuthorityRoleDBTypes, false, dtbAuthorityRoleColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbAuthorityRoleDBTypes, false, dtbAuthorityRoleColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CreatorID, a.ID)
	queries.Assign(&c.CreatorID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CreatorDTBAuthorityRoles().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CreatorID, b.CreatorID) {
			bFound = true
		}
		if queries.Equal(v.CreatorID, c.CreatorID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBMemberSlice{&a}
	if err = a.L.LoadCreatorDTBAuthorityRoles(ctx, tx, false, (*[]*DTBMember)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorDTBAuthorityRoles); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CreatorDTBAuthorityRoles = nil
	if err = a.L.LoadCreatorDTBAuthorityRoles(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorDTBAuthorityRoles); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBMemberToManyCreatorDTBCategories(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c DTBCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, true, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbCategoryDBTypes, false, dtbCategoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbCategoryDBTypes, false, dtbCategoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CreatorID, a.ID)
	queries.Assign(&c.CreatorID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CreatorDTBCategories().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CreatorID, b.CreatorID) {
			bFound = true
		}
		if queries.Equal(v.CreatorID, c.CreatorID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBMemberSlice{&a}
	if err = a.L.LoadCreatorDTBCategories(ctx, tx, false, (*[]*DTBMember)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorDTBCategories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CreatorDTBCategories = nil
	if err = a.L.LoadCreatorDTBCategories(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorDTBCategories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBMemberToManyCreatorDTBClassCategories(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c DTBClassCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, true, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbClassCategoryDBTypes, false, dtbClassCategoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbClassCategoryDBTypes, false, dtbClassCategoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CreatorID, a.ID)
	queries.Assign(&c.CreatorID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CreatorDTBClassCategories().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CreatorID, b.CreatorID) {
			bFound = true
		}
		if queries.Equal(v.CreatorID, c.CreatorID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBMemberSlice{&a}
	if err = a.L.LoadCreatorDTBClassCategories(ctx, tx, false, (*[]*DTBMember)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorDTBClassCategories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CreatorDTBClassCategories = nil
	if err = a.L.LoadCreatorDTBClassCategories(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorDTBClassCategories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBMemberToManyCreatorDTBClassNames(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c DTBClassName

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, true, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbClassNameDBTypes, false, dtbClassNameColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbClassNameDBTypes, false, dtbClassNameColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CreatorID, a.ID)
	queries.Assign(&c.CreatorID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CreatorDTBClassNames().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CreatorID, b.CreatorID) {
			bFound = true
		}
		if queries.Equal(v.CreatorID, c.CreatorID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBMemberSlice{&a}
	if err = a.L.LoadCreatorDTBClassNames(ctx, tx, false, (*[]*DTBMember)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorDTBClassNames); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CreatorDTBClassNames = nil
	if err = a.L.LoadCreatorDTBClassNames(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorDTBClassNames); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBMemberToManyCreatorDTBCSVS(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c DTBCSV

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, true, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbCSVDBTypes, false, dtbCSVColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbCSVDBTypes, false, dtbCSVColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CreatorID, a.ID)
	queries.Assign(&c.CreatorID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CreatorDTBCSVS().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CreatorID, b.CreatorID) {
			bFound = true
		}
		if queries.Equal(v.CreatorID, c.CreatorID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBMemberSlice{&a}
	if err = a.L.LoadCreatorDTBCSVS(ctx, tx, false, (*[]*DTBMember)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorDTBCSVS); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CreatorDTBCSVS = nil
	if err = a.L.LoadCreatorDTBCSVS(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorDTBCSVS); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBMemberToManyCreatorDTBDeliveries(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c DTBDelivery

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, true, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbDeliveryDBTypes, false, dtbDeliveryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbDeliveryDBTypes, false, dtbDeliveryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CreatorID, a.ID)
	queries.Assign(&c.CreatorID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CreatorDTBDeliveries().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CreatorID, b.CreatorID) {
			bFound = true
		}
		if queries.Equal(v.CreatorID, c.CreatorID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBMemberSlice{&a}
	if err = a.L.LoadCreatorDTBDeliveries(ctx, tx, false, (*[]*DTBMember)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorDTBDeliveries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CreatorDTBDeliveries = nil
	if err = a.L.LoadCreatorDTBDeliveries(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorDTBDeliveries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBMemberToManyCreatorDTBMailHistories(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c DTBMailHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, true, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbMailHistoryDBTypes, false, dtbMailHistoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbMailHistoryDBTypes, false, dtbMailHistoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CreatorID, a.ID)
	queries.Assign(&c.CreatorID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CreatorDTBMailHistories().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CreatorID, b.CreatorID) {
			bFound = true
		}
		if queries.Equal(v.CreatorID, c.CreatorID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBMemberSlice{&a}
	if err = a.L.LoadCreatorDTBMailHistories(ctx, tx, false, (*[]*DTBMember)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorDTBMailHistories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CreatorDTBMailHistories = nil
	if err = a.L.LoadCreatorDTBMailHistories(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorDTBMailHistories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBMemberToManyCreatorDTBMailTemplates(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c DTBMailTemplate

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, true, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbMailTemplateDBTypes, false, dtbMailTemplateColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbMailTemplateDBTypes, false, dtbMailTemplateColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CreatorID, a.ID)
	queries.Assign(&c.CreatorID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CreatorDTBMailTemplates().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CreatorID, b.CreatorID) {
			bFound = true
		}
		if queries.Equal(v.CreatorID, c.CreatorID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBMemberSlice{&a}
	if err = a.L.LoadCreatorDTBMailTemplates(ctx, tx, false, (*[]*DTBMember)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorDTBMailTemplates); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CreatorDTBMailTemplates = nil
	if err = a.L.LoadCreatorDTBMailTemplates(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorDTBMailTemplates); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBMemberToManyCreatorDTBMembers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c DTBMember

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, true, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbMemberDBTypes, false, dtbMemberColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbMemberDBTypes, false, dtbMemberColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CreatorID, a.ID)
	queries.Assign(&c.CreatorID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CreatorDTBMembers().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CreatorID, b.CreatorID) {
			bFound = true
		}
		if queries.Equal(v.CreatorID, c.CreatorID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBMemberSlice{&a}
	if err = a.L.LoadCreatorDTBMembers(ctx, tx, false, (*[]*DTBMember)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorDTBMembers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CreatorDTBMembers = nil
	if err = a.L.LoadCreatorDTBMembers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorDTBMembers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBMemberToManyCreatorDTBNews(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c DTBNews

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, true, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbNewsDBTypes, false, dtbNewsColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbNewsDBTypes, false, dtbNewsColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CreatorID, a.ID)
	queries.Assign(&c.CreatorID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CreatorDTBNews().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CreatorID, b.CreatorID) {
			bFound = true
		}
		if queries.Equal(v.CreatorID, c.CreatorID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBMemberSlice{&a}
	if err = a.L.LoadCreatorDTBNews(ctx, tx, false, (*[]*DTBMember)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorDTBNews); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CreatorDTBNews = nil
	if err = a.L.LoadCreatorDTBNews(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorDTBNews); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBMemberToManyCreatorDTBPayments(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c DTBPayment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, true, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbPaymentDBTypes, false, dtbPaymentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbPaymentDBTypes, false, dtbPaymentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CreatorID, a.ID)
	queries.Assign(&c.CreatorID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CreatorDTBPayments().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CreatorID, b.CreatorID) {
			bFound = true
		}
		if queries.Equal(v.CreatorID, c.CreatorID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBMemberSlice{&a}
	if err = a.L.LoadCreatorDTBPayments(ctx, tx, false, (*[]*DTBMember)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorDTBPayments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CreatorDTBPayments = nil
	if err = a.L.LoadCreatorDTBPayments(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorDTBPayments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBMemberToManyCreatorDTBProducts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c DTBProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, true, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbProductDBTypes, false, dtbProductColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbProductDBTypes, false, dtbProductColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CreatorID, a.ID)
	queries.Assign(&c.CreatorID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CreatorDTBProducts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CreatorID, b.CreatorID) {
			bFound = true
		}
		if queries.Equal(v.CreatorID, c.CreatorID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBMemberSlice{&a}
	if err = a.L.LoadCreatorDTBProducts(ctx, tx, false, (*[]*DTBMember)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorDTBProducts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CreatorDTBProducts = nil
	if err = a.L.LoadCreatorDTBProducts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorDTBProducts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBMemberToManyCreatorDTBProductClasses(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c DTBProductClass

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, true, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbProductClassDBTypes, false, dtbProductClassColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbProductClassDBTypes, false, dtbProductClassColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CreatorID, a.ID)
	queries.Assign(&c.CreatorID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CreatorDTBProductClasses().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CreatorID, b.CreatorID) {
			bFound = true
		}
		if queries.Equal(v.CreatorID, c.CreatorID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBMemberSlice{&a}
	if err = a.L.LoadCreatorDTBProductClasses(ctx, tx, false, (*[]*DTBMember)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorDTBProductClasses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CreatorDTBProductClasses = nil
	if err = a.L.LoadCreatorDTBProductClasses(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorDTBProductClasses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBMemberToManyCreatorDTBProductImages(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c DTBProductImage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, true, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbProductImageDBTypes, false, dtbProductImageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbProductImageDBTypes, false, dtbProductImageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CreatorID, a.ID)
	queries.Assign(&c.CreatorID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CreatorDTBProductImages().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CreatorID, b.CreatorID) {
			bFound = true
		}
		if queries.Equal(v.CreatorID, c.CreatorID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBMemberSlice{&a}
	if err = a.L.LoadCreatorDTBProductImages(ctx, tx, false, (*[]*DTBMember)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorDTBProductImages); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CreatorDTBProductImages = nil
	if err = a.L.LoadCreatorDTBProductImages(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorDTBProductImages); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBMemberToManyCreatorDTBProductStocks(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c DTBProductStock

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, true, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbProductStockDBTypes, false, dtbProductStockColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbProductStockDBTypes, false, dtbProductStockColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CreatorID, a.ID)
	queries.Assign(&c.CreatorID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CreatorDTBProductStocks().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CreatorID, b.CreatorID) {
			bFound = true
		}
		if queries.Equal(v.CreatorID, c.CreatorID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBMemberSlice{&a}
	if err = a.L.LoadCreatorDTBProductStocks(ctx, tx, false, (*[]*DTBMember)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorDTBProductStocks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CreatorDTBProductStocks = nil
	if err = a.L.LoadCreatorDTBProductStocks(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorDTBProductStocks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBMemberToManyCreatorDTBProductTags(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c DTBProductTag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, true, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbProductTagDBTypes, false, dtbProductTagColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbProductTagDBTypes, false, dtbProductTagColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CreatorID, a.ID)
	queries.Assign(&c.CreatorID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CreatorDTBProductTags().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CreatorID, b.CreatorID) {
			bFound = true
		}
		if queries.Equal(v.CreatorID, c.CreatorID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBMemberSlice{&a}
	if err = a.L.LoadCreatorDTBProductTags(ctx, tx, false, (*[]*DTBMember)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorDTBProductTags); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CreatorDTBProductTags = nil
	if err = a.L.LoadCreatorDTBProductTags(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorDTBProductTags); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBMemberToManyCreatorDTBShippings(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c DTBShipping

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, true, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbShippingDBTypes, false, dtbShippingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbShippingDBTypes, false, dtbShippingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CreatorID, a.ID)
	queries.Assign(&c.CreatorID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CreatorDTBShippings().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CreatorID, b.CreatorID) {
			bFound = true
		}
		if queries.Equal(v.CreatorID, c.CreatorID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBMemberSlice{&a}
	if err = a.L.LoadCreatorDTBShippings(ctx, tx, false, (*[]*DTBMember)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorDTBShippings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CreatorDTBShippings = nil
	if err = a.L.LoadCreatorDTBShippings(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorDTBShippings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBMemberToManyCreatorDTBTaxRules(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c DTBTaxRule

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, true, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbTaxRuleDBTypes, false, dtbTaxRuleColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbTaxRuleDBTypes, false, dtbTaxRuleColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CreatorID, a.ID)
	queries.Assign(&c.CreatorID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CreatorDTBTaxRules().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CreatorID, b.CreatorID) {
			bFound = true
		}
		if queries.Equal(v.CreatorID, c.CreatorID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBMemberSlice{&a}
	if err = a.L.LoadCreatorDTBTaxRules(ctx, tx, false, (*[]*DTBMember)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorDTBTaxRules); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CreatorDTBTaxRules = nil
	if err = a.L.LoadCreatorDTBTaxRules(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatorDTBTaxRules); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBMemberToManyAddOpCreatorDTBAuthorityRoles(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBAuthorityRole

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBAuthorityRole{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbAuthorityRoleDBTypes, false, strmangle.SetComplement(dtbAuthorityRolePrimaryKeyColumns, dtbAuthorityRoleColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBAuthorityRole{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCreatorDTBAuthorityRoles(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CreatorID) {
			t.Error("foreign key was wrong value", a.ID, first.CreatorID)
		}
		if !queries.Equal(a.ID, second.CreatorID) {
			t.Error("foreign key was wrong value", a.ID, second.CreatorID)
		}

		if first.R.Creator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Creator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CreatorDTBAuthorityRoles[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CreatorDTBAuthorityRoles[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CreatorDTBAuthorityRoles().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDTBMemberToManySetOpCreatorDTBAuthorityRoles(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBAuthorityRole

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBAuthorityRole{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbAuthorityRoleDBTypes, false, strmangle.SetComplement(dtbAuthorityRolePrimaryKeyColumns, dtbAuthorityRoleColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCreatorDTBAuthorityRoles(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorDTBAuthorityRoles().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCreatorDTBAuthorityRoles(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorDTBAuthorityRoles().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CreatorID) {
		t.Error("foreign key was wrong value", a.ID, d.CreatorID)
	}
	if !queries.Equal(a.ID, e.CreatorID) {
		t.Error("foreign key was wrong value", a.ID, e.CreatorID)
	}

	if b.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Creator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Creator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CreatorDTBAuthorityRoles[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CreatorDTBAuthorityRoles[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDTBMemberToManyRemoveOpCreatorDTBAuthorityRoles(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBAuthorityRole

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBAuthorityRole{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbAuthorityRoleDBTypes, false, strmangle.SetComplement(dtbAuthorityRolePrimaryKeyColumns, dtbAuthorityRoleColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCreatorDTBAuthorityRoles(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorDTBAuthorityRoles().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCreatorDTBAuthorityRoles(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorDTBAuthorityRoles().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Creator != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Creator != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CreatorDTBAuthorityRoles) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CreatorDTBAuthorityRoles[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CreatorDTBAuthorityRoles[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDTBMemberToManyAddOpCreatorDTBCategories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBCategory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbCategoryDBTypes, false, strmangle.SetComplement(dtbCategoryPrimaryKeyColumns, dtbCategoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBCategory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCreatorDTBCategories(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CreatorID) {
			t.Error("foreign key was wrong value", a.ID, first.CreatorID)
		}
		if !queries.Equal(a.ID, second.CreatorID) {
			t.Error("foreign key was wrong value", a.ID, second.CreatorID)
		}

		if first.R.Creator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Creator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CreatorDTBCategories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CreatorDTBCategories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CreatorDTBCategories().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDTBMemberToManySetOpCreatorDTBCategories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBCategory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbCategoryDBTypes, false, strmangle.SetComplement(dtbCategoryPrimaryKeyColumns, dtbCategoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCreatorDTBCategories(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorDTBCategories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCreatorDTBCategories(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorDTBCategories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CreatorID) {
		t.Error("foreign key was wrong value", a.ID, d.CreatorID)
	}
	if !queries.Equal(a.ID, e.CreatorID) {
		t.Error("foreign key was wrong value", a.ID, e.CreatorID)
	}

	if b.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Creator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Creator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CreatorDTBCategories[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CreatorDTBCategories[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDTBMemberToManyRemoveOpCreatorDTBCategories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBCategory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbCategoryDBTypes, false, strmangle.SetComplement(dtbCategoryPrimaryKeyColumns, dtbCategoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCreatorDTBCategories(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorDTBCategories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCreatorDTBCategories(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorDTBCategories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Creator != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Creator != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CreatorDTBCategories) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CreatorDTBCategories[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CreatorDTBCategories[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDTBMemberToManyAddOpCreatorDTBClassCategories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBClassCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBClassCategory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbClassCategoryDBTypes, false, strmangle.SetComplement(dtbClassCategoryPrimaryKeyColumns, dtbClassCategoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBClassCategory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCreatorDTBClassCategories(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CreatorID) {
			t.Error("foreign key was wrong value", a.ID, first.CreatorID)
		}
		if !queries.Equal(a.ID, second.CreatorID) {
			t.Error("foreign key was wrong value", a.ID, second.CreatorID)
		}

		if first.R.Creator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Creator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CreatorDTBClassCategories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CreatorDTBClassCategories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CreatorDTBClassCategories().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDTBMemberToManySetOpCreatorDTBClassCategories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBClassCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBClassCategory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbClassCategoryDBTypes, false, strmangle.SetComplement(dtbClassCategoryPrimaryKeyColumns, dtbClassCategoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCreatorDTBClassCategories(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorDTBClassCategories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCreatorDTBClassCategories(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorDTBClassCategories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CreatorID) {
		t.Error("foreign key was wrong value", a.ID, d.CreatorID)
	}
	if !queries.Equal(a.ID, e.CreatorID) {
		t.Error("foreign key was wrong value", a.ID, e.CreatorID)
	}

	if b.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Creator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Creator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CreatorDTBClassCategories[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CreatorDTBClassCategories[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDTBMemberToManyRemoveOpCreatorDTBClassCategories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBClassCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBClassCategory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbClassCategoryDBTypes, false, strmangle.SetComplement(dtbClassCategoryPrimaryKeyColumns, dtbClassCategoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCreatorDTBClassCategories(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorDTBClassCategories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCreatorDTBClassCategories(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorDTBClassCategories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Creator != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Creator != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CreatorDTBClassCategories) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CreatorDTBClassCategories[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CreatorDTBClassCategories[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDTBMemberToManyAddOpCreatorDTBClassNames(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBClassName

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBClassName{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbClassNameDBTypes, false, strmangle.SetComplement(dtbClassNamePrimaryKeyColumns, dtbClassNameColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBClassName{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCreatorDTBClassNames(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CreatorID) {
			t.Error("foreign key was wrong value", a.ID, first.CreatorID)
		}
		if !queries.Equal(a.ID, second.CreatorID) {
			t.Error("foreign key was wrong value", a.ID, second.CreatorID)
		}

		if first.R.Creator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Creator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CreatorDTBClassNames[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CreatorDTBClassNames[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CreatorDTBClassNames().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDTBMemberToManySetOpCreatorDTBClassNames(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBClassName

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBClassName{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbClassNameDBTypes, false, strmangle.SetComplement(dtbClassNamePrimaryKeyColumns, dtbClassNameColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCreatorDTBClassNames(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorDTBClassNames().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCreatorDTBClassNames(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorDTBClassNames().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CreatorID) {
		t.Error("foreign key was wrong value", a.ID, d.CreatorID)
	}
	if !queries.Equal(a.ID, e.CreatorID) {
		t.Error("foreign key was wrong value", a.ID, e.CreatorID)
	}

	if b.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Creator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Creator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CreatorDTBClassNames[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CreatorDTBClassNames[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDTBMemberToManyRemoveOpCreatorDTBClassNames(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBClassName

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBClassName{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbClassNameDBTypes, false, strmangle.SetComplement(dtbClassNamePrimaryKeyColumns, dtbClassNameColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCreatorDTBClassNames(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorDTBClassNames().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCreatorDTBClassNames(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorDTBClassNames().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Creator != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Creator != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CreatorDTBClassNames) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CreatorDTBClassNames[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CreatorDTBClassNames[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDTBMemberToManyAddOpCreatorDTBCSVS(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBCSV

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBCSV{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbCSVDBTypes, false, strmangle.SetComplement(dtbCSVPrimaryKeyColumns, dtbCSVColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBCSV{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCreatorDTBCSVS(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CreatorID) {
			t.Error("foreign key was wrong value", a.ID, first.CreatorID)
		}
		if !queries.Equal(a.ID, second.CreatorID) {
			t.Error("foreign key was wrong value", a.ID, second.CreatorID)
		}

		if first.R.Creator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Creator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CreatorDTBCSVS[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CreatorDTBCSVS[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CreatorDTBCSVS().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDTBMemberToManySetOpCreatorDTBCSVS(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBCSV

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBCSV{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbCSVDBTypes, false, strmangle.SetComplement(dtbCSVPrimaryKeyColumns, dtbCSVColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCreatorDTBCSVS(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorDTBCSVS().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCreatorDTBCSVS(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorDTBCSVS().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CreatorID) {
		t.Error("foreign key was wrong value", a.ID, d.CreatorID)
	}
	if !queries.Equal(a.ID, e.CreatorID) {
		t.Error("foreign key was wrong value", a.ID, e.CreatorID)
	}

	if b.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Creator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Creator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CreatorDTBCSVS[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CreatorDTBCSVS[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDTBMemberToManyRemoveOpCreatorDTBCSVS(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBCSV

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBCSV{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbCSVDBTypes, false, strmangle.SetComplement(dtbCSVPrimaryKeyColumns, dtbCSVColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCreatorDTBCSVS(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorDTBCSVS().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCreatorDTBCSVS(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorDTBCSVS().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Creator != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Creator != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CreatorDTBCSVS) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CreatorDTBCSVS[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CreatorDTBCSVS[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDTBMemberToManyAddOpCreatorDTBDeliveries(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBDelivery

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBDelivery{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbDeliveryDBTypes, false, strmangle.SetComplement(dtbDeliveryPrimaryKeyColumns, dtbDeliveryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBDelivery{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCreatorDTBDeliveries(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CreatorID) {
			t.Error("foreign key was wrong value", a.ID, first.CreatorID)
		}
		if !queries.Equal(a.ID, second.CreatorID) {
			t.Error("foreign key was wrong value", a.ID, second.CreatorID)
		}

		if first.R.Creator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Creator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CreatorDTBDeliveries[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CreatorDTBDeliveries[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CreatorDTBDeliveries().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDTBMemberToManySetOpCreatorDTBDeliveries(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBDelivery

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBDelivery{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbDeliveryDBTypes, false, strmangle.SetComplement(dtbDeliveryPrimaryKeyColumns, dtbDeliveryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCreatorDTBDeliveries(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorDTBDeliveries().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCreatorDTBDeliveries(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorDTBDeliveries().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CreatorID) {
		t.Error("foreign key was wrong value", a.ID, d.CreatorID)
	}
	if !queries.Equal(a.ID, e.CreatorID) {
		t.Error("foreign key was wrong value", a.ID, e.CreatorID)
	}

	if b.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Creator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Creator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CreatorDTBDeliveries[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CreatorDTBDeliveries[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDTBMemberToManyRemoveOpCreatorDTBDeliveries(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBDelivery

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBDelivery{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbDeliveryDBTypes, false, strmangle.SetComplement(dtbDeliveryPrimaryKeyColumns, dtbDeliveryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCreatorDTBDeliveries(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorDTBDeliveries().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCreatorDTBDeliveries(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorDTBDeliveries().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Creator != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Creator != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CreatorDTBDeliveries) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CreatorDTBDeliveries[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CreatorDTBDeliveries[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDTBMemberToManyAddOpCreatorDTBMailHistories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBMailHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBMailHistory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbMailHistoryDBTypes, false, strmangle.SetComplement(dtbMailHistoryPrimaryKeyColumns, dtbMailHistoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBMailHistory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCreatorDTBMailHistories(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CreatorID) {
			t.Error("foreign key was wrong value", a.ID, first.CreatorID)
		}
		if !queries.Equal(a.ID, second.CreatorID) {
			t.Error("foreign key was wrong value", a.ID, second.CreatorID)
		}

		if first.R.Creator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Creator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CreatorDTBMailHistories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CreatorDTBMailHistories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CreatorDTBMailHistories().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDTBMemberToManySetOpCreatorDTBMailHistories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBMailHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBMailHistory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbMailHistoryDBTypes, false, strmangle.SetComplement(dtbMailHistoryPrimaryKeyColumns, dtbMailHistoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCreatorDTBMailHistories(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorDTBMailHistories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCreatorDTBMailHistories(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorDTBMailHistories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CreatorID) {
		t.Error("foreign key was wrong value", a.ID, d.CreatorID)
	}
	if !queries.Equal(a.ID, e.CreatorID) {
		t.Error("foreign key was wrong value", a.ID, e.CreatorID)
	}

	if b.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Creator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Creator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CreatorDTBMailHistories[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CreatorDTBMailHistories[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDTBMemberToManyRemoveOpCreatorDTBMailHistories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBMailHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBMailHistory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbMailHistoryDBTypes, false, strmangle.SetComplement(dtbMailHistoryPrimaryKeyColumns, dtbMailHistoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCreatorDTBMailHistories(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorDTBMailHistories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCreatorDTBMailHistories(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorDTBMailHistories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Creator != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Creator != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CreatorDTBMailHistories) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CreatorDTBMailHistories[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CreatorDTBMailHistories[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDTBMemberToManyAddOpCreatorDTBMailTemplates(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBMailTemplate

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBMailTemplate{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbMailTemplateDBTypes, false, strmangle.SetComplement(dtbMailTemplatePrimaryKeyColumns, dtbMailTemplateColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBMailTemplate{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCreatorDTBMailTemplates(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CreatorID) {
			t.Error("foreign key was wrong value", a.ID, first.CreatorID)
		}
		if !queries.Equal(a.ID, second.CreatorID) {
			t.Error("foreign key was wrong value", a.ID, second.CreatorID)
		}

		if first.R.Creator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Creator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CreatorDTBMailTemplates[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CreatorDTBMailTemplates[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CreatorDTBMailTemplates().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDTBMemberToManySetOpCreatorDTBMailTemplates(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBMailTemplate

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBMailTemplate{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbMailTemplateDBTypes, false, strmangle.SetComplement(dtbMailTemplatePrimaryKeyColumns, dtbMailTemplateColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCreatorDTBMailTemplates(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorDTBMailTemplates().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCreatorDTBMailTemplates(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorDTBMailTemplates().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CreatorID) {
		t.Error("foreign key was wrong value", a.ID, d.CreatorID)
	}
	if !queries.Equal(a.ID, e.CreatorID) {
		t.Error("foreign key was wrong value", a.ID, e.CreatorID)
	}

	if b.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Creator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Creator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CreatorDTBMailTemplates[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CreatorDTBMailTemplates[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDTBMemberToManyRemoveOpCreatorDTBMailTemplates(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBMailTemplate

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBMailTemplate{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbMailTemplateDBTypes, false, strmangle.SetComplement(dtbMailTemplatePrimaryKeyColumns, dtbMailTemplateColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCreatorDTBMailTemplates(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorDTBMailTemplates().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCreatorDTBMailTemplates(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorDTBMailTemplates().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Creator != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Creator != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CreatorDTBMailTemplates) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CreatorDTBMailTemplates[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CreatorDTBMailTemplates[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDTBMemberToManyAddOpCreatorDTBMembers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBMember

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBMember{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBMember{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCreatorDTBMembers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CreatorID) {
			t.Error("foreign key was wrong value", a.ID, first.CreatorID)
		}
		if !queries.Equal(a.ID, second.CreatorID) {
			t.Error("foreign key was wrong value", a.ID, second.CreatorID)
		}

		if first.R.Creator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Creator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CreatorDTBMembers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CreatorDTBMembers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CreatorDTBMembers().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDTBMemberToManySetOpCreatorDTBMembers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBMember

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBMember{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCreatorDTBMembers(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorDTBMembers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCreatorDTBMembers(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorDTBMembers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CreatorID) {
		t.Error("foreign key was wrong value", a.ID, d.CreatorID)
	}
	if !queries.Equal(a.ID, e.CreatorID) {
		t.Error("foreign key was wrong value", a.ID, e.CreatorID)
	}

	if b.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Creator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Creator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CreatorDTBMembers[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CreatorDTBMembers[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDTBMemberToManyRemoveOpCreatorDTBMembers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBMember

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBMember{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCreatorDTBMembers(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorDTBMembers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCreatorDTBMembers(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorDTBMembers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Creator != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Creator != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CreatorDTBMembers) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CreatorDTBMembers[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CreatorDTBMembers[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDTBMemberToManyAddOpCreatorDTBNews(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBNews

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBNews{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbNewsDBTypes, false, strmangle.SetComplement(dtbNewsPrimaryKeyColumns, dtbNewsColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBNews{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCreatorDTBNews(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CreatorID) {
			t.Error("foreign key was wrong value", a.ID, first.CreatorID)
		}
		if !queries.Equal(a.ID, second.CreatorID) {
			t.Error("foreign key was wrong value", a.ID, second.CreatorID)
		}

		if first.R.Creator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Creator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CreatorDTBNews[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CreatorDTBNews[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CreatorDTBNews().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDTBMemberToManySetOpCreatorDTBNews(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBNews

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBNews{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbNewsDBTypes, false, strmangle.SetComplement(dtbNewsPrimaryKeyColumns, dtbNewsColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCreatorDTBNews(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorDTBNews().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCreatorDTBNews(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorDTBNews().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CreatorID) {
		t.Error("foreign key was wrong value", a.ID, d.CreatorID)
	}
	if !queries.Equal(a.ID, e.CreatorID) {
		t.Error("foreign key was wrong value", a.ID, e.CreatorID)
	}

	if b.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Creator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Creator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CreatorDTBNews[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CreatorDTBNews[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDTBMemberToManyRemoveOpCreatorDTBNews(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBNews

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBNews{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbNewsDBTypes, false, strmangle.SetComplement(dtbNewsPrimaryKeyColumns, dtbNewsColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCreatorDTBNews(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorDTBNews().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCreatorDTBNews(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorDTBNews().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Creator != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Creator != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CreatorDTBNews) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CreatorDTBNews[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CreatorDTBNews[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDTBMemberToManyAddOpCreatorDTBPayments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBPayment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBPayment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbPaymentDBTypes, false, strmangle.SetComplement(dtbPaymentPrimaryKeyColumns, dtbPaymentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBPayment{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCreatorDTBPayments(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CreatorID) {
			t.Error("foreign key was wrong value", a.ID, first.CreatorID)
		}
		if !queries.Equal(a.ID, second.CreatorID) {
			t.Error("foreign key was wrong value", a.ID, second.CreatorID)
		}

		if first.R.Creator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Creator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CreatorDTBPayments[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CreatorDTBPayments[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CreatorDTBPayments().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDTBMemberToManySetOpCreatorDTBPayments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBPayment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBPayment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbPaymentDBTypes, false, strmangle.SetComplement(dtbPaymentPrimaryKeyColumns, dtbPaymentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCreatorDTBPayments(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorDTBPayments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCreatorDTBPayments(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorDTBPayments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CreatorID) {
		t.Error("foreign key was wrong value", a.ID, d.CreatorID)
	}
	if !queries.Equal(a.ID, e.CreatorID) {
		t.Error("foreign key was wrong value", a.ID, e.CreatorID)
	}

	if b.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Creator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Creator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CreatorDTBPayments[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CreatorDTBPayments[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDTBMemberToManyRemoveOpCreatorDTBPayments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBPayment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBPayment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbPaymentDBTypes, false, strmangle.SetComplement(dtbPaymentPrimaryKeyColumns, dtbPaymentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCreatorDTBPayments(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorDTBPayments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCreatorDTBPayments(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorDTBPayments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Creator != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Creator != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CreatorDTBPayments) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CreatorDTBPayments[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CreatorDTBPayments[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDTBMemberToManyAddOpCreatorDTBProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbProductDBTypes, false, strmangle.SetComplement(dtbProductPrimaryKeyColumns, dtbProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBProduct{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCreatorDTBProducts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CreatorID) {
			t.Error("foreign key was wrong value", a.ID, first.CreatorID)
		}
		if !queries.Equal(a.ID, second.CreatorID) {
			t.Error("foreign key was wrong value", a.ID, second.CreatorID)
		}

		if first.R.Creator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Creator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CreatorDTBProducts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CreatorDTBProducts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CreatorDTBProducts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDTBMemberToManySetOpCreatorDTBProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbProductDBTypes, false, strmangle.SetComplement(dtbProductPrimaryKeyColumns, dtbProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCreatorDTBProducts(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorDTBProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCreatorDTBProducts(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorDTBProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CreatorID) {
		t.Error("foreign key was wrong value", a.ID, d.CreatorID)
	}
	if !queries.Equal(a.ID, e.CreatorID) {
		t.Error("foreign key was wrong value", a.ID, e.CreatorID)
	}

	if b.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Creator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Creator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CreatorDTBProducts[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CreatorDTBProducts[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDTBMemberToManyRemoveOpCreatorDTBProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbProductDBTypes, false, strmangle.SetComplement(dtbProductPrimaryKeyColumns, dtbProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCreatorDTBProducts(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorDTBProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCreatorDTBProducts(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorDTBProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Creator != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Creator != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CreatorDTBProducts) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CreatorDTBProducts[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CreatorDTBProducts[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDTBMemberToManyAddOpCreatorDTBProductClasses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBProductClass

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBProductClass{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbProductClassDBTypes, false, strmangle.SetComplement(dtbProductClassPrimaryKeyColumns, dtbProductClassColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBProductClass{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCreatorDTBProductClasses(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CreatorID) {
			t.Error("foreign key was wrong value", a.ID, first.CreatorID)
		}
		if !queries.Equal(a.ID, second.CreatorID) {
			t.Error("foreign key was wrong value", a.ID, second.CreatorID)
		}

		if first.R.Creator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Creator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CreatorDTBProductClasses[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CreatorDTBProductClasses[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CreatorDTBProductClasses().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDTBMemberToManySetOpCreatorDTBProductClasses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBProductClass

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBProductClass{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbProductClassDBTypes, false, strmangle.SetComplement(dtbProductClassPrimaryKeyColumns, dtbProductClassColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCreatorDTBProductClasses(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorDTBProductClasses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCreatorDTBProductClasses(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorDTBProductClasses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CreatorID) {
		t.Error("foreign key was wrong value", a.ID, d.CreatorID)
	}
	if !queries.Equal(a.ID, e.CreatorID) {
		t.Error("foreign key was wrong value", a.ID, e.CreatorID)
	}

	if b.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Creator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Creator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CreatorDTBProductClasses[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CreatorDTBProductClasses[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDTBMemberToManyRemoveOpCreatorDTBProductClasses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBProductClass

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBProductClass{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbProductClassDBTypes, false, strmangle.SetComplement(dtbProductClassPrimaryKeyColumns, dtbProductClassColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCreatorDTBProductClasses(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorDTBProductClasses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCreatorDTBProductClasses(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorDTBProductClasses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Creator != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Creator != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CreatorDTBProductClasses) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CreatorDTBProductClasses[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CreatorDTBProductClasses[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDTBMemberToManyAddOpCreatorDTBProductImages(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBProductImage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBProductImage{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbProductImageDBTypes, false, strmangle.SetComplement(dtbProductImagePrimaryKeyColumns, dtbProductImageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBProductImage{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCreatorDTBProductImages(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CreatorID) {
			t.Error("foreign key was wrong value", a.ID, first.CreatorID)
		}
		if !queries.Equal(a.ID, second.CreatorID) {
			t.Error("foreign key was wrong value", a.ID, second.CreatorID)
		}

		if first.R.Creator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Creator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CreatorDTBProductImages[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CreatorDTBProductImages[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CreatorDTBProductImages().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDTBMemberToManySetOpCreatorDTBProductImages(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBProductImage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBProductImage{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbProductImageDBTypes, false, strmangle.SetComplement(dtbProductImagePrimaryKeyColumns, dtbProductImageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCreatorDTBProductImages(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorDTBProductImages().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCreatorDTBProductImages(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorDTBProductImages().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CreatorID) {
		t.Error("foreign key was wrong value", a.ID, d.CreatorID)
	}
	if !queries.Equal(a.ID, e.CreatorID) {
		t.Error("foreign key was wrong value", a.ID, e.CreatorID)
	}

	if b.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Creator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Creator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CreatorDTBProductImages[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CreatorDTBProductImages[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDTBMemberToManyRemoveOpCreatorDTBProductImages(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBProductImage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBProductImage{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbProductImageDBTypes, false, strmangle.SetComplement(dtbProductImagePrimaryKeyColumns, dtbProductImageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCreatorDTBProductImages(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorDTBProductImages().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCreatorDTBProductImages(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorDTBProductImages().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Creator != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Creator != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CreatorDTBProductImages) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CreatorDTBProductImages[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CreatorDTBProductImages[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDTBMemberToManyAddOpCreatorDTBProductStocks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBProductStock

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBProductStock{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbProductStockDBTypes, false, strmangle.SetComplement(dtbProductStockPrimaryKeyColumns, dtbProductStockColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBProductStock{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCreatorDTBProductStocks(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CreatorID) {
			t.Error("foreign key was wrong value", a.ID, first.CreatorID)
		}
		if !queries.Equal(a.ID, second.CreatorID) {
			t.Error("foreign key was wrong value", a.ID, second.CreatorID)
		}

		if first.R.Creator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Creator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CreatorDTBProductStocks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CreatorDTBProductStocks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CreatorDTBProductStocks().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDTBMemberToManySetOpCreatorDTBProductStocks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBProductStock

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBProductStock{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbProductStockDBTypes, false, strmangle.SetComplement(dtbProductStockPrimaryKeyColumns, dtbProductStockColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCreatorDTBProductStocks(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorDTBProductStocks().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCreatorDTBProductStocks(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorDTBProductStocks().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CreatorID) {
		t.Error("foreign key was wrong value", a.ID, d.CreatorID)
	}
	if !queries.Equal(a.ID, e.CreatorID) {
		t.Error("foreign key was wrong value", a.ID, e.CreatorID)
	}

	if b.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Creator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Creator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CreatorDTBProductStocks[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CreatorDTBProductStocks[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDTBMemberToManyRemoveOpCreatorDTBProductStocks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBProductStock

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBProductStock{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbProductStockDBTypes, false, strmangle.SetComplement(dtbProductStockPrimaryKeyColumns, dtbProductStockColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCreatorDTBProductStocks(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorDTBProductStocks().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCreatorDTBProductStocks(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorDTBProductStocks().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Creator != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Creator != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CreatorDTBProductStocks) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CreatorDTBProductStocks[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CreatorDTBProductStocks[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDTBMemberToManyAddOpCreatorDTBProductTags(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBProductTag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBProductTag{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbProductTagDBTypes, false, strmangle.SetComplement(dtbProductTagPrimaryKeyColumns, dtbProductTagColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBProductTag{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCreatorDTBProductTags(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CreatorID) {
			t.Error("foreign key was wrong value", a.ID, first.CreatorID)
		}
		if !queries.Equal(a.ID, second.CreatorID) {
			t.Error("foreign key was wrong value", a.ID, second.CreatorID)
		}

		if first.R.Creator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Creator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CreatorDTBProductTags[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CreatorDTBProductTags[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CreatorDTBProductTags().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDTBMemberToManySetOpCreatorDTBProductTags(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBProductTag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBProductTag{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbProductTagDBTypes, false, strmangle.SetComplement(dtbProductTagPrimaryKeyColumns, dtbProductTagColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCreatorDTBProductTags(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorDTBProductTags().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCreatorDTBProductTags(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorDTBProductTags().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CreatorID) {
		t.Error("foreign key was wrong value", a.ID, d.CreatorID)
	}
	if !queries.Equal(a.ID, e.CreatorID) {
		t.Error("foreign key was wrong value", a.ID, e.CreatorID)
	}

	if b.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Creator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Creator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CreatorDTBProductTags[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CreatorDTBProductTags[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDTBMemberToManyRemoveOpCreatorDTBProductTags(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBProductTag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBProductTag{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbProductTagDBTypes, false, strmangle.SetComplement(dtbProductTagPrimaryKeyColumns, dtbProductTagColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCreatorDTBProductTags(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorDTBProductTags().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCreatorDTBProductTags(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorDTBProductTags().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Creator != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Creator != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CreatorDTBProductTags) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CreatorDTBProductTags[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CreatorDTBProductTags[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDTBMemberToManyAddOpCreatorDTBShippings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBShipping

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBShipping{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbShippingDBTypes, false, strmangle.SetComplement(dtbShippingPrimaryKeyColumns, dtbShippingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBShipping{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCreatorDTBShippings(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CreatorID) {
			t.Error("foreign key was wrong value", a.ID, first.CreatorID)
		}
		if !queries.Equal(a.ID, second.CreatorID) {
			t.Error("foreign key was wrong value", a.ID, second.CreatorID)
		}

		if first.R.Creator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Creator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CreatorDTBShippings[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CreatorDTBShippings[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CreatorDTBShippings().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDTBMemberToManySetOpCreatorDTBShippings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBShipping

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBShipping{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbShippingDBTypes, false, strmangle.SetComplement(dtbShippingPrimaryKeyColumns, dtbShippingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCreatorDTBShippings(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorDTBShippings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCreatorDTBShippings(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorDTBShippings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CreatorID) {
		t.Error("foreign key was wrong value", a.ID, d.CreatorID)
	}
	if !queries.Equal(a.ID, e.CreatorID) {
		t.Error("foreign key was wrong value", a.ID, e.CreatorID)
	}

	if b.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Creator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Creator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CreatorDTBShippings[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CreatorDTBShippings[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDTBMemberToManyRemoveOpCreatorDTBShippings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBShipping

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBShipping{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbShippingDBTypes, false, strmangle.SetComplement(dtbShippingPrimaryKeyColumns, dtbShippingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCreatorDTBShippings(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorDTBShippings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCreatorDTBShippings(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorDTBShippings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Creator != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Creator != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CreatorDTBShippings) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CreatorDTBShippings[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CreatorDTBShippings[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDTBMemberToManyAddOpCreatorDTBTaxRules(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBTaxRule

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBTaxRule{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbTaxRuleDBTypes, false, strmangle.SetComplement(dtbTaxRulePrimaryKeyColumns, dtbTaxRuleColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBTaxRule{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCreatorDTBTaxRules(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CreatorID) {
			t.Error("foreign key was wrong value", a.ID, first.CreatorID)
		}
		if !queries.Equal(a.ID, second.CreatorID) {
			t.Error("foreign key was wrong value", a.ID, second.CreatorID)
		}

		if first.R.Creator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Creator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CreatorDTBTaxRules[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CreatorDTBTaxRules[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CreatorDTBTaxRules().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDTBMemberToManySetOpCreatorDTBTaxRules(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBTaxRule

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBTaxRule{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbTaxRuleDBTypes, false, strmangle.SetComplement(dtbTaxRulePrimaryKeyColumns, dtbTaxRuleColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCreatorDTBTaxRules(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorDTBTaxRules().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCreatorDTBTaxRules(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorDTBTaxRules().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CreatorID) {
		t.Error("foreign key was wrong value", a.ID, d.CreatorID)
	}
	if !queries.Equal(a.ID, e.CreatorID) {
		t.Error("foreign key was wrong value", a.ID, e.CreatorID)
	}

	if b.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Creator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Creator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CreatorDTBTaxRules[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CreatorDTBTaxRules[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDTBMemberToManyRemoveOpCreatorDTBTaxRules(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c, d, e DTBTaxRule

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBTaxRule{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbTaxRuleDBTypes, false, strmangle.SetComplement(dtbTaxRulePrimaryKeyColumns, dtbTaxRuleColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCreatorDTBTaxRules(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatorDTBTaxRules().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCreatorDTBTaxRules(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatorDTBTaxRules().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatorID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Creator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Creator != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Creator != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CreatorDTBTaxRules) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CreatorDTBTaxRules[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CreatorDTBTaxRules[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDTBMemberToOneDTBMemberUsingCreator(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBMember
	var foreign DTBMember

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbMemberDBTypes, true, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dtbMemberDBTypes, false, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CreatorID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Creator().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBMemberSlice{&local}
	if err = local.L.LoadCreator(ctx, tx, false, (*[]*DTBMember)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Creator == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Creator = nil
	if err = local.L.LoadCreator(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Creator == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBMemberToOneMTBAuthorityUsingAuthority(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBMember
	var foreign MTBAuthority

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbMemberDBTypes, true, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, mtbAuthorityDBTypes, false, mtbAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBAuthority struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.AuthorityID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Authority().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBMemberSlice{&local}
	if err = local.L.LoadAuthority(ctx, tx, false, (*[]*DTBMember)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Authority == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Authority = nil
	if err = local.L.LoadAuthority(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Authority == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBMemberToOneMTBWorkUsingWork(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBMember
	var foreign MTBWork

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbMemberDBTypes, true, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, mtbWorkDBTypes, false, mtbWorkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBWork struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.WorkID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Work().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBMemberSlice{&local}
	if err = local.L.LoadWork(ctx, tx, false, (*[]*DTBMember)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Work == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Work = nil
	if err = local.L.LoadWork(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Work == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBMemberToOneSetOpDTBMemberUsingCreator(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c DTBMember

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DTBMember{&b, &c} {
		err = a.SetCreator(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Creator != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CreatorDTBMembers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CreatorID, x.ID) {
			t.Error("foreign key was wrong value", a.CreatorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CreatorID))
		reflect.Indirect(reflect.ValueOf(&a.CreatorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CreatorID, x.ID) {
			t.Error("foreign key was wrong value", a.CreatorID, x.ID)
		}
	}
}

func testDTBMemberToOneRemoveOpDTBMemberUsingCreator(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b DTBMember

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCreator(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCreator(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Creator().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Creator != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CreatorID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CreatorDTBMembers) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBMemberToOneSetOpMTBAuthorityUsingAuthority(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c MTBAuthority

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbAuthorityDBTypes, false, strmangle.SetComplement(mtbAuthorityPrimaryKeyColumns, mtbAuthorityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mtbAuthorityDBTypes, false, strmangle.SetComplement(mtbAuthorityPrimaryKeyColumns, mtbAuthorityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MTBAuthority{&b, &c} {
		err = a.SetAuthority(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Authority != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AuthorityDTBMembers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.AuthorityID, x.ID) {
			t.Error("foreign key was wrong value", a.AuthorityID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AuthorityID))
		reflect.Indirect(reflect.ValueOf(&a.AuthorityID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.AuthorityID, x.ID) {
			t.Error("foreign key was wrong value", a.AuthorityID, x.ID)
		}
	}
}

func testDTBMemberToOneRemoveOpMTBAuthorityUsingAuthority(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b MTBAuthority

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbAuthorityDBTypes, false, strmangle.SetComplement(mtbAuthorityPrimaryKeyColumns, mtbAuthorityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetAuthority(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveAuthority(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Authority().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Authority != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.AuthorityID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.AuthorityDTBMembers) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBMemberToOneSetOpMTBWorkUsingWork(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b, c MTBWork

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbWorkDBTypes, false, strmangle.SetComplement(mtbWorkPrimaryKeyColumns, mtbWorkColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mtbWorkDBTypes, false, strmangle.SetComplement(mtbWorkPrimaryKeyColumns, mtbWorkColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MTBWork{&b, &c} {
		err = a.SetWork(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Work != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.WorkDTBMembers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.WorkID, x.ID) {
			t.Error("foreign key was wrong value", a.WorkID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.WorkID))
		reflect.Indirect(reflect.ValueOf(&a.WorkID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.WorkID, x.ID) {
			t.Error("foreign key was wrong value", a.WorkID, x.ID)
		}
	}
}

func testDTBMemberToOneRemoveOpMTBWorkUsingWork(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBMember
	var b MTBWork

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbWorkDBTypes, false, strmangle.SetComplement(mtbWorkPrimaryKeyColumns, mtbWorkColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetWork(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveWork(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Work().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Work != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.WorkID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.WorkDTBMembers) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBMembersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBMember{}
	if err = randomize.Struct(seed, o, dtbMemberDBTypes, true, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBMembersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBMember{}
	if err = randomize.Struct(seed, o, dtbMemberDBTypes, true, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBMemberSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBMembersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBMember{}
	if err = randomize.Struct(seed, o, dtbMemberDBTypes, true, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBMembers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dtbMemberDBTypes = map[string]string{`ID`: `int`, `WorkID`: `smallint`, `AuthorityID`: `smallint`, `CreatorID`: `int`, `Name`: `varchar`, `Department`: `varchar`, `LoginID`: `varchar`, `Password`: `varchar`, `Salt`: `varchar`, `SortNo`: `smallint`, `CreateDate`: `datetime`, `UpdateDate`: `datetime`, `LoginDate`: `datetime`, `DiscriminatorType`: `varchar`}
	_                = bytes.MinRead
)

func testDTBMembersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dtbMemberPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dtbMemberColumns) == len(dtbMemberPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBMember{}
	if err = randomize.Struct(seed, o, dtbMemberDBTypes, true, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbMemberDBTypes, true, dtbMemberPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDTBMembersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dtbMemberColumns) == len(dtbMemberPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBMember{}
	if err = randomize.Struct(seed, o, dtbMemberDBTypes, true, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbMemberDBTypes, true, dtbMemberPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dtbMemberColumns, dtbMemberPrimaryKeyColumns) {
		fields = dtbMemberColumns
	} else {
		fields = strmangle.SetComplement(
			dtbMemberColumns,
			dtbMemberPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DTBMemberSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDTBMembersUpsert(t *testing.T) {
	t.Parallel()

	if len(dtbMemberColumns) == len(dtbMemberPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDTBMemberUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DTBMember{}
	if err = randomize.Struct(seed, &o, dtbMemberDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBMember: %s", err)
	}

	count, err := DTBMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dtbMemberDBTypes, false, dtbMemberPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBMember: %s", err)
	}

	count, err = DTBMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
