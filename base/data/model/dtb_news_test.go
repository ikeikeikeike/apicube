// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDTBNews(t *testing.T) {
	t.Parallel()

	query := DTBNews()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDTBNewsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBNews{}
	if err = randomize.Struct(seed, o, dtbNewsDBTypes, true, dtbNewsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBNews struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBNews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBNewsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBNews{}
	if err = randomize.Struct(seed, o, dtbNewsDBTypes, true, dtbNewsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBNews struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DTBNews().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBNews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBNewsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBNews{}
	if err = randomize.Struct(seed, o, dtbNewsDBTypes, true, dtbNewsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBNews struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBNewsSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBNews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBNewsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBNews{}
	if err = randomize.Struct(seed, o, dtbNewsDBTypes, true, dtbNewsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBNews struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DTBNewsExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DTBNews exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DTBNewsExists to return true, but got false.")
	}
}

func testDTBNewsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBNews{}
	if err = randomize.Struct(seed, o, dtbNewsDBTypes, true, dtbNewsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBNews struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dtbNewsFound, err := FindDTBNews(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if dtbNewsFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDTBNewsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBNews{}
	if err = randomize.Struct(seed, o, dtbNewsDBTypes, true, dtbNewsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBNews struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DTBNews().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDTBNewsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBNews{}
	if err = randomize.Struct(seed, o, dtbNewsDBTypes, true, dtbNewsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBNews struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DTBNews().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDTBNewsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtbNewsOne := &DTBNews{}
	dtbNewsTwo := &DTBNews{}
	if err = randomize.Struct(seed, dtbNewsOne, dtbNewsDBTypes, false, dtbNewsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBNews struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbNewsTwo, dtbNewsDBTypes, false, dtbNewsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBNews struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbNewsOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbNewsTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBNews().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDTBNewsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dtbNewsOne := &DTBNews{}
	dtbNewsTwo := &DTBNews{}
	if err = randomize.Struct(seed, dtbNewsOne, dtbNewsDBTypes, false, dtbNewsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBNews struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbNewsTwo, dtbNewsDBTypes, false, dtbNewsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBNews struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbNewsOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbNewsTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBNews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dtbNewsBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBNews) error {
	*o = DTBNews{}
	return nil
}

func dtbNewsAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBNews) error {
	*o = DTBNews{}
	return nil
}

func dtbNewsAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DTBNews) error {
	*o = DTBNews{}
	return nil
}

func dtbNewsBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBNews) error {
	*o = DTBNews{}
	return nil
}

func dtbNewsAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBNews) error {
	*o = DTBNews{}
	return nil
}

func dtbNewsBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBNews) error {
	*o = DTBNews{}
	return nil
}

func dtbNewsAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBNews) error {
	*o = DTBNews{}
	return nil
}

func dtbNewsBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBNews) error {
	*o = DTBNews{}
	return nil
}

func dtbNewsAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBNews) error {
	*o = DTBNews{}
	return nil
}

func testDTBNewsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DTBNews{}
	o := &DTBNews{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dtbNewsDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBNews object: %s", err)
	}

	AddDTBNewsHook(boil.BeforeInsertHook, dtbNewsBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dtbNewsBeforeInsertHooks = []DTBNewsHook{}

	AddDTBNewsHook(boil.AfterInsertHook, dtbNewsAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dtbNewsAfterInsertHooks = []DTBNewsHook{}

	AddDTBNewsHook(boil.AfterSelectHook, dtbNewsAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dtbNewsAfterSelectHooks = []DTBNewsHook{}

	AddDTBNewsHook(boil.BeforeUpdateHook, dtbNewsBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dtbNewsBeforeUpdateHooks = []DTBNewsHook{}

	AddDTBNewsHook(boil.AfterUpdateHook, dtbNewsAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dtbNewsAfterUpdateHooks = []DTBNewsHook{}

	AddDTBNewsHook(boil.BeforeDeleteHook, dtbNewsBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dtbNewsBeforeDeleteHooks = []DTBNewsHook{}

	AddDTBNewsHook(boil.AfterDeleteHook, dtbNewsAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dtbNewsAfterDeleteHooks = []DTBNewsHook{}

	AddDTBNewsHook(boil.BeforeUpsertHook, dtbNewsBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dtbNewsBeforeUpsertHooks = []DTBNewsHook{}

	AddDTBNewsHook(boil.AfterUpsertHook, dtbNewsAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dtbNewsAfterUpsertHooks = []DTBNewsHook{}
}

func testDTBNewsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBNews{}
	if err = randomize.Struct(seed, o, dtbNewsDBTypes, true, dtbNewsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBNews struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBNews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBNewsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBNews{}
	if err = randomize.Struct(seed, o, dtbNewsDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DTBNews struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dtbNewsColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DTBNews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBNewsToOneDTBMemberUsingCreator(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBNews
	var foreign DTBMember

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbNewsDBTypes, true, dtbNewsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBNews struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dtbMemberDBTypes, false, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CreatorID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Creator().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBNewsSlice{&local}
	if err = local.L.LoadCreator(ctx, tx, false, (*[]*DTBNews)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Creator == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Creator = nil
	if err = local.L.LoadCreator(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Creator == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBNewsToOneSetOpDTBMemberUsingCreator(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBNews
	var b, c DTBMember

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbNewsDBTypes, false, strmangle.SetComplement(dtbNewsPrimaryKeyColumns, dtbNewsColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DTBMember{&b, &c} {
		err = a.SetCreator(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Creator != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CreatorDTBNews[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CreatorID, x.ID) {
			t.Error("foreign key was wrong value", a.CreatorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CreatorID))
		reflect.Indirect(reflect.ValueOf(&a.CreatorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CreatorID, x.ID) {
			t.Error("foreign key was wrong value", a.CreatorID, x.ID)
		}
	}
}

func testDTBNewsToOneRemoveOpDTBMemberUsingCreator(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBNews
	var b DTBMember

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbNewsDBTypes, false, strmangle.SetComplement(dtbNewsPrimaryKeyColumns, dtbNewsColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCreator(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCreator(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Creator().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Creator != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CreatorID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CreatorDTBNews) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBNewsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBNews{}
	if err = randomize.Struct(seed, o, dtbNewsDBTypes, true, dtbNewsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBNews struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBNewsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBNews{}
	if err = randomize.Struct(seed, o, dtbNewsDBTypes, true, dtbNewsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBNews struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBNewsSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBNewsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBNews{}
	if err = randomize.Struct(seed, o, dtbNewsDBTypes, true, dtbNewsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBNews struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBNews().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dtbNewsDBTypes = map[string]string{`ID`: `int`, `CreatorID`: `int`, `PublishDate`: `datetime`, `Title`: `varchar`, `Description`: `longtext`, `URL`: `varchar`, `LinkMethod`: `tinyint`, `CreateDate`: `datetime`, `UpdateDate`: `datetime`, `Visible`: `tinyint`, `DiscriminatorType`: `varchar`}
	_              = bytes.MinRead
)

func testDTBNewsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dtbNewsPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dtbNewsColumns) == len(dtbNewsPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBNews{}
	if err = randomize.Struct(seed, o, dtbNewsDBTypes, true, dtbNewsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBNews struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBNews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbNewsDBTypes, true, dtbNewsPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBNews struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDTBNewsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dtbNewsColumns) == len(dtbNewsPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBNews{}
	if err = randomize.Struct(seed, o, dtbNewsDBTypes, true, dtbNewsColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBNews struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBNews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbNewsDBTypes, true, dtbNewsPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBNews struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dtbNewsColumns, dtbNewsPrimaryKeyColumns) {
		fields = dtbNewsColumns
	} else {
		fields = strmangle.SetComplement(
			dtbNewsColumns,
			dtbNewsPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DTBNewsSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDTBNewsUpsert(t *testing.T) {
	t.Parallel()

	if len(dtbNewsColumns) == len(dtbNewsPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDTBNewsUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DTBNews{}
	if err = randomize.Struct(seed, &o, dtbNewsDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBNews struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBNews: %s", err)
	}

	count, err := DTBNews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dtbNewsDBTypes, false, dtbNewsPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBNews struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBNews: %s", err)
	}

	count, err = DTBNews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
