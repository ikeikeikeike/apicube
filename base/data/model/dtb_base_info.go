// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// DTBBaseInfo is an object representing the database table.
type DTBBaseInfo struct {
	ID                             uint              `boil:"id" json:"id" toml:"id" yaml:"id"`
	CountryID                      null.Uint16       `boil:"country_id" json:"country_id,omitempty" toml:"country_id" yaml:"country_id,omitempty"`
	PrefID                         null.Uint16       `boil:"pref_id" json:"pref_id,omitempty" toml:"pref_id" yaml:"pref_id,omitempty"`
	CompanyName                    null.String       `boil:"company_name" json:"company_name,omitempty" toml:"company_name" yaml:"company_name,omitempty"`
	CompanyKana                    null.String       `boil:"company_kana" json:"company_kana,omitempty" toml:"company_kana" yaml:"company_kana,omitempty"`
	PostalCode                     null.String       `boil:"postal_code" json:"postal_code,omitempty" toml:"postal_code" yaml:"postal_code,omitempty"`
	Addr01                         null.String       `boil:"addr01" json:"addr01,omitempty" toml:"addr01" yaml:"addr01,omitempty"`
	Addr02                         null.String       `boil:"addr02" json:"addr02,omitempty" toml:"addr02" yaml:"addr02,omitempty"`
	PhoneNumber                    null.String       `boil:"phone_number" json:"phone_number,omitempty" toml:"phone_number" yaml:"phone_number,omitempty"`
	BusinessHour                   null.String       `boil:"business_hour" json:"business_hour,omitempty" toml:"business_hour" yaml:"business_hour,omitempty"`
	Email01                        null.String       `boil:"email01" json:"email01,omitempty" toml:"email01" yaml:"email01,omitempty"`
	Email02                        null.String       `boil:"email02" json:"email02,omitempty" toml:"email02" yaml:"email02,omitempty"`
	Email03                        null.String       `boil:"email03" json:"email03,omitempty" toml:"email03" yaml:"email03,omitempty"`
	Email04                        null.String       `boil:"email04" json:"email04,omitempty" toml:"email04" yaml:"email04,omitempty"`
	ShopName                       null.String       `boil:"shop_name" json:"shop_name,omitempty" toml:"shop_name" yaml:"shop_name,omitempty"`
	ShopKana                       null.String       `boil:"shop_kana" json:"shop_kana,omitempty" toml:"shop_kana" yaml:"shop_kana,omitempty"`
	ShopNameEng                    null.String       `boil:"shop_name_eng" json:"shop_name_eng,omitempty" toml:"shop_name_eng" yaml:"shop_name_eng,omitempty"`
	UpdateDate                     time.Time         `boil:"update_date" json:"update_date" toml:"update_date" yaml:"update_date"`
	GoodTraded                     null.String       `boil:"good_traded" json:"good_traded,omitempty" toml:"good_traded" yaml:"good_traded,omitempty"`
	Message                        null.String       `boil:"message" json:"message,omitempty" toml:"message" yaml:"message,omitempty"`
	DeliveryFreeAmount             types.NullDecimal `boil:"delivery_free_amount" json:"delivery_free_amount,omitempty" toml:"delivery_free_amount" yaml:"delivery_free_amount,omitempty"`
	DeliveryFreeQuantity           null.Uint         `boil:"delivery_free_quantity" json:"delivery_free_quantity,omitempty" toml:"delivery_free_quantity" yaml:"delivery_free_quantity,omitempty"`
	OptionMypageOrderStatusDisplay bool              `boil:"option_mypage_order_status_display" json:"option_mypage_order_status_display" toml:"option_mypage_order_status_display" yaml:"option_mypage_order_status_display"`
	OptionNostockHidden            bool              `boil:"option_nostock_hidden" json:"option_nostock_hidden" toml:"option_nostock_hidden" yaml:"option_nostock_hidden"`
	OptionFavoriteProduct          bool              `boil:"option_favorite_product" json:"option_favorite_product" toml:"option_favorite_product" yaml:"option_favorite_product"`
	OptionProductDeliveryFee       bool              `boil:"option_product_delivery_fee" json:"option_product_delivery_fee" toml:"option_product_delivery_fee" yaml:"option_product_delivery_fee"`
	OptionProductTaxRule           bool              `boil:"option_product_tax_rule" json:"option_product_tax_rule" toml:"option_product_tax_rule" yaml:"option_product_tax_rule"`
	OptionCustomerActivate         bool              `boil:"option_customer_activate" json:"option_customer_activate" toml:"option_customer_activate" yaml:"option_customer_activate"`
	OptionRememberMe               bool              `boil:"option_remember_me" json:"option_remember_me" toml:"option_remember_me" yaml:"option_remember_me"`
	AuthenticationKey              null.String       `boil:"authentication_key" json:"authentication_key,omitempty" toml:"authentication_key" yaml:"authentication_key,omitempty"`
	PHPPath                        null.String       `boil:"php_path" json:"php_path,omitempty" toml:"php_path" yaml:"php_path,omitempty"`
	OptionPoint                    bool              `boil:"option_point" json:"option_point" toml:"option_point" yaml:"option_point"`
	BasicPointRate                 types.NullDecimal `boil:"basic_point_rate" json:"basic_point_rate,omitempty" toml:"basic_point_rate" yaml:"basic_point_rate,omitempty"`
	PointConversionRate            types.NullDecimal `boil:"point_conversion_rate" json:"point_conversion_rate,omitempty" toml:"point_conversion_rate" yaml:"point_conversion_rate,omitempty"`
	DiscriminatorType              string            `boil:"discriminator_type" json:"discriminator_type" toml:"discriminator_type" yaml:"discriminator_type"`

	R *dtbBaseInfoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dtbBaseInfoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DTBBaseInfoColumns = struct {
	ID                             string
	CountryID                      string
	PrefID                         string
	CompanyName                    string
	CompanyKana                    string
	PostalCode                     string
	Addr01                         string
	Addr02                         string
	PhoneNumber                    string
	BusinessHour                   string
	Email01                        string
	Email02                        string
	Email03                        string
	Email04                        string
	ShopName                       string
	ShopKana                       string
	ShopNameEng                    string
	UpdateDate                     string
	GoodTraded                     string
	Message                        string
	DeliveryFreeAmount             string
	DeliveryFreeQuantity           string
	OptionMypageOrderStatusDisplay string
	OptionNostockHidden            string
	OptionFavoriteProduct          string
	OptionProductDeliveryFee       string
	OptionProductTaxRule           string
	OptionCustomerActivate         string
	OptionRememberMe               string
	AuthenticationKey              string
	PHPPath                        string
	OptionPoint                    string
	BasicPointRate                 string
	PointConversionRate            string
	DiscriminatorType              string
}{
	ID:                             "id",
	CountryID:                      "country_id",
	PrefID:                         "pref_id",
	CompanyName:                    "company_name",
	CompanyKana:                    "company_kana",
	PostalCode:                     "postal_code",
	Addr01:                         "addr01",
	Addr02:                         "addr02",
	PhoneNumber:                    "phone_number",
	BusinessHour:                   "business_hour",
	Email01:                        "email01",
	Email02:                        "email02",
	Email03:                        "email03",
	Email04:                        "email04",
	ShopName:                       "shop_name",
	ShopKana:                       "shop_kana",
	ShopNameEng:                    "shop_name_eng",
	UpdateDate:                     "update_date",
	GoodTraded:                     "good_traded",
	Message:                        "message",
	DeliveryFreeAmount:             "delivery_free_amount",
	DeliveryFreeQuantity:           "delivery_free_quantity",
	OptionMypageOrderStatusDisplay: "option_mypage_order_status_display",
	OptionNostockHidden:            "option_nostock_hidden",
	OptionFavoriteProduct:          "option_favorite_product",
	OptionProductDeliveryFee:       "option_product_delivery_fee",
	OptionProductTaxRule:           "option_product_tax_rule",
	OptionCustomerActivate:         "option_customer_activate",
	OptionRememberMe:               "option_remember_me",
	AuthenticationKey:              "authentication_key",
	PHPPath:                        "php_path",
	OptionPoint:                    "option_point",
	BasicPointRate:                 "basic_point_rate",
	PointConversionRate:            "point_conversion_rate",
	DiscriminatorType:              "discriminator_type",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertypes_NullDecimal struct{ field string }

func (w whereHelpertypes_NullDecimal) EQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_NullDecimal) NEQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_NullDecimal) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_NullDecimal) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpertypes_NullDecimal) LT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_NullDecimal) LTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_NullDecimal) GT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_NullDecimal) GTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var DTBBaseInfoWhere = struct {
	ID                             whereHelperuint
	CountryID                      whereHelpernull_Uint16
	PrefID                         whereHelpernull_Uint16
	CompanyName                    whereHelpernull_String
	CompanyKana                    whereHelpernull_String
	PostalCode                     whereHelpernull_String
	Addr01                         whereHelpernull_String
	Addr02                         whereHelpernull_String
	PhoneNumber                    whereHelpernull_String
	BusinessHour                   whereHelpernull_String
	Email01                        whereHelpernull_String
	Email02                        whereHelpernull_String
	Email03                        whereHelpernull_String
	Email04                        whereHelpernull_String
	ShopName                       whereHelpernull_String
	ShopKana                       whereHelpernull_String
	ShopNameEng                    whereHelpernull_String
	UpdateDate                     whereHelpertime_Time
	GoodTraded                     whereHelpernull_String
	Message                        whereHelpernull_String
	DeliveryFreeAmount             whereHelpertypes_NullDecimal
	DeliveryFreeQuantity           whereHelpernull_Uint
	OptionMypageOrderStatusDisplay whereHelperbool
	OptionNostockHidden            whereHelperbool
	OptionFavoriteProduct          whereHelperbool
	OptionProductDeliveryFee       whereHelperbool
	OptionProductTaxRule           whereHelperbool
	OptionCustomerActivate         whereHelperbool
	OptionRememberMe               whereHelperbool
	AuthenticationKey              whereHelpernull_String
	PHPPath                        whereHelpernull_String
	OptionPoint                    whereHelperbool
	BasicPointRate                 whereHelpertypes_NullDecimal
	PointConversionRate            whereHelpertypes_NullDecimal
	DiscriminatorType              whereHelperstring
}{
	ID:                             whereHelperuint{field: `id`},
	CountryID:                      whereHelpernull_Uint16{field: `country_id`},
	PrefID:                         whereHelpernull_Uint16{field: `pref_id`},
	CompanyName:                    whereHelpernull_String{field: `company_name`},
	CompanyKana:                    whereHelpernull_String{field: `company_kana`},
	PostalCode:                     whereHelpernull_String{field: `postal_code`},
	Addr01:                         whereHelpernull_String{field: `addr01`},
	Addr02:                         whereHelpernull_String{field: `addr02`},
	PhoneNumber:                    whereHelpernull_String{field: `phone_number`},
	BusinessHour:                   whereHelpernull_String{field: `business_hour`},
	Email01:                        whereHelpernull_String{field: `email01`},
	Email02:                        whereHelpernull_String{field: `email02`},
	Email03:                        whereHelpernull_String{field: `email03`},
	Email04:                        whereHelpernull_String{field: `email04`},
	ShopName:                       whereHelpernull_String{field: `shop_name`},
	ShopKana:                       whereHelpernull_String{field: `shop_kana`},
	ShopNameEng:                    whereHelpernull_String{field: `shop_name_eng`},
	UpdateDate:                     whereHelpertime_Time{field: `update_date`},
	GoodTraded:                     whereHelpernull_String{field: `good_traded`},
	Message:                        whereHelpernull_String{field: `message`},
	DeliveryFreeAmount:             whereHelpertypes_NullDecimal{field: `delivery_free_amount`},
	DeliveryFreeQuantity:           whereHelpernull_Uint{field: `delivery_free_quantity`},
	OptionMypageOrderStatusDisplay: whereHelperbool{field: `option_mypage_order_status_display`},
	OptionNostockHidden:            whereHelperbool{field: `option_nostock_hidden`},
	OptionFavoriteProduct:          whereHelperbool{field: `option_favorite_product`},
	OptionProductDeliveryFee:       whereHelperbool{field: `option_product_delivery_fee`},
	OptionProductTaxRule:           whereHelperbool{field: `option_product_tax_rule`},
	OptionCustomerActivate:         whereHelperbool{field: `option_customer_activate`},
	OptionRememberMe:               whereHelperbool{field: `option_remember_me`},
	AuthenticationKey:              whereHelpernull_String{field: `authentication_key`},
	PHPPath:                        whereHelpernull_String{field: `php_path`},
	OptionPoint:                    whereHelperbool{field: `option_point`},
	BasicPointRate:                 whereHelpertypes_NullDecimal{field: `basic_point_rate`},
	PointConversionRate:            whereHelpertypes_NullDecimal{field: `point_conversion_rate`},
	DiscriminatorType:              whereHelperstring{field: `discriminator_type`},
}

// DTBBaseInfoRels is where relationship names are stored.
var DTBBaseInfoRels = struct {
	Pref    string
	Country string
}{
	Pref:    "Pref",
	Country: "Country",
}

// dtbBaseInfoR is where relationships are stored.
type dtbBaseInfoR struct {
	Pref    *MTBPref
	Country *MTBCountry
}

// NewStruct creates a new relationship struct
func (*dtbBaseInfoR) NewStruct() *dtbBaseInfoR {
	return &dtbBaseInfoR{}
}

// dtbBaseInfoL is where Load methods for each relationship are stored.
type dtbBaseInfoL struct{}

var (
	dtbBaseInfoColumns               = []string{"id", "country_id", "pref_id", "company_name", "company_kana", "postal_code", "addr01", "addr02", "phone_number", "business_hour", "email01", "email02", "email03", "email04", "shop_name", "shop_kana", "shop_name_eng", "update_date", "good_traded", "message", "delivery_free_amount", "delivery_free_quantity", "option_mypage_order_status_display", "option_nostock_hidden", "option_favorite_product", "option_product_delivery_fee", "option_product_tax_rule", "option_customer_activate", "option_remember_me", "authentication_key", "php_path", "option_point", "basic_point_rate", "point_conversion_rate", "discriminator_type"}
	dtbBaseInfoColumnsWithoutDefault = []string{"country_id", "pref_id", "company_name", "company_kana", "postal_code", "addr01", "addr02", "phone_number", "business_hour", "email01", "email02", "email03", "email04", "shop_name", "shop_kana", "shop_name_eng", "update_date", "good_traded", "message", "delivery_free_amount", "delivery_free_quantity", "authentication_key", "php_path", "discriminator_type"}
	dtbBaseInfoColumnsWithDefault    = []string{"id", "option_mypage_order_status_display", "option_nostock_hidden", "option_favorite_product", "option_product_delivery_fee", "option_product_tax_rule", "option_customer_activate", "option_remember_me", "option_point", "basic_point_rate", "point_conversion_rate"}
	dtbBaseInfoPrimaryKeyColumns     = []string{"id"}
)

type (
	// DTBBaseInfoSlice is an alias for a slice of pointers to DTBBaseInfo.
	// This should generally be used opposed to []DTBBaseInfo.
	DTBBaseInfoSlice []*DTBBaseInfo
	// DTBBaseInfoHook is the signature for custom DTBBaseInfo hook methods
	DTBBaseInfoHook func(context.Context, boil.ContextExecutor, *DTBBaseInfo) error

	dtbBaseInfoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dtbBaseInfoType                 = reflect.TypeOf(&DTBBaseInfo{})
	dtbBaseInfoMapping              = queries.MakeStructMapping(dtbBaseInfoType)
	dtbBaseInfoPrimaryKeyMapping, _ = queries.BindMapping(dtbBaseInfoType, dtbBaseInfoMapping, dtbBaseInfoPrimaryKeyColumns)
	dtbBaseInfoInsertCacheMut       sync.RWMutex
	dtbBaseInfoInsertCache          = make(map[string]insertCache)
	dtbBaseInfoUpdateCacheMut       sync.RWMutex
	dtbBaseInfoUpdateCache          = make(map[string]updateCache)
	dtbBaseInfoUpsertCacheMut       sync.RWMutex
	dtbBaseInfoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dtbBaseInfoBeforeInsertHooks []DTBBaseInfoHook
var dtbBaseInfoBeforeUpdateHooks []DTBBaseInfoHook
var dtbBaseInfoBeforeDeleteHooks []DTBBaseInfoHook
var dtbBaseInfoBeforeUpsertHooks []DTBBaseInfoHook

var dtbBaseInfoAfterInsertHooks []DTBBaseInfoHook
var dtbBaseInfoAfterSelectHooks []DTBBaseInfoHook
var dtbBaseInfoAfterUpdateHooks []DTBBaseInfoHook
var dtbBaseInfoAfterDeleteHooks []DTBBaseInfoHook
var dtbBaseInfoAfterUpsertHooks []DTBBaseInfoHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DTBBaseInfo) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbBaseInfoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DTBBaseInfo) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbBaseInfoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DTBBaseInfo) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbBaseInfoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DTBBaseInfo) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbBaseInfoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DTBBaseInfo) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbBaseInfoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DTBBaseInfo) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbBaseInfoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DTBBaseInfo) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbBaseInfoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DTBBaseInfo) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbBaseInfoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DTBBaseInfo) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbBaseInfoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDTBBaseInfoHook registers your hook function for all future operations.
func AddDTBBaseInfoHook(hookPoint boil.HookPoint, dtbBaseInfoHook DTBBaseInfoHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		dtbBaseInfoBeforeInsertHooks = append(dtbBaseInfoBeforeInsertHooks, dtbBaseInfoHook)
	case boil.BeforeUpdateHook:
		dtbBaseInfoBeforeUpdateHooks = append(dtbBaseInfoBeforeUpdateHooks, dtbBaseInfoHook)
	case boil.BeforeDeleteHook:
		dtbBaseInfoBeforeDeleteHooks = append(dtbBaseInfoBeforeDeleteHooks, dtbBaseInfoHook)
	case boil.BeforeUpsertHook:
		dtbBaseInfoBeforeUpsertHooks = append(dtbBaseInfoBeforeUpsertHooks, dtbBaseInfoHook)
	case boil.AfterInsertHook:
		dtbBaseInfoAfterInsertHooks = append(dtbBaseInfoAfterInsertHooks, dtbBaseInfoHook)
	case boil.AfterSelectHook:
		dtbBaseInfoAfterSelectHooks = append(dtbBaseInfoAfterSelectHooks, dtbBaseInfoHook)
	case boil.AfterUpdateHook:
		dtbBaseInfoAfterUpdateHooks = append(dtbBaseInfoAfterUpdateHooks, dtbBaseInfoHook)
	case boil.AfterDeleteHook:
		dtbBaseInfoAfterDeleteHooks = append(dtbBaseInfoAfterDeleteHooks, dtbBaseInfoHook)
	case boil.AfterUpsertHook:
		dtbBaseInfoAfterUpsertHooks = append(dtbBaseInfoAfterUpsertHooks, dtbBaseInfoHook)
	}
}

// One returns a single dtbBaseInfo record from the query.
func (q dtbBaseInfoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DTBBaseInfo, error) {
	o := &DTBBaseInfo{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for dtb_base_info")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DTBBaseInfo records from the query.
func (q dtbBaseInfoQuery) All(ctx context.Context, exec boil.ContextExecutor) (DTBBaseInfoSlice, error) {
	var o []*DTBBaseInfo

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to DTBBaseInfo slice")
	}

	if len(dtbBaseInfoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DTBBaseInfo records in the query.
func (q dtbBaseInfoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count dtb_base_info rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dtbBaseInfoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if dtb_base_info exists")
	}

	return count > 0, nil
}

// Pref pointed to by the foreign key.
func (o *DTBBaseInfo) Pref(mods ...qm.QueryMod) mtbPrefQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.PrefID),
	}

	queryMods = append(queryMods, mods...)

	query := MTBPrefs(queryMods...)
	queries.SetFrom(query.Query, "`mtb_pref`")

	return query
}

// Country pointed to by the foreign key.
func (o *DTBBaseInfo) Country(mods ...qm.QueryMod) mtbCountryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.CountryID),
	}

	queryMods = append(queryMods, mods...)

	query := MTBCountries(queryMods...)
	queries.SetFrom(query.Query, "`mtb_country`")

	return query
}

// LoadPref allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dtbBaseInfoL) LoadPref(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBBaseInfo interface{}, mods queries.Applicator) error {
	var slice []*DTBBaseInfo
	var object *DTBBaseInfo

	if singular {
		object = maybeDTBBaseInfo.(*DTBBaseInfo)
	} else {
		slice = *maybeDTBBaseInfo.(*[]*DTBBaseInfo)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbBaseInfoR{}
		}
		if !queries.IsNil(object.PrefID) {
			args = append(args, object.PrefID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbBaseInfoR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PrefID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PrefID) {
				args = append(args, obj.PrefID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`mtb_pref`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MTBPref")
	}

	var resultSlice []*MTBPref
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MTBPref")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mtb_pref")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mtb_pref")
	}

	if len(dtbBaseInfoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Pref = foreign
		if foreign.R == nil {
			foreign.R = &mtbPrefR{}
		}
		foreign.R.PrefDTBBaseInfos = append(foreign.R.PrefDTBBaseInfos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PrefID, foreign.ID) {
				local.R.Pref = foreign
				if foreign.R == nil {
					foreign.R = &mtbPrefR{}
				}
				foreign.R.PrefDTBBaseInfos = append(foreign.R.PrefDTBBaseInfos, local)
				break
			}
		}
	}

	return nil
}

// LoadCountry allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dtbBaseInfoL) LoadCountry(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBBaseInfo interface{}, mods queries.Applicator) error {
	var slice []*DTBBaseInfo
	var object *DTBBaseInfo

	if singular {
		object = maybeDTBBaseInfo.(*DTBBaseInfo)
	} else {
		slice = *maybeDTBBaseInfo.(*[]*DTBBaseInfo)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbBaseInfoR{}
		}
		if !queries.IsNil(object.CountryID) {
			args = append(args, object.CountryID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbBaseInfoR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CountryID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CountryID) {
				args = append(args, obj.CountryID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`mtb_country`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MTBCountry")
	}

	var resultSlice []*MTBCountry
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MTBCountry")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mtb_country")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mtb_country")
	}

	if len(dtbBaseInfoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Country = foreign
		if foreign.R == nil {
			foreign.R = &mtbCountryR{}
		}
		foreign.R.CountryDTBBaseInfos = append(foreign.R.CountryDTBBaseInfos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CountryID, foreign.ID) {
				local.R.Country = foreign
				if foreign.R == nil {
					foreign.R = &mtbCountryR{}
				}
				foreign.R.CountryDTBBaseInfos = append(foreign.R.CountryDTBBaseInfos, local)
				break
			}
		}
	}

	return nil
}

// SetPref of the dtbBaseInfo to the related item.
// Sets o.R.Pref to related.
// Adds o to related.R.PrefDTBBaseInfos.
func (o *DTBBaseInfo) SetPref(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MTBPref) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `dtb_base_info` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"pref_id"}),
		strmangle.WhereClause("`", "`", 0, dtbBaseInfoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PrefID, related.ID)
	if o.R == nil {
		o.R = &dtbBaseInfoR{
			Pref: related,
		}
	} else {
		o.R.Pref = related
	}

	if related.R == nil {
		related.R = &mtbPrefR{
			PrefDTBBaseInfos: DTBBaseInfoSlice{o},
		}
	} else {
		related.R.PrefDTBBaseInfos = append(related.R.PrefDTBBaseInfos, o)
	}

	return nil
}

// RemovePref relationship.
// Sets o.R.Pref to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *DTBBaseInfo) RemovePref(ctx context.Context, exec boil.ContextExecutor, related *MTBPref) error {
	var err error

	queries.SetScanner(&o.PrefID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("pref_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Pref = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PrefDTBBaseInfos {
		if queries.Equal(o.PrefID, ri.PrefID) {
			continue
		}

		ln := len(related.R.PrefDTBBaseInfos)
		if ln > 1 && i < ln-1 {
			related.R.PrefDTBBaseInfos[i] = related.R.PrefDTBBaseInfos[ln-1]
		}
		related.R.PrefDTBBaseInfos = related.R.PrefDTBBaseInfos[:ln-1]
		break
	}
	return nil
}

// SetCountry of the dtbBaseInfo to the related item.
// Sets o.R.Country to related.
// Adds o to related.R.CountryDTBBaseInfos.
func (o *DTBBaseInfo) SetCountry(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MTBCountry) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `dtb_base_info` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"country_id"}),
		strmangle.WhereClause("`", "`", 0, dtbBaseInfoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CountryID, related.ID)
	if o.R == nil {
		o.R = &dtbBaseInfoR{
			Country: related,
		}
	} else {
		o.R.Country = related
	}

	if related.R == nil {
		related.R = &mtbCountryR{
			CountryDTBBaseInfos: DTBBaseInfoSlice{o},
		}
	} else {
		related.R.CountryDTBBaseInfos = append(related.R.CountryDTBBaseInfos, o)
	}

	return nil
}

// RemoveCountry relationship.
// Sets o.R.Country to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *DTBBaseInfo) RemoveCountry(ctx context.Context, exec boil.ContextExecutor, related *MTBCountry) error {
	var err error

	queries.SetScanner(&o.CountryID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("country_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Country = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CountryDTBBaseInfos {
		if queries.Equal(o.CountryID, ri.CountryID) {
			continue
		}

		ln := len(related.R.CountryDTBBaseInfos)
		if ln > 1 && i < ln-1 {
			related.R.CountryDTBBaseInfos[i] = related.R.CountryDTBBaseInfos[ln-1]
		}
		related.R.CountryDTBBaseInfos = related.R.CountryDTBBaseInfos[:ln-1]
		break
	}
	return nil
}

// DTBBaseInfos retrieves all the records using an executor.
func DTBBaseInfos(mods ...qm.QueryMod) dtbBaseInfoQuery {
	mods = append(mods, qm.From("`dtb_base_info`"))
	return dtbBaseInfoQuery{NewQuery(mods...)}
}

// FindDTBBaseInfo retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDTBBaseInfo(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*DTBBaseInfo, error) {
	dtbBaseInfoObj := &DTBBaseInfo{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `dtb_base_info` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, dtbBaseInfoObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from dtb_base_info")
	}

	return dtbBaseInfoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DTBBaseInfo) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no dtb_base_info provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dtbBaseInfoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dtbBaseInfoInsertCacheMut.RLock()
	cache, cached := dtbBaseInfoInsertCache[key]
	dtbBaseInfoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dtbBaseInfoColumns,
			dtbBaseInfoColumnsWithDefault,
			dtbBaseInfoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dtbBaseInfoType, dtbBaseInfoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dtbBaseInfoType, dtbBaseInfoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `dtb_base_info` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `dtb_base_info` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `dtb_base_info` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dtbBaseInfoPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into dtb_base_info")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == dtbBaseInfoMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for dtb_base_info")
	}

CacheNoHooks:
	if !cached {
		dtbBaseInfoInsertCacheMut.Lock()
		dtbBaseInfoInsertCache[key] = cache
		dtbBaseInfoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DTBBaseInfo.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DTBBaseInfo) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dtbBaseInfoUpdateCacheMut.RLock()
	cache, cached := dtbBaseInfoUpdateCache[key]
	dtbBaseInfoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dtbBaseInfoColumns,
			dtbBaseInfoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update dtb_base_info, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `dtb_base_info` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dtbBaseInfoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dtbBaseInfoType, dtbBaseInfoMapping, append(wl, dtbBaseInfoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update dtb_base_info row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for dtb_base_info")
	}

	if !cached {
		dtbBaseInfoUpdateCacheMut.Lock()
		dtbBaseInfoUpdateCache[key] = cache
		dtbBaseInfoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dtbBaseInfoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for dtb_base_info")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for dtb_base_info")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DTBBaseInfoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbBaseInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `dtb_base_info` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbBaseInfoPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in dtbBaseInfo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all dtbBaseInfo")
	}
	return rowsAff, nil
}

var mySQLDTBBaseInfoUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DTBBaseInfo) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no dtb_base_info provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dtbBaseInfoColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDTBBaseInfoUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dtbBaseInfoUpsertCacheMut.RLock()
	cache, cached := dtbBaseInfoUpsertCache[key]
	dtbBaseInfoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dtbBaseInfoColumns,
			dtbBaseInfoColumnsWithDefault,
			dtbBaseInfoColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			dtbBaseInfoColumns,
			dtbBaseInfoPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("model: unable to upsert dtb_base_info, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "dtb_base_info", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `dtb_base_info` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dtbBaseInfoType, dtbBaseInfoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dtbBaseInfoType, dtbBaseInfoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for dtb_base_info")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == dtbBaseInfoMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dtbBaseInfoType, dtbBaseInfoMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for dtb_base_info")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for dtb_base_info")
	}

CacheNoHooks:
	if !cached {
		dtbBaseInfoUpsertCacheMut.Lock()
		dtbBaseInfoUpsertCache[key] = cache
		dtbBaseInfoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DTBBaseInfo record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DTBBaseInfo) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no DTBBaseInfo provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dtbBaseInfoPrimaryKeyMapping)
	sql := "DELETE FROM `dtb_base_info` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from dtb_base_info")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for dtb_base_info")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dtbBaseInfoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no dtbBaseInfoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from dtb_base_info")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for dtb_base_info")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DTBBaseInfoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no DTBBaseInfo slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(dtbBaseInfoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbBaseInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `dtb_base_info` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbBaseInfoPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from dtbBaseInfo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for dtb_base_info")
	}

	if len(dtbBaseInfoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DTBBaseInfo) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDTBBaseInfo(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DTBBaseInfoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DTBBaseInfoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbBaseInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `dtb_base_info`.* FROM `dtb_base_info` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbBaseInfoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in DTBBaseInfoSlice")
	}

	*o = slice

	return nil
}

// DTBBaseInfoExists checks if the DTBBaseInfo row exists.
func DTBBaseInfoExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `dtb_base_info` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if dtb_base_info exists")
	}

	return exists, nil
}
