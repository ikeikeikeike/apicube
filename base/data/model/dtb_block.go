// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// DTBBlock is an object representing the database table.
type DTBBlock struct {
	ID                uint        `boil:"id" json:"id" toml:"id" yaml:"id"`
	DeviceTypeID      null.Uint16 `boil:"device_type_id" json:"device_type_id,omitempty" toml:"device_type_id" yaml:"device_type_id,omitempty"`
	BlockName         null.String `boil:"block_name" json:"block_name,omitempty" toml:"block_name" yaml:"block_name,omitempty"`
	FileName          string      `boil:"file_name" json:"file_name" toml:"file_name" yaml:"file_name"`
	UseController     bool        `boil:"use_controller" json:"use_controller" toml:"use_controller" yaml:"use_controller"`
	Deletable         bool        `boil:"deletable" json:"deletable" toml:"deletable" yaml:"deletable"`
	CreateDate        time.Time   `boil:"create_date" json:"create_date" toml:"create_date" yaml:"create_date"`
	UpdateDate        time.Time   `boil:"update_date" json:"update_date" toml:"update_date" yaml:"update_date"`
	DiscriminatorType string      `boil:"discriminator_type" json:"discriminator_type" toml:"discriminator_type" yaml:"discriminator_type"`

	R *dtbBlockR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dtbBlockL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DTBBlockColumns = struct {
	ID                string
	DeviceTypeID      string
	BlockName         string
	FileName          string
	UseController     string
	Deletable         string
	CreateDate        string
	UpdateDate        string
	DiscriminatorType string
}{
	ID:                "id",
	DeviceTypeID:      "device_type_id",
	BlockName:         "block_name",
	FileName:          "file_name",
	UseController:     "use_controller",
	Deletable:         "deletable",
	CreateDate:        "create_date",
	UpdateDate:        "update_date",
	DiscriminatorType: "discriminator_type",
}

// Generated where

var DTBBlockWhere = struct {
	ID                whereHelperuint
	DeviceTypeID      whereHelpernull_Uint16
	BlockName         whereHelpernull_String
	FileName          whereHelperstring
	UseController     whereHelperbool
	Deletable         whereHelperbool
	CreateDate        whereHelpertime_Time
	UpdateDate        whereHelpertime_Time
	DiscriminatorType whereHelperstring
}{
	ID:                whereHelperuint{field: `id`},
	DeviceTypeID:      whereHelpernull_Uint16{field: `device_type_id`},
	BlockName:         whereHelpernull_String{field: `block_name`},
	FileName:          whereHelperstring{field: `file_name`},
	UseController:     whereHelperbool{field: `use_controller`},
	Deletable:         whereHelperbool{field: `deletable`},
	CreateDate:        whereHelpertime_Time{field: `create_date`},
	UpdateDate:        whereHelpertime_Time{field: `update_date`},
	DiscriminatorType: whereHelperstring{field: `discriminator_type`},
}

// DTBBlockRels is where relationship names are stored.
var DTBBlockRels = struct {
	DeviceType             string
	BlockDTBBlockPositions string
}{
	DeviceType:             "DeviceType",
	BlockDTBBlockPositions: "BlockDTBBlockPositions",
}

// dtbBlockR is where relationships are stored.
type dtbBlockR struct {
	DeviceType             *MTBDeviceType
	BlockDTBBlockPositions DTBBlockPositionSlice
}

// NewStruct creates a new relationship struct
func (*dtbBlockR) NewStruct() *dtbBlockR {
	return &dtbBlockR{}
}

// dtbBlockL is where Load methods for each relationship are stored.
type dtbBlockL struct{}

var (
	dtbBlockColumns               = []string{"id", "device_type_id", "block_name", "file_name", "use_controller", "deletable", "create_date", "update_date", "discriminator_type"}
	dtbBlockColumnsWithoutDefault = []string{"device_type_id", "block_name", "file_name", "create_date", "update_date", "discriminator_type"}
	dtbBlockColumnsWithDefault    = []string{"id", "use_controller", "deletable"}
	dtbBlockPrimaryKeyColumns     = []string{"id"}
)

type (
	// DTBBlockSlice is an alias for a slice of pointers to DTBBlock.
	// This should generally be used opposed to []DTBBlock.
	DTBBlockSlice []*DTBBlock
	// DTBBlockHook is the signature for custom DTBBlock hook methods
	DTBBlockHook func(context.Context, boil.ContextExecutor, *DTBBlock) error

	dtbBlockQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dtbBlockType                 = reflect.TypeOf(&DTBBlock{})
	dtbBlockMapping              = queries.MakeStructMapping(dtbBlockType)
	dtbBlockPrimaryKeyMapping, _ = queries.BindMapping(dtbBlockType, dtbBlockMapping, dtbBlockPrimaryKeyColumns)
	dtbBlockInsertCacheMut       sync.RWMutex
	dtbBlockInsertCache          = make(map[string]insertCache)
	dtbBlockUpdateCacheMut       sync.RWMutex
	dtbBlockUpdateCache          = make(map[string]updateCache)
	dtbBlockUpsertCacheMut       sync.RWMutex
	dtbBlockUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dtbBlockBeforeInsertHooks []DTBBlockHook
var dtbBlockBeforeUpdateHooks []DTBBlockHook
var dtbBlockBeforeDeleteHooks []DTBBlockHook
var dtbBlockBeforeUpsertHooks []DTBBlockHook

var dtbBlockAfterInsertHooks []DTBBlockHook
var dtbBlockAfterSelectHooks []DTBBlockHook
var dtbBlockAfterUpdateHooks []DTBBlockHook
var dtbBlockAfterDeleteHooks []DTBBlockHook
var dtbBlockAfterUpsertHooks []DTBBlockHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DTBBlock) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbBlockBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DTBBlock) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbBlockBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DTBBlock) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbBlockBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DTBBlock) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbBlockBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DTBBlock) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbBlockAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DTBBlock) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbBlockAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DTBBlock) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbBlockAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DTBBlock) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbBlockAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DTBBlock) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbBlockAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDTBBlockHook registers your hook function for all future operations.
func AddDTBBlockHook(hookPoint boil.HookPoint, dtbBlockHook DTBBlockHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		dtbBlockBeforeInsertHooks = append(dtbBlockBeforeInsertHooks, dtbBlockHook)
	case boil.BeforeUpdateHook:
		dtbBlockBeforeUpdateHooks = append(dtbBlockBeforeUpdateHooks, dtbBlockHook)
	case boil.BeforeDeleteHook:
		dtbBlockBeforeDeleteHooks = append(dtbBlockBeforeDeleteHooks, dtbBlockHook)
	case boil.BeforeUpsertHook:
		dtbBlockBeforeUpsertHooks = append(dtbBlockBeforeUpsertHooks, dtbBlockHook)
	case boil.AfterInsertHook:
		dtbBlockAfterInsertHooks = append(dtbBlockAfterInsertHooks, dtbBlockHook)
	case boil.AfterSelectHook:
		dtbBlockAfterSelectHooks = append(dtbBlockAfterSelectHooks, dtbBlockHook)
	case boil.AfterUpdateHook:
		dtbBlockAfterUpdateHooks = append(dtbBlockAfterUpdateHooks, dtbBlockHook)
	case boil.AfterDeleteHook:
		dtbBlockAfterDeleteHooks = append(dtbBlockAfterDeleteHooks, dtbBlockHook)
	case boil.AfterUpsertHook:
		dtbBlockAfterUpsertHooks = append(dtbBlockAfterUpsertHooks, dtbBlockHook)
	}
}

// One returns a single dtbBlock record from the query.
func (q dtbBlockQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DTBBlock, error) {
	o := &DTBBlock{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for dtb_block")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DTBBlock records from the query.
func (q dtbBlockQuery) All(ctx context.Context, exec boil.ContextExecutor) (DTBBlockSlice, error) {
	var o []*DTBBlock

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to DTBBlock slice")
	}

	if len(dtbBlockAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DTBBlock records in the query.
func (q dtbBlockQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count dtb_block rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dtbBlockQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if dtb_block exists")
	}

	return count > 0, nil
}

// DeviceType pointed to by the foreign key.
func (o *DTBBlock) DeviceType(mods ...qm.QueryMod) mtbDeviceTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.DeviceTypeID),
	}

	queryMods = append(queryMods, mods...)

	query := MTBDeviceTypes(queryMods...)
	queries.SetFrom(query.Query, "`mtb_device_type`")

	return query
}

// BlockDTBBlockPositions retrieves all the dtb_block_position's DTBBlockPositions with an executor via block_id column.
func (o *DTBBlock) BlockDTBBlockPositions(mods ...qm.QueryMod) dtbBlockPositionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`dtb_block_position`.`block_id`=?", o.ID),
	)

	query := DTBBlockPositions(queryMods...)
	queries.SetFrom(query.Query, "`dtb_block_position`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`dtb_block_position`.*"})
	}

	return query
}

// LoadDeviceType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dtbBlockL) LoadDeviceType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBBlock interface{}, mods queries.Applicator) error {
	var slice []*DTBBlock
	var object *DTBBlock

	if singular {
		object = maybeDTBBlock.(*DTBBlock)
	} else {
		slice = *maybeDTBBlock.(*[]*DTBBlock)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbBlockR{}
		}
		if !queries.IsNil(object.DeviceTypeID) {
			args = append(args, object.DeviceTypeID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbBlockR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DeviceTypeID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.DeviceTypeID) {
				args = append(args, obj.DeviceTypeID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`mtb_device_type`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MTBDeviceType")
	}

	var resultSlice []*MTBDeviceType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MTBDeviceType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mtb_device_type")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mtb_device_type")
	}

	if len(dtbBlockAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DeviceType = foreign
		if foreign.R == nil {
			foreign.R = &mtbDeviceTypeR{}
		}
		foreign.R.DeviceTypeDTBBlocks = append(foreign.R.DeviceTypeDTBBlocks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DeviceTypeID, foreign.ID) {
				local.R.DeviceType = foreign
				if foreign.R == nil {
					foreign.R = &mtbDeviceTypeR{}
				}
				foreign.R.DeviceTypeDTBBlocks = append(foreign.R.DeviceTypeDTBBlocks, local)
				break
			}
		}
	}

	return nil
}

// LoadBlockDTBBlockPositions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dtbBlockL) LoadBlockDTBBlockPositions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBBlock interface{}, mods queries.Applicator) error {
	var slice []*DTBBlock
	var object *DTBBlock

	if singular {
		object = maybeDTBBlock.(*DTBBlock)
	} else {
		slice = *maybeDTBBlock.(*[]*DTBBlock)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbBlockR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbBlockR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_block_position`), qm.WhereIn(`block_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dtb_block_position")
	}

	var resultSlice []*DTBBlockPosition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dtb_block_position")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dtb_block_position")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_block_position")
	}

	if len(dtbBlockPositionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BlockDTBBlockPositions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dtbBlockPositionR{}
			}
			foreign.R.Block = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BlockID {
				local.R.BlockDTBBlockPositions = append(local.R.BlockDTBBlockPositions, foreign)
				if foreign.R == nil {
					foreign.R = &dtbBlockPositionR{}
				}
				foreign.R.Block = local
				break
			}
		}
	}

	return nil
}

// SetDeviceType of the dtbBlock to the related item.
// Sets o.R.DeviceType to related.
// Adds o to related.R.DeviceTypeDTBBlocks.
func (o *DTBBlock) SetDeviceType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MTBDeviceType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `dtb_block` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"device_type_id"}),
		strmangle.WhereClause("`", "`", 0, dtbBlockPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DeviceTypeID, related.ID)
	if o.R == nil {
		o.R = &dtbBlockR{
			DeviceType: related,
		}
	} else {
		o.R.DeviceType = related
	}

	if related.R == nil {
		related.R = &mtbDeviceTypeR{
			DeviceTypeDTBBlocks: DTBBlockSlice{o},
		}
	} else {
		related.R.DeviceTypeDTBBlocks = append(related.R.DeviceTypeDTBBlocks, o)
	}

	return nil
}

// RemoveDeviceType relationship.
// Sets o.R.DeviceType to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *DTBBlock) RemoveDeviceType(ctx context.Context, exec boil.ContextExecutor, related *MTBDeviceType) error {
	var err error

	queries.SetScanner(&o.DeviceTypeID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("device_type_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.DeviceType = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.DeviceTypeDTBBlocks {
		if queries.Equal(o.DeviceTypeID, ri.DeviceTypeID) {
			continue
		}

		ln := len(related.R.DeviceTypeDTBBlocks)
		if ln > 1 && i < ln-1 {
			related.R.DeviceTypeDTBBlocks[i] = related.R.DeviceTypeDTBBlocks[ln-1]
		}
		related.R.DeviceTypeDTBBlocks = related.R.DeviceTypeDTBBlocks[:ln-1]
		break
	}
	return nil
}

// AddBlockDTBBlockPositions adds the given related objects to the existing relationships
// of the dtb_block, optionally inserting them as new records.
// Appends related to o.R.BlockDTBBlockPositions.
// Sets related.R.Block appropriately.
func (o *DTBBlock) AddBlockDTBBlockPositions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBBlockPosition) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BlockID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `dtb_block_position` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"block_id"}),
				strmangle.WhereClause("`", "`", 0, dtbBlockPositionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Section, rel.BlockID, rel.LayoutID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BlockID = o.ID
		}
	}

	if o.R == nil {
		o.R = &dtbBlockR{
			BlockDTBBlockPositions: related,
		}
	} else {
		o.R.BlockDTBBlockPositions = append(o.R.BlockDTBBlockPositions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dtbBlockPositionR{
				Block: o,
			}
		} else {
			rel.R.Block = o
		}
	}
	return nil
}

// DTBBlocks retrieves all the records using an executor.
func DTBBlocks(mods ...qm.QueryMod) dtbBlockQuery {
	mods = append(mods, qm.From("`dtb_block`"))
	return dtbBlockQuery{NewQuery(mods...)}
}

// FindDTBBlock retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDTBBlock(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*DTBBlock, error) {
	dtbBlockObj := &DTBBlock{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `dtb_block` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, dtbBlockObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from dtb_block")
	}

	return dtbBlockObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DTBBlock) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no dtb_block provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dtbBlockColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dtbBlockInsertCacheMut.RLock()
	cache, cached := dtbBlockInsertCache[key]
	dtbBlockInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dtbBlockColumns,
			dtbBlockColumnsWithDefault,
			dtbBlockColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dtbBlockType, dtbBlockMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dtbBlockType, dtbBlockMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `dtb_block` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `dtb_block` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `dtb_block` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dtbBlockPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into dtb_block")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == dtbBlockMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for dtb_block")
	}

CacheNoHooks:
	if !cached {
		dtbBlockInsertCacheMut.Lock()
		dtbBlockInsertCache[key] = cache
		dtbBlockInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DTBBlock.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DTBBlock) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dtbBlockUpdateCacheMut.RLock()
	cache, cached := dtbBlockUpdateCache[key]
	dtbBlockUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dtbBlockColumns,
			dtbBlockPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update dtb_block, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `dtb_block` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dtbBlockPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dtbBlockType, dtbBlockMapping, append(wl, dtbBlockPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update dtb_block row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for dtb_block")
	}

	if !cached {
		dtbBlockUpdateCacheMut.Lock()
		dtbBlockUpdateCache[key] = cache
		dtbBlockUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dtbBlockQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for dtb_block")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for dtb_block")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DTBBlockSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbBlockPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `dtb_block` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbBlockPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in dtbBlock slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all dtbBlock")
	}
	return rowsAff, nil
}

var mySQLDTBBlockUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DTBBlock) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no dtb_block provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dtbBlockColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDTBBlockUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dtbBlockUpsertCacheMut.RLock()
	cache, cached := dtbBlockUpsertCache[key]
	dtbBlockUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dtbBlockColumns,
			dtbBlockColumnsWithDefault,
			dtbBlockColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			dtbBlockColumns,
			dtbBlockPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("model: unable to upsert dtb_block, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "dtb_block", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `dtb_block` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dtbBlockType, dtbBlockMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dtbBlockType, dtbBlockMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for dtb_block")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == dtbBlockMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dtbBlockType, dtbBlockMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for dtb_block")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for dtb_block")
	}

CacheNoHooks:
	if !cached {
		dtbBlockUpsertCacheMut.Lock()
		dtbBlockUpsertCache[key] = cache
		dtbBlockUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DTBBlock record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DTBBlock) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no DTBBlock provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dtbBlockPrimaryKeyMapping)
	sql := "DELETE FROM `dtb_block` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from dtb_block")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for dtb_block")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dtbBlockQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no dtbBlockQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from dtb_block")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for dtb_block")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DTBBlockSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no DTBBlock slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(dtbBlockBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbBlockPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `dtb_block` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbBlockPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from dtbBlock slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for dtb_block")
	}

	if len(dtbBlockAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DTBBlock) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDTBBlock(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DTBBlockSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DTBBlockSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbBlockPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `dtb_block`.* FROM `dtb_block` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbBlockPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in DTBBlockSlice")
	}

	*o = slice

	return nil
}

// DTBBlockExists checks if the DTBBlock row exists.
func DTBBlockExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `dtb_block` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if dtb_block exists")
	}

	return exists, nil
}
