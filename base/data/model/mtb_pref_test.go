// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMTBPrefs(t *testing.T) {
	t.Parallel()

	query := MTBPrefs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMTBPrefsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBPref{}
	if err = randomize.Struct(seed, o, mtbPrefDBTypes, true, mtbPrefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPref struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MTBPrefs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMTBPrefsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBPref{}
	if err = randomize.Struct(seed, o, mtbPrefDBTypes, true, mtbPrefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPref struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MTBPrefs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MTBPrefs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMTBPrefsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBPref{}
	if err = randomize.Struct(seed, o, mtbPrefDBTypes, true, mtbPrefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPref struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MTBPrefSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MTBPrefs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMTBPrefsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBPref{}
	if err = randomize.Struct(seed, o, mtbPrefDBTypes, true, mtbPrefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPref struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MTBPrefExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if MTBPref exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MTBPrefExists to return true, but got false.")
	}
}

func testMTBPrefsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBPref{}
	if err = randomize.Struct(seed, o, mtbPrefDBTypes, true, mtbPrefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPref struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	mtbPrefFound, err := FindMTBPref(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if mtbPrefFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMTBPrefsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBPref{}
	if err = randomize.Struct(seed, o, mtbPrefDBTypes, true, mtbPrefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPref struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MTBPrefs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMTBPrefsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBPref{}
	if err = randomize.Struct(seed, o, mtbPrefDBTypes, true, mtbPrefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPref struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MTBPrefs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMTBPrefsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	mtbPrefOne := &MTBPref{}
	mtbPrefTwo := &MTBPref{}
	if err = randomize.Struct(seed, mtbPrefOne, mtbPrefDBTypes, false, mtbPrefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPref struct: %s", err)
	}
	if err = randomize.Struct(seed, mtbPrefTwo, mtbPrefDBTypes, false, mtbPrefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPref struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mtbPrefOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mtbPrefTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MTBPrefs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMTBPrefsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	mtbPrefOne := &MTBPref{}
	mtbPrefTwo := &MTBPref{}
	if err = randomize.Struct(seed, mtbPrefOne, mtbPrefDBTypes, false, mtbPrefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPref struct: %s", err)
	}
	if err = randomize.Struct(seed, mtbPrefTwo, mtbPrefDBTypes, false, mtbPrefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPref struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mtbPrefOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mtbPrefTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MTBPrefs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func mtbPrefBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *MTBPref) error {
	*o = MTBPref{}
	return nil
}

func mtbPrefAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *MTBPref) error {
	*o = MTBPref{}
	return nil
}

func mtbPrefAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *MTBPref) error {
	*o = MTBPref{}
	return nil
}

func mtbPrefBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MTBPref) error {
	*o = MTBPref{}
	return nil
}

func mtbPrefAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MTBPref) error {
	*o = MTBPref{}
	return nil
}

func mtbPrefBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MTBPref) error {
	*o = MTBPref{}
	return nil
}

func mtbPrefAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MTBPref) error {
	*o = MTBPref{}
	return nil
}

func mtbPrefBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MTBPref) error {
	*o = MTBPref{}
	return nil
}

func mtbPrefAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MTBPref) error {
	*o = MTBPref{}
	return nil
}

func testMTBPrefsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &MTBPref{}
	o := &MTBPref{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, mtbPrefDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MTBPref object: %s", err)
	}

	AddMTBPrefHook(boil.BeforeInsertHook, mtbPrefBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	mtbPrefBeforeInsertHooks = []MTBPrefHook{}

	AddMTBPrefHook(boil.AfterInsertHook, mtbPrefAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	mtbPrefAfterInsertHooks = []MTBPrefHook{}

	AddMTBPrefHook(boil.AfterSelectHook, mtbPrefAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	mtbPrefAfterSelectHooks = []MTBPrefHook{}

	AddMTBPrefHook(boil.BeforeUpdateHook, mtbPrefBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	mtbPrefBeforeUpdateHooks = []MTBPrefHook{}

	AddMTBPrefHook(boil.AfterUpdateHook, mtbPrefAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	mtbPrefAfterUpdateHooks = []MTBPrefHook{}

	AddMTBPrefHook(boil.BeforeDeleteHook, mtbPrefBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	mtbPrefBeforeDeleteHooks = []MTBPrefHook{}

	AddMTBPrefHook(boil.AfterDeleteHook, mtbPrefAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	mtbPrefAfterDeleteHooks = []MTBPrefHook{}

	AddMTBPrefHook(boil.BeforeUpsertHook, mtbPrefBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	mtbPrefBeforeUpsertHooks = []MTBPrefHook{}

	AddMTBPrefHook(boil.AfterUpsertHook, mtbPrefAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	mtbPrefAfterUpsertHooks = []MTBPrefHook{}
}

func testMTBPrefsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBPref{}
	if err = randomize.Struct(seed, o, mtbPrefDBTypes, true, mtbPrefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPref struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MTBPrefs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMTBPrefsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBPref{}
	if err = randomize.Struct(seed, o, mtbPrefDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MTBPref struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(mtbPrefColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MTBPrefs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMTBPrefToManyPrefDTBBaseInfos(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBPref
	var b, c DTBBaseInfo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbPrefDBTypes, true, mtbPrefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPref struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbBaseInfoDBTypes, false, dtbBaseInfoColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbBaseInfoDBTypes, false, dtbBaseInfoColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.PrefID, a.ID)
	queries.Assign(&c.PrefID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PrefDTBBaseInfos().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.PrefID, b.PrefID) {
			bFound = true
		}
		if queries.Equal(v.PrefID, c.PrefID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MTBPrefSlice{&a}
	if err = a.L.LoadPrefDTBBaseInfos(ctx, tx, false, (*[]*MTBPref)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PrefDTBBaseInfos); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PrefDTBBaseInfos = nil
	if err = a.L.LoadPrefDTBBaseInfos(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PrefDTBBaseInfos); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMTBPrefToManyPrefDTBCustomers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBPref
	var b, c DTBCustomer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbPrefDBTypes, true, mtbPrefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPref struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbCustomerDBTypes, false, dtbCustomerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbCustomerDBTypes, false, dtbCustomerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.PrefID, a.ID)
	queries.Assign(&c.PrefID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PrefDTBCustomers().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.PrefID, b.PrefID) {
			bFound = true
		}
		if queries.Equal(v.PrefID, c.PrefID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MTBPrefSlice{&a}
	if err = a.L.LoadPrefDTBCustomers(ctx, tx, false, (*[]*MTBPref)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PrefDTBCustomers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PrefDTBCustomers = nil
	if err = a.L.LoadPrefDTBCustomers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PrefDTBCustomers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMTBPrefToManyPrefDTBCustomerAddresses(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBPref
	var b, c DTBCustomerAddress

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbPrefDBTypes, true, mtbPrefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPref struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbCustomerAddressDBTypes, false, dtbCustomerAddressColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbCustomerAddressDBTypes, false, dtbCustomerAddressColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.PrefID, a.ID)
	queries.Assign(&c.PrefID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PrefDTBCustomerAddresses().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.PrefID, b.PrefID) {
			bFound = true
		}
		if queries.Equal(v.PrefID, c.PrefID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MTBPrefSlice{&a}
	if err = a.L.LoadPrefDTBCustomerAddresses(ctx, tx, false, (*[]*MTBPref)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PrefDTBCustomerAddresses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PrefDTBCustomerAddresses = nil
	if err = a.L.LoadPrefDTBCustomerAddresses(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PrefDTBCustomerAddresses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMTBPrefToManyPrefDTBDeliveryFees(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBPref
	var b, c DTBDeliveryFee

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbPrefDBTypes, true, mtbPrefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPref struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbDeliveryFeeDBTypes, false, dtbDeliveryFeeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbDeliveryFeeDBTypes, false, dtbDeliveryFeeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.PrefID, a.ID)
	queries.Assign(&c.PrefID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PrefDTBDeliveryFees().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.PrefID, b.PrefID) {
			bFound = true
		}
		if queries.Equal(v.PrefID, c.PrefID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MTBPrefSlice{&a}
	if err = a.L.LoadPrefDTBDeliveryFees(ctx, tx, false, (*[]*MTBPref)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PrefDTBDeliveryFees); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PrefDTBDeliveryFees = nil
	if err = a.L.LoadPrefDTBDeliveryFees(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PrefDTBDeliveryFees); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMTBPrefToManyPrefDTBOrders(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBPref
	var b, c DTBOrder

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbPrefDBTypes, true, mtbPrefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPref struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbOrderDBTypes, false, dtbOrderColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbOrderDBTypes, false, dtbOrderColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.PrefID, a.ID)
	queries.Assign(&c.PrefID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PrefDTBOrders().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.PrefID, b.PrefID) {
			bFound = true
		}
		if queries.Equal(v.PrefID, c.PrefID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MTBPrefSlice{&a}
	if err = a.L.LoadPrefDTBOrders(ctx, tx, false, (*[]*MTBPref)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PrefDTBOrders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PrefDTBOrders = nil
	if err = a.L.LoadPrefDTBOrders(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PrefDTBOrders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMTBPrefToManyPrefDTBShippings(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBPref
	var b, c DTBShipping

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbPrefDBTypes, true, mtbPrefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPref struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbShippingDBTypes, false, dtbShippingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbShippingDBTypes, false, dtbShippingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.PrefID, a.ID)
	queries.Assign(&c.PrefID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PrefDTBShippings().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.PrefID, b.PrefID) {
			bFound = true
		}
		if queries.Equal(v.PrefID, c.PrefID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MTBPrefSlice{&a}
	if err = a.L.LoadPrefDTBShippings(ctx, tx, false, (*[]*MTBPref)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PrefDTBShippings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PrefDTBShippings = nil
	if err = a.L.LoadPrefDTBShippings(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PrefDTBShippings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMTBPrefToManyPrefDTBTaxRules(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBPref
	var b, c DTBTaxRule

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbPrefDBTypes, true, mtbPrefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPref struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbTaxRuleDBTypes, false, dtbTaxRuleColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbTaxRuleDBTypes, false, dtbTaxRuleColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.PrefID, a.ID)
	queries.Assign(&c.PrefID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PrefDTBTaxRules().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.PrefID, b.PrefID) {
			bFound = true
		}
		if queries.Equal(v.PrefID, c.PrefID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MTBPrefSlice{&a}
	if err = a.L.LoadPrefDTBTaxRules(ctx, tx, false, (*[]*MTBPref)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PrefDTBTaxRules); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PrefDTBTaxRules = nil
	if err = a.L.LoadPrefDTBTaxRules(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PrefDTBTaxRules); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMTBPrefToManyAddOpPrefDTBBaseInfos(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBPref
	var b, c, d, e DTBBaseInfo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBBaseInfo{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbBaseInfoDBTypes, false, strmangle.SetComplement(dtbBaseInfoPrimaryKeyColumns, dtbBaseInfoColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBBaseInfo{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPrefDTBBaseInfos(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.PrefID) {
			t.Error("foreign key was wrong value", a.ID, first.PrefID)
		}
		if !queries.Equal(a.ID, second.PrefID) {
			t.Error("foreign key was wrong value", a.ID, second.PrefID)
		}

		if first.R.Pref != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Pref != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PrefDTBBaseInfos[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PrefDTBBaseInfos[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PrefDTBBaseInfos().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMTBPrefToManySetOpPrefDTBBaseInfos(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBPref
	var b, c, d, e DTBBaseInfo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBBaseInfo{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbBaseInfoDBTypes, false, strmangle.SetComplement(dtbBaseInfoPrimaryKeyColumns, dtbBaseInfoColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetPrefDTBBaseInfos(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PrefDTBBaseInfos().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetPrefDTBBaseInfos(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PrefDTBBaseInfos().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PrefID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PrefID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.PrefID) {
		t.Error("foreign key was wrong value", a.ID, d.PrefID)
	}
	if !queries.Equal(a.ID, e.PrefID) {
		t.Error("foreign key was wrong value", a.ID, e.PrefID)
	}

	if b.R.Pref != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Pref != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Pref != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Pref != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.PrefDTBBaseInfos[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.PrefDTBBaseInfos[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMTBPrefToManyRemoveOpPrefDTBBaseInfos(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBPref
	var b, c, d, e DTBBaseInfo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBBaseInfo{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbBaseInfoDBTypes, false, strmangle.SetComplement(dtbBaseInfoPrimaryKeyColumns, dtbBaseInfoColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddPrefDTBBaseInfos(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PrefDTBBaseInfos().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemovePrefDTBBaseInfos(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PrefDTBBaseInfos().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PrefID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PrefID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Pref != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Pref != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Pref != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Pref != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.PrefDTBBaseInfos) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.PrefDTBBaseInfos[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.PrefDTBBaseInfos[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMTBPrefToManyAddOpPrefDTBCustomers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBPref
	var b, c, d, e DTBCustomer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBCustomer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbCustomerDBTypes, false, strmangle.SetComplement(dtbCustomerPrimaryKeyColumns, dtbCustomerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBCustomer{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPrefDTBCustomers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.PrefID) {
			t.Error("foreign key was wrong value", a.ID, first.PrefID)
		}
		if !queries.Equal(a.ID, second.PrefID) {
			t.Error("foreign key was wrong value", a.ID, second.PrefID)
		}

		if first.R.Pref != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Pref != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PrefDTBCustomers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PrefDTBCustomers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PrefDTBCustomers().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMTBPrefToManySetOpPrefDTBCustomers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBPref
	var b, c, d, e DTBCustomer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBCustomer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbCustomerDBTypes, false, strmangle.SetComplement(dtbCustomerPrimaryKeyColumns, dtbCustomerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetPrefDTBCustomers(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PrefDTBCustomers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetPrefDTBCustomers(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PrefDTBCustomers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PrefID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PrefID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.PrefID) {
		t.Error("foreign key was wrong value", a.ID, d.PrefID)
	}
	if !queries.Equal(a.ID, e.PrefID) {
		t.Error("foreign key was wrong value", a.ID, e.PrefID)
	}

	if b.R.Pref != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Pref != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Pref != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Pref != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.PrefDTBCustomers[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.PrefDTBCustomers[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMTBPrefToManyRemoveOpPrefDTBCustomers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBPref
	var b, c, d, e DTBCustomer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBCustomer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbCustomerDBTypes, false, strmangle.SetComplement(dtbCustomerPrimaryKeyColumns, dtbCustomerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddPrefDTBCustomers(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PrefDTBCustomers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemovePrefDTBCustomers(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PrefDTBCustomers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PrefID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PrefID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Pref != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Pref != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Pref != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Pref != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.PrefDTBCustomers) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.PrefDTBCustomers[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.PrefDTBCustomers[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMTBPrefToManyAddOpPrefDTBCustomerAddresses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBPref
	var b, c, d, e DTBCustomerAddress

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBCustomerAddress{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbCustomerAddressDBTypes, false, strmangle.SetComplement(dtbCustomerAddressPrimaryKeyColumns, dtbCustomerAddressColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBCustomerAddress{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPrefDTBCustomerAddresses(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.PrefID) {
			t.Error("foreign key was wrong value", a.ID, first.PrefID)
		}
		if !queries.Equal(a.ID, second.PrefID) {
			t.Error("foreign key was wrong value", a.ID, second.PrefID)
		}

		if first.R.Pref != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Pref != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PrefDTBCustomerAddresses[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PrefDTBCustomerAddresses[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PrefDTBCustomerAddresses().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMTBPrefToManySetOpPrefDTBCustomerAddresses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBPref
	var b, c, d, e DTBCustomerAddress

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBCustomerAddress{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbCustomerAddressDBTypes, false, strmangle.SetComplement(dtbCustomerAddressPrimaryKeyColumns, dtbCustomerAddressColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetPrefDTBCustomerAddresses(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PrefDTBCustomerAddresses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetPrefDTBCustomerAddresses(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PrefDTBCustomerAddresses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PrefID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PrefID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.PrefID) {
		t.Error("foreign key was wrong value", a.ID, d.PrefID)
	}
	if !queries.Equal(a.ID, e.PrefID) {
		t.Error("foreign key was wrong value", a.ID, e.PrefID)
	}

	if b.R.Pref != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Pref != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Pref != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Pref != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.PrefDTBCustomerAddresses[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.PrefDTBCustomerAddresses[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMTBPrefToManyRemoveOpPrefDTBCustomerAddresses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBPref
	var b, c, d, e DTBCustomerAddress

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBCustomerAddress{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbCustomerAddressDBTypes, false, strmangle.SetComplement(dtbCustomerAddressPrimaryKeyColumns, dtbCustomerAddressColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddPrefDTBCustomerAddresses(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PrefDTBCustomerAddresses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemovePrefDTBCustomerAddresses(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PrefDTBCustomerAddresses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PrefID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PrefID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Pref != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Pref != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Pref != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Pref != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.PrefDTBCustomerAddresses) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.PrefDTBCustomerAddresses[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.PrefDTBCustomerAddresses[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMTBPrefToManyAddOpPrefDTBDeliveryFees(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBPref
	var b, c, d, e DTBDeliveryFee

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBDeliveryFee{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbDeliveryFeeDBTypes, false, strmangle.SetComplement(dtbDeliveryFeePrimaryKeyColumns, dtbDeliveryFeeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBDeliveryFee{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPrefDTBDeliveryFees(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.PrefID) {
			t.Error("foreign key was wrong value", a.ID, first.PrefID)
		}
		if !queries.Equal(a.ID, second.PrefID) {
			t.Error("foreign key was wrong value", a.ID, second.PrefID)
		}

		if first.R.Pref != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Pref != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PrefDTBDeliveryFees[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PrefDTBDeliveryFees[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PrefDTBDeliveryFees().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMTBPrefToManySetOpPrefDTBDeliveryFees(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBPref
	var b, c, d, e DTBDeliveryFee

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBDeliveryFee{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbDeliveryFeeDBTypes, false, strmangle.SetComplement(dtbDeliveryFeePrimaryKeyColumns, dtbDeliveryFeeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetPrefDTBDeliveryFees(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PrefDTBDeliveryFees().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetPrefDTBDeliveryFees(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PrefDTBDeliveryFees().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PrefID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PrefID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.PrefID) {
		t.Error("foreign key was wrong value", a.ID, d.PrefID)
	}
	if !queries.Equal(a.ID, e.PrefID) {
		t.Error("foreign key was wrong value", a.ID, e.PrefID)
	}

	if b.R.Pref != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Pref != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Pref != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Pref != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.PrefDTBDeliveryFees[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.PrefDTBDeliveryFees[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMTBPrefToManyRemoveOpPrefDTBDeliveryFees(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBPref
	var b, c, d, e DTBDeliveryFee

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBDeliveryFee{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbDeliveryFeeDBTypes, false, strmangle.SetComplement(dtbDeliveryFeePrimaryKeyColumns, dtbDeliveryFeeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddPrefDTBDeliveryFees(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PrefDTBDeliveryFees().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemovePrefDTBDeliveryFees(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PrefDTBDeliveryFees().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PrefID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PrefID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Pref != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Pref != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Pref != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Pref != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.PrefDTBDeliveryFees) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.PrefDTBDeliveryFees[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.PrefDTBDeliveryFees[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMTBPrefToManyAddOpPrefDTBOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBPref
	var b, c, d, e DTBOrder

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBOrder{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBOrder{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPrefDTBOrders(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.PrefID) {
			t.Error("foreign key was wrong value", a.ID, first.PrefID)
		}
		if !queries.Equal(a.ID, second.PrefID) {
			t.Error("foreign key was wrong value", a.ID, second.PrefID)
		}

		if first.R.Pref != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Pref != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PrefDTBOrders[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PrefDTBOrders[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PrefDTBOrders().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMTBPrefToManySetOpPrefDTBOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBPref
	var b, c, d, e DTBOrder

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBOrder{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetPrefDTBOrders(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PrefDTBOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetPrefDTBOrders(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PrefDTBOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PrefID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PrefID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.PrefID) {
		t.Error("foreign key was wrong value", a.ID, d.PrefID)
	}
	if !queries.Equal(a.ID, e.PrefID) {
		t.Error("foreign key was wrong value", a.ID, e.PrefID)
	}

	if b.R.Pref != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Pref != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Pref != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Pref != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.PrefDTBOrders[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.PrefDTBOrders[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMTBPrefToManyRemoveOpPrefDTBOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBPref
	var b, c, d, e DTBOrder

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBOrder{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddPrefDTBOrders(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PrefDTBOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemovePrefDTBOrders(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PrefDTBOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PrefID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PrefID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Pref != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Pref != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Pref != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Pref != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.PrefDTBOrders) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.PrefDTBOrders[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.PrefDTBOrders[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMTBPrefToManyAddOpPrefDTBShippings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBPref
	var b, c, d, e DTBShipping

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBShipping{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbShippingDBTypes, false, strmangle.SetComplement(dtbShippingPrimaryKeyColumns, dtbShippingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBShipping{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPrefDTBShippings(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.PrefID) {
			t.Error("foreign key was wrong value", a.ID, first.PrefID)
		}
		if !queries.Equal(a.ID, second.PrefID) {
			t.Error("foreign key was wrong value", a.ID, second.PrefID)
		}

		if first.R.Pref != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Pref != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PrefDTBShippings[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PrefDTBShippings[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PrefDTBShippings().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMTBPrefToManySetOpPrefDTBShippings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBPref
	var b, c, d, e DTBShipping

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBShipping{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbShippingDBTypes, false, strmangle.SetComplement(dtbShippingPrimaryKeyColumns, dtbShippingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetPrefDTBShippings(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PrefDTBShippings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetPrefDTBShippings(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PrefDTBShippings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PrefID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PrefID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.PrefID) {
		t.Error("foreign key was wrong value", a.ID, d.PrefID)
	}
	if !queries.Equal(a.ID, e.PrefID) {
		t.Error("foreign key was wrong value", a.ID, e.PrefID)
	}

	if b.R.Pref != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Pref != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Pref != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Pref != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.PrefDTBShippings[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.PrefDTBShippings[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMTBPrefToManyRemoveOpPrefDTBShippings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBPref
	var b, c, d, e DTBShipping

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBShipping{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbShippingDBTypes, false, strmangle.SetComplement(dtbShippingPrimaryKeyColumns, dtbShippingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddPrefDTBShippings(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PrefDTBShippings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemovePrefDTBShippings(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PrefDTBShippings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PrefID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PrefID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Pref != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Pref != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Pref != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Pref != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.PrefDTBShippings) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.PrefDTBShippings[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.PrefDTBShippings[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMTBPrefToManyAddOpPrefDTBTaxRules(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBPref
	var b, c, d, e DTBTaxRule

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBTaxRule{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbTaxRuleDBTypes, false, strmangle.SetComplement(dtbTaxRulePrimaryKeyColumns, dtbTaxRuleColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBTaxRule{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPrefDTBTaxRules(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.PrefID) {
			t.Error("foreign key was wrong value", a.ID, first.PrefID)
		}
		if !queries.Equal(a.ID, second.PrefID) {
			t.Error("foreign key was wrong value", a.ID, second.PrefID)
		}

		if first.R.Pref != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Pref != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PrefDTBTaxRules[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PrefDTBTaxRules[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PrefDTBTaxRules().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMTBPrefToManySetOpPrefDTBTaxRules(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBPref
	var b, c, d, e DTBTaxRule

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBTaxRule{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbTaxRuleDBTypes, false, strmangle.SetComplement(dtbTaxRulePrimaryKeyColumns, dtbTaxRuleColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetPrefDTBTaxRules(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PrefDTBTaxRules().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetPrefDTBTaxRules(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PrefDTBTaxRules().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PrefID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PrefID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.PrefID) {
		t.Error("foreign key was wrong value", a.ID, d.PrefID)
	}
	if !queries.Equal(a.ID, e.PrefID) {
		t.Error("foreign key was wrong value", a.ID, e.PrefID)
	}

	if b.R.Pref != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Pref != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Pref != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Pref != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.PrefDTBTaxRules[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.PrefDTBTaxRules[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMTBPrefToManyRemoveOpPrefDTBTaxRules(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBPref
	var b, c, d, e DTBTaxRule

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBTaxRule{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbTaxRuleDBTypes, false, strmangle.SetComplement(dtbTaxRulePrimaryKeyColumns, dtbTaxRuleColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddPrefDTBTaxRules(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PrefDTBTaxRules().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemovePrefDTBTaxRules(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PrefDTBTaxRules().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PrefID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PrefID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Pref != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Pref != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Pref != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Pref != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.PrefDTBTaxRules) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.PrefDTBTaxRules[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.PrefDTBTaxRules[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMTBPrefsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBPref{}
	if err = randomize.Struct(seed, o, mtbPrefDBTypes, true, mtbPrefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPref struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMTBPrefsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBPref{}
	if err = randomize.Struct(seed, o, mtbPrefDBTypes, true, mtbPrefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPref struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MTBPrefSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMTBPrefsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBPref{}
	if err = randomize.Struct(seed, o, mtbPrefDBTypes, true, mtbPrefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPref struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MTBPrefs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	mtbPrefDBTypes = map[string]string{`ID`: `smallint`, `Name`: `varchar`, `SortNo`: `smallint`, `DiscriminatorType`: `varchar`}
	_              = bytes.MinRead
)

func testMTBPrefsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(mtbPrefPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(mtbPrefColumns) == len(mtbPrefPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MTBPref{}
	if err = randomize.Struct(seed, o, mtbPrefDBTypes, true, mtbPrefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPref struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MTBPrefs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mtbPrefDBTypes, true, mtbPrefPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MTBPref struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMTBPrefsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(mtbPrefColumns) == len(mtbPrefPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MTBPref{}
	if err = randomize.Struct(seed, o, mtbPrefDBTypes, true, mtbPrefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPref struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MTBPrefs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mtbPrefDBTypes, true, mtbPrefPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MTBPref struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(mtbPrefColumns, mtbPrefPrimaryKeyColumns) {
		fields = mtbPrefColumns
	} else {
		fields = strmangle.SetComplement(
			mtbPrefColumns,
			mtbPrefPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MTBPrefSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMTBPrefsUpsert(t *testing.T) {
	t.Parallel()

	if len(mtbPrefColumns) == len(mtbPrefPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLMTBPrefUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MTBPref{}
	if err = randomize.Struct(seed, &o, mtbPrefDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MTBPref struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MTBPref: %s", err)
	}

	count, err := MTBPrefs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, mtbPrefDBTypes, false, mtbPrefPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MTBPref struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MTBPref: %s", err)
	}

	count, err = MTBPrefs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
