// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMTBCustomerOrderStatuses(t *testing.T) {
	t.Parallel()

	query := MTBCustomerOrderStatuses()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMTBCustomerOrderStatusesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBCustomerOrderStatus{}
	if err = randomize.Struct(seed, o, mtbCustomerOrderStatusDBTypes, true, mtbCustomerOrderStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCustomerOrderStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MTBCustomerOrderStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMTBCustomerOrderStatusesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBCustomerOrderStatus{}
	if err = randomize.Struct(seed, o, mtbCustomerOrderStatusDBTypes, true, mtbCustomerOrderStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCustomerOrderStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MTBCustomerOrderStatuses().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MTBCustomerOrderStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMTBCustomerOrderStatusesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBCustomerOrderStatus{}
	if err = randomize.Struct(seed, o, mtbCustomerOrderStatusDBTypes, true, mtbCustomerOrderStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCustomerOrderStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MTBCustomerOrderStatusSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MTBCustomerOrderStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMTBCustomerOrderStatusesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBCustomerOrderStatus{}
	if err = randomize.Struct(seed, o, mtbCustomerOrderStatusDBTypes, true, mtbCustomerOrderStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCustomerOrderStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MTBCustomerOrderStatusExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if MTBCustomerOrderStatus exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MTBCustomerOrderStatusExists to return true, but got false.")
	}
}

func testMTBCustomerOrderStatusesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBCustomerOrderStatus{}
	if err = randomize.Struct(seed, o, mtbCustomerOrderStatusDBTypes, true, mtbCustomerOrderStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCustomerOrderStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	mtbCustomerOrderStatusFound, err := FindMTBCustomerOrderStatus(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if mtbCustomerOrderStatusFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMTBCustomerOrderStatusesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBCustomerOrderStatus{}
	if err = randomize.Struct(seed, o, mtbCustomerOrderStatusDBTypes, true, mtbCustomerOrderStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCustomerOrderStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MTBCustomerOrderStatuses().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMTBCustomerOrderStatusesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBCustomerOrderStatus{}
	if err = randomize.Struct(seed, o, mtbCustomerOrderStatusDBTypes, true, mtbCustomerOrderStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCustomerOrderStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MTBCustomerOrderStatuses().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMTBCustomerOrderStatusesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	mtbCustomerOrderStatusOne := &MTBCustomerOrderStatus{}
	mtbCustomerOrderStatusTwo := &MTBCustomerOrderStatus{}
	if err = randomize.Struct(seed, mtbCustomerOrderStatusOne, mtbCustomerOrderStatusDBTypes, false, mtbCustomerOrderStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCustomerOrderStatus struct: %s", err)
	}
	if err = randomize.Struct(seed, mtbCustomerOrderStatusTwo, mtbCustomerOrderStatusDBTypes, false, mtbCustomerOrderStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCustomerOrderStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mtbCustomerOrderStatusOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mtbCustomerOrderStatusTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MTBCustomerOrderStatuses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMTBCustomerOrderStatusesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	mtbCustomerOrderStatusOne := &MTBCustomerOrderStatus{}
	mtbCustomerOrderStatusTwo := &MTBCustomerOrderStatus{}
	if err = randomize.Struct(seed, mtbCustomerOrderStatusOne, mtbCustomerOrderStatusDBTypes, false, mtbCustomerOrderStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCustomerOrderStatus struct: %s", err)
	}
	if err = randomize.Struct(seed, mtbCustomerOrderStatusTwo, mtbCustomerOrderStatusDBTypes, false, mtbCustomerOrderStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCustomerOrderStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mtbCustomerOrderStatusOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mtbCustomerOrderStatusTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MTBCustomerOrderStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func mtbCustomerOrderStatusBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *MTBCustomerOrderStatus) error {
	*o = MTBCustomerOrderStatus{}
	return nil
}

func mtbCustomerOrderStatusAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *MTBCustomerOrderStatus) error {
	*o = MTBCustomerOrderStatus{}
	return nil
}

func mtbCustomerOrderStatusAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *MTBCustomerOrderStatus) error {
	*o = MTBCustomerOrderStatus{}
	return nil
}

func mtbCustomerOrderStatusBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MTBCustomerOrderStatus) error {
	*o = MTBCustomerOrderStatus{}
	return nil
}

func mtbCustomerOrderStatusAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MTBCustomerOrderStatus) error {
	*o = MTBCustomerOrderStatus{}
	return nil
}

func mtbCustomerOrderStatusBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MTBCustomerOrderStatus) error {
	*o = MTBCustomerOrderStatus{}
	return nil
}

func mtbCustomerOrderStatusAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MTBCustomerOrderStatus) error {
	*o = MTBCustomerOrderStatus{}
	return nil
}

func mtbCustomerOrderStatusBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MTBCustomerOrderStatus) error {
	*o = MTBCustomerOrderStatus{}
	return nil
}

func mtbCustomerOrderStatusAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MTBCustomerOrderStatus) error {
	*o = MTBCustomerOrderStatus{}
	return nil
}

func testMTBCustomerOrderStatusesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &MTBCustomerOrderStatus{}
	o := &MTBCustomerOrderStatus{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, mtbCustomerOrderStatusDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MTBCustomerOrderStatus object: %s", err)
	}

	AddMTBCustomerOrderStatusHook(boil.BeforeInsertHook, mtbCustomerOrderStatusBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	mtbCustomerOrderStatusBeforeInsertHooks = []MTBCustomerOrderStatusHook{}

	AddMTBCustomerOrderStatusHook(boil.AfterInsertHook, mtbCustomerOrderStatusAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	mtbCustomerOrderStatusAfterInsertHooks = []MTBCustomerOrderStatusHook{}

	AddMTBCustomerOrderStatusHook(boil.AfterSelectHook, mtbCustomerOrderStatusAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	mtbCustomerOrderStatusAfterSelectHooks = []MTBCustomerOrderStatusHook{}

	AddMTBCustomerOrderStatusHook(boil.BeforeUpdateHook, mtbCustomerOrderStatusBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	mtbCustomerOrderStatusBeforeUpdateHooks = []MTBCustomerOrderStatusHook{}

	AddMTBCustomerOrderStatusHook(boil.AfterUpdateHook, mtbCustomerOrderStatusAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	mtbCustomerOrderStatusAfterUpdateHooks = []MTBCustomerOrderStatusHook{}

	AddMTBCustomerOrderStatusHook(boil.BeforeDeleteHook, mtbCustomerOrderStatusBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	mtbCustomerOrderStatusBeforeDeleteHooks = []MTBCustomerOrderStatusHook{}

	AddMTBCustomerOrderStatusHook(boil.AfterDeleteHook, mtbCustomerOrderStatusAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	mtbCustomerOrderStatusAfterDeleteHooks = []MTBCustomerOrderStatusHook{}

	AddMTBCustomerOrderStatusHook(boil.BeforeUpsertHook, mtbCustomerOrderStatusBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	mtbCustomerOrderStatusBeforeUpsertHooks = []MTBCustomerOrderStatusHook{}

	AddMTBCustomerOrderStatusHook(boil.AfterUpsertHook, mtbCustomerOrderStatusAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	mtbCustomerOrderStatusAfterUpsertHooks = []MTBCustomerOrderStatusHook{}
}

func testMTBCustomerOrderStatusesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBCustomerOrderStatus{}
	if err = randomize.Struct(seed, o, mtbCustomerOrderStatusDBTypes, true, mtbCustomerOrderStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCustomerOrderStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MTBCustomerOrderStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMTBCustomerOrderStatusesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBCustomerOrderStatus{}
	if err = randomize.Struct(seed, o, mtbCustomerOrderStatusDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MTBCustomerOrderStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(mtbCustomerOrderStatusColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MTBCustomerOrderStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMTBCustomerOrderStatusesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBCustomerOrderStatus{}
	if err = randomize.Struct(seed, o, mtbCustomerOrderStatusDBTypes, true, mtbCustomerOrderStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCustomerOrderStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMTBCustomerOrderStatusesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBCustomerOrderStatus{}
	if err = randomize.Struct(seed, o, mtbCustomerOrderStatusDBTypes, true, mtbCustomerOrderStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCustomerOrderStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MTBCustomerOrderStatusSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMTBCustomerOrderStatusesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBCustomerOrderStatus{}
	if err = randomize.Struct(seed, o, mtbCustomerOrderStatusDBTypes, true, mtbCustomerOrderStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCustomerOrderStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MTBCustomerOrderStatuses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	mtbCustomerOrderStatusDBTypes = map[string]string{`ID`: `smallint`, `Name`: `varchar`, `SortNo`: `smallint`, `DiscriminatorType`: `varchar`}
	_                             = bytes.MinRead
)

func testMTBCustomerOrderStatusesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(mtbCustomerOrderStatusPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(mtbCustomerOrderStatusColumns) == len(mtbCustomerOrderStatusPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MTBCustomerOrderStatus{}
	if err = randomize.Struct(seed, o, mtbCustomerOrderStatusDBTypes, true, mtbCustomerOrderStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCustomerOrderStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MTBCustomerOrderStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mtbCustomerOrderStatusDBTypes, true, mtbCustomerOrderStatusPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MTBCustomerOrderStatus struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMTBCustomerOrderStatusesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(mtbCustomerOrderStatusColumns) == len(mtbCustomerOrderStatusPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MTBCustomerOrderStatus{}
	if err = randomize.Struct(seed, o, mtbCustomerOrderStatusDBTypes, true, mtbCustomerOrderStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCustomerOrderStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MTBCustomerOrderStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mtbCustomerOrderStatusDBTypes, true, mtbCustomerOrderStatusPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MTBCustomerOrderStatus struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(mtbCustomerOrderStatusColumns, mtbCustomerOrderStatusPrimaryKeyColumns) {
		fields = mtbCustomerOrderStatusColumns
	} else {
		fields = strmangle.SetComplement(
			mtbCustomerOrderStatusColumns,
			mtbCustomerOrderStatusPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MTBCustomerOrderStatusSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMTBCustomerOrderStatusesUpsert(t *testing.T) {
	t.Parallel()

	if len(mtbCustomerOrderStatusColumns) == len(mtbCustomerOrderStatusPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLMTBCustomerOrderStatusUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MTBCustomerOrderStatus{}
	if err = randomize.Struct(seed, &o, mtbCustomerOrderStatusDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MTBCustomerOrderStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MTBCustomerOrderStatus: %s", err)
	}

	count, err := MTBCustomerOrderStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, mtbCustomerOrderStatusDBTypes, false, mtbCustomerOrderStatusPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MTBCustomerOrderStatus struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MTBCustomerOrderStatus: %s", err)
	}

	count, err = MTBCustomerOrderStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
