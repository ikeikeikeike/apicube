// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDTBPaymentOptions(t *testing.T) {
	t.Parallel()

	query := DTBPaymentOptions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDTBPaymentOptionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPaymentOption{}
	if err = randomize.Struct(seed, o, dtbPaymentOptionDBTypes, true, dtbPaymentOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPaymentOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBPaymentOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBPaymentOptionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPaymentOption{}
	if err = randomize.Struct(seed, o, dtbPaymentOptionDBTypes, true, dtbPaymentOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPaymentOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DTBPaymentOptions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBPaymentOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBPaymentOptionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPaymentOption{}
	if err = randomize.Struct(seed, o, dtbPaymentOptionDBTypes, true, dtbPaymentOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPaymentOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBPaymentOptionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBPaymentOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBPaymentOptionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPaymentOption{}
	if err = randomize.Struct(seed, o, dtbPaymentOptionDBTypes, true, dtbPaymentOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPaymentOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DTBPaymentOptionExists(ctx, tx, o.DeliveryID, o.PaymentID)
	if err != nil {
		t.Errorf("Unable to check if DTBPaymentOption exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DTBPaymentOptionExists to return true, but got false.")
	}
}

func testDTBPaymentOptionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPaymentOption{}
	if err = randomize.Struct(seed, o, dtbPaymentOptionDBTypes, true, dtbPaymentOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPaymentOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dtbPaymentOptionFound, err := FindDTBPaymentOption(ctx, tx, o.DeliveryID, o.PaymentID)
	if err != nil {
		t.Error(err)
	}

	if dtbPaymentOptionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDTBPaymentOptionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPaymentOption{}
	if err = randomize.Struct(seed, o, dtbPaymentOptionDBTypes, true, dtbPaymentOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPaymentOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DTBPaymentOptions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDTBPaymentOptionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPaymentOption{}
	if err = randomize.Struct(seed, o, dtbPaymentOptionDBTypes, true, dtbPaymentOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPaymentOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DTBPaymentOptions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDTBPaymentOptionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtbPaymentOptionOne := &DTBPaymentOption{}
	dtbPaymentOptionTwo := &DTBPaymentOption{}
	if err = randomize.Struct(seed, dtbPaymentOptionOne, dtbPaymentOptionDBTypes, false, dtbPaymentOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPaymentOption struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbPaymentOptionTwo, dtbPaymentOptionDBTypes, false, dtbPaymentOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPaymentOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbPaymentOptionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbPaymentOptionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBPaymentOptions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDTBPaymentOptionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dtbPaymentOptionOne := &DTBPaymentOption{}
	dtbPaymentOptionTwo := &DTBPaymentOption{}
	if err = randomize.Struct(seed, dtbPaymentOptionOne, dtbPaymentOptionDBTypes, false, dtbPaymentOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPaymentOption struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbPaymentOptionTwo, dtbPaymentOptionDBTypes, false, dtbPaymentOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPaymentOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbPaymentOptionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbPaymentOptionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBPaymentOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dtbPaymentOptionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBPaymentOption) error {
	*o = DTBPaymentOption{}
	return nil
}

func dtbPaymentOptionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBPaymentOption) error {
	*o = DTBPaymentOption{}
	return nil
}

func dtbPaymentOptionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DTBPaymentOption) error {
	*o = DTBPaymentOption{}
	return nil
}

func dtbPaymentOptionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBPaymentOption) error {
	*o = DTBPaymentOption{}
	return nil
}

func dtbPaymentOptionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBPaymentOption) error {
	*o = DTBPaymentOption{}
	return nil
}

func dtbPaymentOptionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBPaymentOption) error {
	*o = DTBPaymentOption{}
	return nil
}

func dtbPaymentOptionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBPaymentOption) error {
	*o = DTBPaymentOption{}
	return nil
}

func dtbPaymentOptionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBPaymentOption) error {
	*o = DTBPaymentOption{}
	return nil
}

func dtbPaymentOptionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBPaymentOption) error {
	*o = DTBPaymentOption{}
	return nil
}

func testDTBPaymentOptionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DTBPaymentOption{}
	o := &DTBPaymentOption{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dtbPaymentOptionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBPaymentOption object: %s", err)
	}

	AddDTBPaymentOptionHook(boil.BeforeInsertHook, dtbPaymentOptionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dtbPaymentOptionBeforeInsertHooks = []DTBPaymentOptionHook{}

	AddDTBPaymentOptionHook(boil.AfterInsertHook, dtbPaymentOptionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dtbPaymentOptionAfterInsertHooks = []DTBPaymentOptionHook{}

	AddDTBPaymentOptionHook(boil.AfterSelectHook, dtbPaymentOptionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dtbPaymentOptionAfterSelectHooks = []DTBPaymentOptionHook{}

	AddDTBPaymentOptionHook(boil.BeforeUpdateHook, dtbPaymentOptionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dtbPaymentOptionBeforeUpdateHooks = []DTBPaymentOptionHook{}

	AddDTBPaymentOptionHook(boil.AfterUpdateHook, dtbPaymentOptionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dtbPaymentOptionAfterUpdateHooks = []DTBPaymentOptionHook{}

	AddDTBPaymentOptionHook(boil.BeforeDeleteHook, dtbPaymentOptionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dtbPaymentOptionBeforeDeleteHooks = []DTBPaymentOptionHook{}

	AddDTBPaymentOptionHook(boil.AfterDeleteHook, dtbPaymentOptionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dtbPaymentOptionAfterDeleteHooks = []DTBPaymentOptionHook{}

	AddDTBPaymentOptionHook(boil.BeforeUpsertHook, dtbPaymentOptionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dtbPaymentOptionBeforeUpsertHooks = []DTBPaymentOptionHook{}

	AddDTBPaymentOptionHook(boil.AfterUpsertHook, dtbPaymentOptionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dtbPaymentOptionAfterUpsertHooks = []DTBPaymentOptionHook{}
}

func testDTBPaymentOptionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPaymentOption{}
	if err = randomize.Struct(seed, o, dtbPaymentOptionDBTypes, true, dtbPaymentOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPaymentOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBPaymentOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBPaymentOptionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPaymentOption{}
	if err = randomize.Struct(seed, o, dtbPaymentOptionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DTBPaymentOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dtbPaymentOptionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DTBPaymentOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBPaymentOptionToOneDTBDeliveryUsingDelivery(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBPaymentOption
	var foreign DTBDelivery

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbPaymentOptionDBTypes, false, dtbPaymentOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPaymentOption struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dtbDeliveryDBTypes, false, dtbDeliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDelivery struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DeliveryID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Delivery().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBPaymentOptionSlice{&local}
	if err = local.L.LoadDelivery(ctx, tx, false, (*[]*DTBPaymentOption)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Delivery == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Delivery = nil
	if err = local.L.LoadDelivery(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Delivery == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBPaymentOptionToOneDTBPaymentUsingPayment(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBPaymentOption
	var foreign DTBPayment

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbPaymentOptionDBTypes, false, dtbPaymentOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPaymentOption struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dtbPaymentDBTypes, false, dtbPaymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPayment struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PaymentID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Payment().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBPaymentOptionSlice{&local}
	if err = local.L.LoadPayment(ctx, tx, false, (*[]*DTBPaymentOption)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Payment == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Payment = nil
	if err = local.L.LoadPayment(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Payment == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBPaymentOptionToOneSetOpDTBDeliveryUsingDelivery(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBPaymentOption
	var b, c DTBDelivery

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbPaymentOptionDBTypes, false, strmangle.SetComplement(dtbPaymentOptionPrimaryKeyColumns, dtbPaymentOptionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbDeliveryDBTypes, false, strmangle.SetComplement(dtbDeliveryPrimaryKeyColumns, dtbDeliveryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbDeliveryDBTypes, false, strmangle.SetComplement(dtbDeliveryPrimaryKeyColumns, dtbDeliveryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DTBDelivery{&b, &c} {
		err = a.SetDelivery(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Delivery != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DeliveryDTBPaymentOptions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DeliveryID != x.ID {
			t.Error("foreign key was wrong value", a.DeliveryID)
		}

		if exists, err := DTBPaymentOptionExists(ctx, tx, a.DeliveryID, a.PaymentID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testDTBPaymentOptionToOneSetOpDTBPaymentUsingPayment(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBPaymentOption
	var b, c DTBPayment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbPaymentOptionDBTypes, false, strmangle.SetComplement(dtbPaymentOptionPrimaryKeyColumns, dtbPaymentOptionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbPaymentDBTypes, false, strmangle.SetComplement(dtbPaymentPrimaryKeyColumns, dtbPaymentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbPaymentDBTypes, false, strmangle.SetComplement(dtbPaymentPrimaryKeyColumns, dtbPaymentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DTBPayment{&b, &c} {
		err = a.SetPayment(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Payment != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PaymentDTBPaymentOptions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PaymentID != x.ID {
			t.Error("foreign key was wrong value", a.PaymentID)
		}

		if exists, err := DTBPaymentOptionExists(ctx, tx, a.DeliveryID, a.PaymentID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testDTBPaymentOptionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPaymentOption{}
	if err = randomize.Struct(seed, o, dtbPaymentOptionDBTypes, true, dtbPaymentOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPaymentOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBPaymentOptionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPaymentOption{}
	if err = randomize.Struct(seed, o, dtbPaymentOptionDBTypes, true, dtbPaymentOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPaymentOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBPaymentOptionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBPaymentOptionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPaymentOption{}
	if err = randomize.Struct(seed, o, dtbPaymentOptionDBTypes, true, dtbPaymentOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPaymentOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBPaymentOptions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dtbPaymentOptionDBTypes = map[string]string{`DeliveryID`: `int`, `PaymentID`: `int`, `DiscriminatorType`: `varchar`}
	_                       = bytes.MinRead
)

func testDTBPaymentOptionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dtbPaymentOptionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dtbPaymentOptionColumns) == len(dtbPaymentOptionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBPaymentOption{}
	if err = randomize.Struct(seed, o, dtbPaymentOptionDBTypes, true, dtbPaymentOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPaymentOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBPaymentOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbPaymentOptionDBTypes, true, dtbPaymentOptionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBPaymentOption struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDTBPaymentOptionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dtbPaymentOptionColumns) == len(dtbPaymentOptionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBPaymentOption{}
	if err = randomize.Struct(seed, o, dtbPaymentOptionDBTypes, true, dtbPaymentOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPaymentOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBPaymentOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbPaymentOptionDBTypes, true, dtbPaymentOptionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBPaymentOption struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dtbPaymentOptionColumns, dtbPaymentOptionPrimaryKeyColumns) {
		fields = dtbPaymentOptionColumns
	} else {
		fields = strmangle.SetComplement(
			dtbPaymentOptionColumns,
			dtbPaymentOptionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DTBPaymentOptionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDTBPaymentOptionsUpsert(t *testing.T) {
	t.Parallel()

	if len(dtbPaymentOptionColumns) == len(dtbPaymentOptionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDTBPaymentOptionUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DTBPaymentOption{}
	if err = randomize.Struct(seed, &o, dtbPaymentOptionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBPaymentOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBPaymentOption: %s", err)
	}

	count, err := DTBPaymentOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dtbPaymentOptionDBTypes, false, dtbPaymentOptionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBPaymentOption struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBPaymentOption: %s", err)
	}

	count, err = DTBPaymentOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
