// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDTBProductStocks(t *testing.T) {
	t.Parallel()

	query := DTBProductStocks()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDTBProductStocksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductStock{}
	if err = randomize.Struct(seed, o, dtbProductStockDBTypes, true, dtbProductStockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductStock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBProductStocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBProductStocksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductStock{}
	if err = randomize.Struct(seed, o, dtbProductStockDBTypes, true, dtbProductStockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductStock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DTBProductStocks().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBProductStocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBProductStocksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductStock{}
	if err = randomize.Struct(seed, o, dtbProductStockDBTypes, true, dtbProductStockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductStock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBProductStockSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBProductStocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBProductStocksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductStock{}
	if err = randomize.Struct(seed, o, dtbProductStockDBTypes, true, dtbProductStockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductStock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DTBProductStockExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DTBProductStock exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DTBProductStockExists to return true, but got false.")
	}
}

func testDTBProductStocksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductStock{}
	if err = randomize.Struct(seed, o, dtbProductStockDBTypes, true, dtbProductStockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductStock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dtbProductStockFound, err := FindDTBProductStock(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if dtbProductStockFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDTBProductStocksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductStock{}
	if err = randomize.Struct(seed, o, dtbProductStockDBTypes, true, dtbProductStockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductStock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DTBProductStocks().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDTBProductStocksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductStock{}
	if err = randomize.Struct(seed, o, dtbProductStockDBTypes, true, dtbProductStockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductStock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DTBProductStocks().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDTBProductStocksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtbProductStockOne := &DTBProductStock{}
	dtbProductStockTwo := &DTBProductStock{}
	if err = randomize.Struct(seed, dtbProductStockOne, dtbProductStockDBTypes, false, dtbProductStockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductStock struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbProductStockTwo, dtbProductStockDBTypes, false, dtbProductStockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductStock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbProductStockOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbProductStockTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBProductStocks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDTBProductStocksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dtbProductStockOne := &DTBProductStock{}
	dtbProductStockTwo := &DTBProductStock{}
	if err = randomize.Struct(seed, dtbProductStockOne, dtbProductStockDBTypes, false, dtbProductStockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductStock struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbProductStockTwo, dtbProductStockDBTypes, false, dtbProductStockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductStock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbProductStockOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbProductStockTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBProductStocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dtbProductStockBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBProductStock) error {
	*o = DTBProductStock{}
	return nil
}

func dtbProductStockAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBProductStock) error {
	*o = DTBProductStock{}
	return nil
}

func dtbProductStockAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DTBProductStock) error {
	*o = DTBProductStock{}
	return nil
}

func dtbProductStockBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBProductStock) error {
	*o = DTBProductStock{}
	return nil
}

func dtbProductStockAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBProductStock) error {
	*o = DTBProductStock{}
	return nil
}

func dtbProductStockBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBProductStock) error {
	*o = DTBProductStock{}
	return nil
}

func dtbProductStockAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBProductStock) error {
	*o = DTBProductStock{}
	return nil
}

func dtbProductStockBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBProductStock) error {
	*o = DTBProductStock{}
	return nil
}

func dtbProductStockAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBProductStock) error {
	*o = DTBProductStock{}
	return nil
}

func testDTBProductStocksHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DTBProductStock{}
	o := &DTBProductStock{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dtbProductStockDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBProductStock object: %s", err)
	}

	AddDTBProductStockHook(boil.BeforeInsertHook, dtbProductStockBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dtbProductStockBeforeInsertHooks = []DTBProductStockHook{}

	AddDTBProductStockHook(boil.AfterInsertHook, dtbProductStockAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dtbProductStockAfterInsertHooks = []DTBProductStockHook{}

	AddDTBProductStockHook(boil.AfterSelectHook, dtbProductStockAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dtbProductStockAfterSelectHooks = []DTBProductStockHook{}

	AddDTBProductStockHook(boil.BeforeUpdateHook, dtbProductStockBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dtbProductStockBeforeUpdateHooks = []DTBProductStockHook{}

	AddDTBProductStockHook(boil.AfterUpdateHook, dtbProductStockAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dtbProductStockAfterUpdateHooks = []DTBProductStockHook{}

	AddDTBProductStockHook(boil.BeforeDeleteHook, dtbProductStockBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dtbProductStockBeforeDeleteHooks = []DTBProductStockHook{}

	AddDTBProductStockHook(boil.AfterDeleteHook, dtbProductStockAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dtbProductStockAfterDeleteHooks = []DTBProductStockHook{}

	AddDTBProductStockHook(boil.BeforeUpsertHook, dtbProductStockBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dtbProductStockBeforeUpsertHooks = []DTBProductStockHook{}

	AddDTBProductStockHook(boil.AfterUpsertHook, dtbProductStockAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dtbProductStockAfterUpsertHooks = []DTBProductStockHook{}
}

func testDTBProductStocksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductStock{}
	if err = randomize.Struct(seed, o, dtbProductStockDBTypes, true, dtbProductStockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductStock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBProductStocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBProductStocksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductStock{}
	if err = randomize.Struct(seed, o, dtbProductStockDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DTBProductStock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dtbProductStockColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DTBProductStocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBProductStockToOneDTBProductClassUsingProductClass(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBProductStock
	var foreign DTBProductClass

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbProductStockDBTypes, true, dtbProductStockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductStock struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dtbProductClassDBTypes, false, dtbProductClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductClass struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ProductClassID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ProductClass().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBProductStockSlice{&local}
	if err = local.L.LoadProductClass(ctx, tx, false, (*[]*DTBProductStock)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ProductClass == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ProductClass = nil
	if err = local.L.LoadProductClass(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ProductClass == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBProductStockToOneDTBMemberUsingCreator(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBProductStock
	var foreign DTBMember

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbProductStockDBTypes, true, dtbProductStockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductStock struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dtbMemberDBTypes, false, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CreatorID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Creator().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBProductStockSlice{&local}
	if err = local.L.LoadCreator(ctx, tx, false, (*[]*DTBProductStock)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Creator == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Creator = nil
	if err = local.L.LoadCreator(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Creator == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBProductStockToOneSetOpDTBProductClassUsingProductClass(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBProductStock
	var b, c DTBProductClass

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbProductStockDBTypes, false, strmangle.SetComplement(dtbProductStockPrimaryKeyColumns, dtbProductStockColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbProductClassDBTypes, false, strmangle.SetComplement(dtbProductClassPrimaryKeyColumns, dtbProductClassColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbProductClassDBTypes, false, strmangle.SetComplement(dtbProductClassPrimaryKeyColumns, dtbProductClassColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DTBProductClass{&b, &c} {
		err = a.SetProductClass(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ProductClass != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProductClassDTBProductStocks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ProductClassID, x.ID) {
			t.Error("foreign key was wrong value", a.ProductClassID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProductClassID))
		reflect.Indirect(reflect.ValueOf(&a.ProductClassID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ProductClassID, x.ID) {
			t.Error("foreign key was wrong value", a.ProductClassID, x.ID)
		}
	}
}

func testDTBProductStockToOneRemoveOpDTBProductClassUsingProductClass(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBProductStock
	var b DTBProductClass

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbProductStockDBTypes, false, strmangle.SetComplement(dtbProductStockPrimaryKeyColumns, dtbProductStockColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbProductClassDBTypes, false, strmangle.SetComplement(dtbProductClassPrimaryKeyColumns, dtbProductClassColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetProductClass(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveProductClass(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ProductClass().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ProductClass != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ProductClassID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ProductClassDTBProductStocks) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBProductStockToOneSetOpDTBMemberUsingCreator(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBProductStock
	var b, c DTBMember

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbProductStockDBTypes, false, strmangle.SetComplement(dtbProductStockPrimaryKeyColumns, dtbProductStockColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DTBMember{&b, &c} {
		err = a.SetCreator(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Creator != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CreatorDTBProductStocks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CreatorID, x.ID) {
			t.Error("foreign key was wrong value", a.CreatorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CreatorID))
		reflect.Indirect(reflect.ValueOf(&a.CreatorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CreatorID, x.ID) {
			t.Error("foreign key was wrong value", a.CreatorID, x.ID)
		}
	}
}

func testDTBProductStockToOneRemoveOpDTBMemberUsingCreator(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBProductStock
	var b DTBMember

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbProductStockDBTypes, false, strmangle.SetComplement(dtbProductStockPrimaryKeyColumns, dtbProductStockColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCreator(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCreator(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Creator().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Creator != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CreatorID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CreatorDTBProductStocks) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBProductStocksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductStock{}
	if err = randomize.Struct(seed, o, dtbProductStockDBTypes, true, dtbProductStockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductStock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBProductStocksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductStock{}
	if err = randomize.Struct(seed, o, dtbProductStockDBTypes, true, dtbProductStockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductStock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBProductStockSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBProductStocksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductStock{}
	if err = randomize.Struct(seed, o, dtbProductStockDBTypes, true, dtbProductStockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductStock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBProductStocks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dtbProductStockDBTypes = map[string]string{`ID`: `int`, `ProductClassID`: `int`, `CreatorID`: `int`, `Stock`: `decimal`, `CreateDate`: `datetime`, `UpdateDate`: `datetime`, `DiscriminatorType`: `varchar`}
	_                      = bytes.MinRead
)

func testDTBProductStocksUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dtbProductStockPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dtbProductStockColumns) == len(dtbProductStockPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductStock{}
	if err = randomize.Struct(seed, o, dtbProductStockDBTypes, true, dtbProductStockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductStock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBProductStocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbProductStockDBTypes, true, dtbProductStockPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBProductStock struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDTBProductStocksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dtbProductStockColumns) == len(dtbProductStockPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBProductStock{}
	if err = randomize.Struct(seed, o, dtbProductStockDBTypes, true, dtbProductStockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductStock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBProductStocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbProductStockDBTypes, true, dtbProductStockPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBProductStock struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dtbProductStockColumns, dtbProductStockPrimaryKeyColumns) {
		fields = dtbProductStockColumns
	} else {
		fields = strmangle.SetComplement(
			dtbProductStockColumns,
			dtbProductStockPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DTBProductStockSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDTBProductStocksUpsert(t *testing.T) {
	t.Parallel()

	if len(dtbProductStockColumns) == len(dtbProductStockPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDTBProductStockUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DTBProductStock{}
	if err = randomize.Struct(seed, &o, dtbProductStockDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBProductStock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBProductStock: %s", err)
	}

	count, err := DTBProductStocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dtbProductStockDBTypes, false, dtbProductStockPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBProductStock struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBProductStock: %s", err)
	}

	count, err = DTBProductStocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
