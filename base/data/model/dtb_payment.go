// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// DTBPayment is an object representing the database table.
type DTBPayment struct {
	ID                uint              `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatorID         null.Uint         `boil:"creator_id" json:"creator_id,omitempty" toml:"creator_id" yaml:"creator_id,omitempty"`
	PaymentMethod     null.String       `boil:"payment_method" json:"payment_method,omitempty" toml:"payment_method" yaml:"payment_method,omitempty"`
	Charge            types.NullDecimal `boil:"charge" json:"charge,omitempty" toml:"charge" yaml:"charge,omitempty"`
	RuleMax           types.NullDecimal `boil:"rule_max" json:"rule_max,omitempty" toml:"rule_max" yaml:"rule_max,omitempty"`
	SortNo            null.Uint16       `boil:"sort_no" json:"sort_no,omitempty" toml:"sort_no" yaml:"sort_no,omitempty"`
	Fixed             bool              `boil:"fixed" json:"fixed" toml:"fixed" yaml:"fixed"`
	PaymentImage      null.String       `boil:"payment_image" json:"payment_image,omitempty" toml:"payment_image" yaml:"payment_image,omitempty"`
	RuleMin           types.NullDecimal `boil:"rule_min" json:"rule_min,omitempty" toml:"rule_min" yaml:"rule_min,omitempty"`
	MethodClass       null.String       `boil:"method_class" json:"method_class,omitempty" toml:"method_class" yaml:"method_class,omitempty"`
	Visible           bool              `boil:"visible" json:"visible" toml:"visible" yaml:"visible"`
	CreateDate        time.Time         `boil:"create_date" json:"create_date" toml:"create_date" yaml:"create_date"`
	UpdateDate        time.Time         `boil:"update_date" json:"update_date" toml:"update_date" yaml:"update_date"`
	DiscriminatorType string            `boil:"discriminator_type" json:"discriminator_type" toml:"discriminator_type" yaml:"discriminator_type"`

	R *dtbPaymentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dtbPaymentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DTBPaymentColumns = struct {
	ID                string
	CreatorID         string
	PaymentMethod     string
	Charge            string
	RuleMax           string
	SortNo            string
	Fixed             string
	PaymentImage      string
	RuleMin           string
	MethodClass       string
	Visible           string
	CreateDate        string
	UpdateDate        string
	DiscriminatorType string
}{
	ID:                "id",
	CreatorID:         "creator_id",
	PaymentMethod:     "payment_method",
	Charge:            "charge",
	RuleMax:           "rule_max",
	SortNo:            "sort_no",
	Fixed:             "fixed",
	PaymentImage:      "payment_image",
	RuleMin:           "rule_min",
	MethodClass:       "method_class",
	Visible:           "visible",
	CreateDate:        "create_date",
	UpdateDate:        "update_date",
	DiscriminatorType: "discriminator_type",
}

// Generated where

var DTBPaymentWhere = struct {
	ID                whereHelperuint
	CreatorID         whereHelpernull_Uint
	PaymentMethod     whereHelpernull_String
	Charge            whereHelpertypes_NullDecimal
	RuleMax           whereHelpertypes_NullDecimal
	SortNo            whereHelpernull_Uint16
	Fixed             whereHelperbool
	PaymentImage      whereHelpernull_String
	RuleMin           whereHelpertypes_NullDecimal
	MethodClass       whereHelpernull_String
	Visible           whereHelperbool
	CreateDate        whereHelpertime_Time
	UpdateDate        whereHelpertime_Time
	DiscriminatorType whereHelperstring
}{
	ID:                whereHelperuint{field: `id`},
	CreatorID:         whereHelpernull_Uint{field: `creator_id`},
	PaymentMethod:     whereHelpernull_String{field: `payment_method`},
	Charge:            whereHelpertypes_NullDecimal{field: `charge`},
	RuleMax:           whereHelpertypes_NullDecimal{field: `rule_max`},
	SortNo:            whereHelpernull_Uint16{field: `sort_no`},
	Fixed:             whereHelperbool{field: `fixed`},
	PaymentImage:      whereHelpernull_String{field: `payment_image`},
	RuleMin:           whereHelpertypes_NullDecimal{field: `rule_min`},
	MethodClass:       whereHelpernull_String{field: `method_class`},
	Visible:           whereHelperbool{field: `visible`},
	CreateDate:        whereHelpertime_Time{field: `create_date`},
	UpdateDate:        whereHelpertime_Time{field: `update_date`},
	DiscriminatorType: whereHelperstring{field: `discriminator_type`},
}

// DTBPaymentRels is where relationship names are stored.
var DTBPaymentRels = struct {
	PaymentDTBOrders         string
	PaymentDTBPaymentOptions string
}{
	PaymentDTBOrders:         "PaymentDTBOrders",
	PaymentDTBPaymentOptions: "PaymentDTBPaymentOptions",
}

// dtbPaymentR is where relationships are stored.
type dtbPaymentR struct {
	PaymentDTBOrders         DTBOrderSlice
	PaymentDTBPaymentOptions DTBPaymentOptionSlice
}

// NewStruct creates a new relationship struct
func (*dtbPaymentR) NewStruct() *dtbPaymentR {
	return &dtbPaymentR{}
}

// dtbPaymentL is where Load methods for each relationship are stored.
type dtbPaymentL struct{}

var (
	dtbPaymentColumns               = []string{"id", "creator_id", "payment_method", "charge", "rule_max", "sort_no", "fixed", "payment_image", "rule_min", "method_class", "visible", "create_date", "update_date", "discriminator_type"}
	dtbPaymentColumnsWithoutDefault = []string{"creator_id", "payment_method", "rule_max", "sort_no", "payment_image", "rule_min", "method_class", "create_date", "update_date", "discriminator_type"}
	dtbPaymentColumnsWithDefault    = []string{"id", "charge", "fixed", "visible"}
	dtbPaymentPrimaryKeyColumns     = []string{"id"}
)

type (
	// DTBPaymentSlice is an alias for a slice of pointers to DTBPayment.
	// This should generally be used opposed to []DTBPayment.
	DTBPaymentSlice []*DTBPayment
	// DTBPaymentHook is the signature for custom DTBPayment hook methods
	DTBPaymentHook func(context.Context, boil.ContextExecutor, *DTBPayment) error

	dtbPaymentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dtbPaymentType                 = reflect.TypeOf(&DTBPayment{})
	dtbPaymentMapping              = queries.MakeStructMapping(dtbPaymentType)
	dtbPaymentPrimaryKeyMapping, _ = queries.BindMapping(dtbPaymentType, dtbPaymentMapping, dtbPaymentPrimaryKeyColumns)
	dtbPaymentInsertCacheMut       sync.RWMutex
	dtbPaymentInsertCache          = make(map[string]insertCache)
	dtbPaymentUpdateCacheMut       sync.RWMutex
	dtbPaymentUpdateCache          = make(map[string]updateCache)
	dtbPaymentUpsertCacheMut       sync.RWMutex
	dtbPaymentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dtbPaymentBeforeInsertHooks []DTBPaymentHook
var dtbPaymentBeforeUpdateHooks []DTBPaymentHook
var dtbPaymentBeforeDeleteHooks []DTBPaymentHook
var dtbPaymentBeforeUpsertHooks []DTBPaymentHook

var dtbPaymentAfterInsertHooks []DTBPaymentHook
var dtbPaymentAfterSelectHooks []DTBPaymentHook
var dtbPaymentAfterUpdateHooks []DTBPaymentHook
var dtbPaymentAfterDeleteHooks []DTBPaymentHook
var dtbPaymentAfterUpsertHooks []DTBPaymentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DTBPayment) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbPaymentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DTBPayment) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbPaymentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DTBPayment) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbPaymentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DTBPayment) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbPaymentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DTBPayment) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbPaymentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DTBPayment) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbPaymentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DTBPayment) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbPaymentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DTBPayment) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbPaymentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DTBPayment) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbPaymentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDTBPaymentHook registers your hook function for all future operations.
func AddDTBPaymentHook(hookPoint boil.HookPoint, dtbPaymentHook DTBPaymentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		dtbPaymentBeforeInsertHooks = append(dtbPaymentBeforeInsertHooks, dtbPaymentHook)
	case boil.BeforeUpdateHook:
		dtbPaymentBeforeUpdateHooks = append(dtbPaymentBeforeUpdateHooks, dtbPaymentHook)
	case boil.BeforeDeleteHook:
		dtbPaymentBeforeDeleteHooks = append(dtbPaymentBeforeDeleteHooks, dtbPaymentHook)
	case boil.BeforeUpsertHook:
		dtbPaymentBeforeUpsertHooks = append(dtbPaymentBeforeUpsertHooks, dtbPaymentHook)
	case boil.AfterInsertHook:
		dtbPaymentAfterInsertHooks = append(dtbPaymentAfterInsertHooks, dtbPaymentHook)
	case boil.AfterSelectHook:
		dtbPaymentAfterSelectHooks = append(dtbPaymentAfterSelectHooks, dtbPaymentHook)
	case boil.AfterUpdateHook:
		dtbPaymentAfterUpdateHooks = append(dtbPaymentAfterUpdateHooks, dtbPaymentHook)
	case boil.AfterDeleteHook:
		dtbPaymentAfterDeleteHooks = append(dtbPaymentAfterDeleteHooks, dtbPaymentHook)
	case boil.AfterUpsertHook:
		dtbPaymentAfterUpsertHooks = append(dtbPaymentAfterUpsertHooks, dtbPaymentHook)
	}
}

// One returns a single dtbPayment record from the query.
func (q dtbPaymentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DTBPayment, error) {
	o := &DTBPayment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for dtb_payment")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DTBPayment records from the query.
func (q dtbPaymentQuery) All(ctx context.Context, exec boil.ContextExecutor) (DTBPaymentSlice, error) {
	var o []*DTBPayment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to DTBPayment slice")
	}

	if len(dtbPaymentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DTBPayment records in the query.
func (q dtbPaymentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count dtb_payment rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dtbPaymentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if dtb_payment exists")
	}

	return count > 0, nil
}

// PaymentDTBOrders retrieves all the dtb_order's DTBOrders with an executor via payment_id column.
func (o *DTBPayment) PaymentDTBOrders(mods ...qm.QueryMod) dtbOrderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`dtb_order`.`payment_id`=?", o.ID),
	)

	query := DTBOrders(queryMods...)
	queries.SetFrom(query.Query, "`dtb_order`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`dtb_order`.*"})
	}

	return query
}

// PaymentDTBPaymentOptions retrieves all the dtb_payment_option's DTBPaymentOptions with an executor via payment_id column.
func (o *DTBPayment) PaymentDTBPaymentOptions(mods ...qm.QueryMod) dtbPaymentOptionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`dtb_payment_option`.`payment_id`=?", o.ID),
	)

	query := DTBPaymentOptions(queryMods...)
	queries.SetFrom(query.Query, "`dtb_payment_option`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`dtb_payment_option`.*"})
	}

	return query
}

// LoadPaymentDTBOrders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dtbPaymentL) LoadPaymentDTBOrders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBPayment interface{}, mods queries.Applicator) error {
	var slice []*DTBPayment
	var object *DTBPayment

	if singular {
		object = maybeDTBPayment.(*DTBPayment)
	} else {
		slice = *maybeDTBPayment.(*[]*DTBPayment)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbPaymentR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbPaymentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_order`), qm.WhereIn(`payment_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dtb_order")
	}

	var resultSlice []*DTBOrder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dtb_order")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dtb_order")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_order")
	}

	if len(dtbOrderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PaymentDTBOrders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dtbOrderR{}
			}
			foreign.R.Payment = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.PaymentID) {
				local.R.PaymentDTBOrders = append(local.R.PaymentDTBOrders, foreign)
				if foreign.R == nil {
					foreign.R = &dtbOrderR{}
				}
				foreign.R.Payment = local
				break
			}
		}
	}

	return nil
}

// LoadPaymentDTBPaymentOptions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dtbPaymentL) LoadPaymentDTBPaymentOptions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBPayment interface{}, mods queries.Applicator) error {
	var slice []*DTBPayment
	var object *DTBPayment

	if singular {
		object = maybeDTBPayment.(*DTBPayment)
	} else {
		slice = *maybeDTBPayment.(*[]*DTBPayment)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbPaymentR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbPaymentR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_payment_option`), qm.WhereIn(`payment_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dtb_payment_option")
	}

	var resultSlice []*DTBPaymentOption
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dtb_payment_option")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dtb_payment_option")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_payment_option")
	}

	if len(dtbPaymentOptionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PaymentDTBPaymentOptions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dtbPaymentOptionR{}
			}
			foreign.R.Payment = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PaymentID {
				local.R.PaymentDTBPaymentOptions = append(local.R.PaymentDTBPaymentOptions, foreign)
				if foreign.R == nil {
					foreign.R = &dtbPaymentOptionR{}
				}
				foreign.R.Payment = local
				break
			}
		}
	}

	return nil
}

// AddPaymentDTBOrders adds the given related objects to the existing relationships
// of the dtb_payment, optionally inserting them as new records.
// Appends related to o.R.PaymentDTBOrders.
// Sets related.R.Payment appropriately.
func (o *DTBPayment) AddPaymentDTBOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBOrder) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.PaymentID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `dtb_order` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"payment_id"}),
				strmangle.WhereClause("`", "`", 0, dtbOrderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.PaymentID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &dtbPaymentR{
			PaymentDTBOrders: related,
		}
	} else {
		o.R.PaymentDTBOrders = append(o.R.PaymentDTBOrders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dtbOrderR{
				Payment: o,
			}
		} else {
			rel.R.Payment = o
		}
	}
	return nil
}

// SetPaymentDTBOrders removes all previously related items of the
// dtb_payment replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Payment's PaymentDTBOrders accordingly.
// Replaces o.R.PaymentDTBOrders with related.
// Sets related.R.Payment's PaymentDTBOrders accordingly.
func (o *DTBPayment) SetPaymentDTBOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBOrder) error {
	query := "update `dtb_order` set `payment_id` = null where `payment_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.PaymentDTBOrders {
			queries.SetScanner(&rel.PaymentID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Payment = nil
		}

		o.R.PaymentDTBOrders = nil
	}
	return o.AddPaymentDTBOrders(ctx, exec, insert, related...)
}

// RemovePaymentDTBOrders relationships from objects passed in.
// Removes related items from R.PaymentDTBOrders (uses pointer comparison, removal does not keep order)
// Sets related.R.Payment.
func (o *DTBPayment) RemovePaymentDTBOrders(ctx context.Context, exec boil.ContextExecutor, related ...*DTBOrder) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.PaymentID, nil)
		if rel.R != nil {
			rel.R.Payment = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("payment_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.PaymentDTBOrders {
			if rel != ri {
				continue
			}

			ln := len(o.R.PaymentDTBOrders)
			if ln > 1 && i < ln-1 {
				o.R.PaymentDTBOrders[i] = o.R.PaymentDTBOrders[ln-1]
			}
			o.R.PaymentDTBOrders = o.R.PaymentDTBOrders[:ln-1]
			break
		}
	}

	return nil
}

// AddPaymentDTBPaymentOptions adds the given related objects to the existing relationships
// of the dtb_payment, optionally inserting them as new records.
// Appends related to o.R.PaymentDTBPaymentOptions.
// Sets related.R.Payment appropriately.
func (o *DTBPayment) AddPaymentDTBPaymentOptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBPaymentOption) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PaymentID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `dtb_payment_option` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"payment_id"}),
				strmangle.WhereClause("`", "`", 0, dtbPaymentOptionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.DeliveryID, rel.PaymentID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PaymentID = o.ID
		}
	}

	if o.R == nil {
		o.R = &dtbPaymentR{
			PaymentDTBPaymentOptions: related,
		}
	} else {
		o.R.PaymentDTBPaymentOptions = append(o.R.PaymentDTBPaymentOptions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dtbPaymentOptionR{
				Payment: o,
			}
		} else {
			rel.R.Payment = o
		}
	}
	return nil
}

// DTBPayments retrieves all the records using an executor.
func DTBPayments(mods ...qm.QueryMod) dtbPaymentQuery {
	mods = append(mods, qm.From("`dtb_payment`"))
	return dtbPaymentQuery{NewQuery(mods...)}
}

// FindDTBPayment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDTBPayment(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*DTBPayment, error) {
	dtbPaymentObj := &DTBPayment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `dtb_payment` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, dtbPaymentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from dtb_payment")
	}

	return dtbPaymentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DTBPayment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no dtb_payment provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dtbPaymentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dtbPaymentInsertCacheMut.RLock()
	cache, cached := dtbPaymentInsertCache[key]
	dtbPaymentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dtbPaymentColumns,
			dtbPaymentColumnsWithDefault,
			dtbPaymentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dtbPaymentType, dtbPaymentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dtbPaymentType, dtbPaymentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `dtb_payment` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `dtb_payment` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `dtb_payment` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dtbPaymentPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into dtb_payment")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == dtbPaymentMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for dtb_payment")
	}

CacheNoHooks:
	if !cached {
		dtbPaymentInsertCacheMut.Lock()
		dtbPaymentInsertCache[key] = cache
		dtbPaymentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DTBPayment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DTBPayment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dtbPaymentUpdateCacheMut.RLock()
	cache, cached := dtbPaymentUpdateCache[key]
	dtbPaymentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dtbPaymentColumns,
			dtbPaymentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update dtb_payment, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `dtb_payment` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dtbPaymentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dtbPaymentType, dtbPaymentMapping, append(wl, dtbPaymentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update dtb_payment row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for dtb_payment")
	}

	if !cached {
		dtbPaymentUpdateCacheMut.Lock()
		dtbPaymentUpdateCache[key] = cache
		dtbPaymentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dtbPaymentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for dtb_payment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for dtb_payment")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DTBPaymentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbPaymentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `dtb_payment` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbPaymentPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in dtbPayment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all dtbPayment")
	}
	return rowsAff, nil
}

var mySQLDTBPaymentUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DTBPayment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no dtb_payment provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dtbPaymentColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDTBPaymentUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dtbPaymentUpsertCacheMut.RLock()
	cache, cached := dtbPaymentUpsertCache[key]
	dtbPaymentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dtbPaymentColumns,
			dtbPaymentColumnsWithDefault,
			dtbPaymentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			dtbPaymentColumns,
			dtbPaymentPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("model: unable to upsert dtb_payment, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "dtb_payment", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `dtb_payment` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dtbPaymentType, dtbPaymentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dtbPaymentType, dtbPaymentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for dtb_payment")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == dtbPaymentMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dtbPaymentType, dtbPaymentMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for dtb_payment")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for dtb_payment")
	}

CacheNoHooks:
	if !cached {
		dtbPaymentUpsertCacheMut.Lock()
		dtbPaymentUpsertCache[key] = cache
		dtbPaymentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DTBPayment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DTBPayment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no DTBPayment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dtbPaymentPrimaryKeyMapping)
	sql := "DELETE FROM `dtb_payment` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from dtb_payment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for dtb_payment")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dtbPaymentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no dtbPaymentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from dtb_payment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for dtb_payment")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DTBPaymentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no DTBPayment slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(dtbPaymentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbPaymentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `dtb_payment` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbPaymentPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from dtbPayment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for dtb_payment")
	}

	if len(dtbPaymentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DTBPayment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDTBPayment(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DTBPaymentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DTBPaymentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbPaymentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `dtb_payment`.* FROM `dtb_payment` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbPaymentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in DTBPaymentSlice")
	}

	*o = slice

	return nil
}

// DTBPaymentExists checks if the DTBPayment row exists.
func DTBPaymentExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `dtb_payment` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if dtb_payment exists")
	}

	return exists, nil
}
