// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// DTBDelivery is an object representing the database table.
type DTBDelivery struct {
	ID                uint        `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatorID         null.Uint   `boil:"creator_id" json:"creator_id,omitempty" toml:"creator_id" yaml:"creator_id,omitempty"`
	SaleTypeID        null.Uint16 `boil:"sale_type_id" json:"sale_type_id,omitempty" toml:"sale_type_id" yaml:"sale_type_id,omitempty"`
	Name              null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	ServiceName       null.String `boil:"service_name" json:"service_name,omitempty" toml:"service_name" yaml:"service_name,omitempty"`
	Description       null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	ConfirmURL        null.String `boil:"confirm_url" json:"confirm_url,omitempty" toml:"confirm_url" yaml:"confirm_url,omitempty"`
	SortNo            null.Uint   `boil:"sort_no" json:"sort_no,omitempty" toml:"sort_no" yaml:"sort_no,omitempty"`
	Visible           bool        `boil:"visible" json:"visible" toml:"visible" yaml:"visible"`
	CreateDate        time.Time   `boil:"create_date" json:"create_date" toml:"create_date" yaml:"create_date"`
	UpdateDate        time.Time   `boil:"update_date" json:"update_date" toml:"update_date" yaml:"update_date"`
	DiscriminatorType string      `boil:"discriminator_type" json:"discriminator_type" toml:"discriminator_type" yaml:"discriminator_type"`

	R *dtbDeliveryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dtbDeliveryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DTBDeliveryColumns = struct {
	ID                string
	CreatorID         string
	SaleTypeID        string
	Name              string
	ServiceName       string
	Description       string
	ConfirmURL        string
	SortNo            string
	Visible           string
	CreateDate        string
	UpdateDate        string
	DiscriminatorType string
}{
	ID:                "id",
	CreatorID:         "creator_id",
	SaleTypeID:        "sale_type_id",
	Name:              "name",
	ServiceName:       "service_name",
	Description:       "description",
	ConfirmURL:        "confirm_url",
	SortNo:            "sort_no",
	Visible:           "visible",
	CreateDate:        "create_date",
	UpdateDate:        "update_date",
	DiscriminatorType: "discriminator_type",
}

// Generated where

var DTBDeliveryWhere = struct {
	ID                whereHelperuint
	CreatorID         whereHelpernull_Uint
	SaleTypeID        whereHelpernull_Uint16
	Name              whereHelpernull_String
	ServiceName       whereHelpernull_String
	Description       whereHelpernull_String
	ConfirmURL        whereHelpernull_String
	SortNo            whereHelpernull_Uint
	Visible           whereHelperbool
	CreateDate        whereHelpertime_Time
	UpdateDate        whereHelpertime_Time
	DiscriminatorType whereHelperstring
}{
	ID:                whereHelperuint{field: `id`},
	CreatorID:         whereHelpernull_Uint{field: `creator_id`},
	SaleTypeID:        whereHelpernull_Uint16{field: `sale_type_id`},
	Name:              whereHelpernull_String{field: `name`},
	ServiceName:       whereHelpernull_String{field: `service_name`},
	Description:       whereHelpernull_String{field: `description`},
	ConfirmURL:        whereHelpernull_String{field: `confirm_url`},
	SortNo:            whereHelpernull_Uint{field: `sort_no`},
	Visible:           whereHelperbool{field: `visible`},
	CreateDate:        whereHelpertime_Time{field: `create_date`},
	UpdateDate:        whereHelpertime_Time{field: `update_date`},
	DiscriminatorType: whereHelperstring{field: `discriminator_type`},
}

// DTBDeliveryRels is where relationship names are stored.
var DTBDeliveryRels = struct {
	Creator                   string
	SaleType                  string
	DeliveryDTBDeliveryFees   string
	DeliveryDTBDeliveryTimes  string
	DeliveryDTBPaymentOptions string
	DeliveryDTBShippings      string
}{
	Creator:                   "Creator",
	SaleType:                  "SaleType",
	DeliveryDTBDeliveryFees:   "DeliveryDTBDeliveryFees",
	DeliveryDTBDeliveryTimes:  "DeliveryDTBDeliveryTimes",
	DeliveryDTBPaymentOptions: "DeliveryDTBPaymentOptions",
	DeliveryDTBShippings:      "DeliveryDTBShippings",
}

// dtbDeliveryR is where relationships are stored.
type dtbDeliveryR struct {
	Creator                   *DTBMember
	SaleType                  *MTBSaleType
	DeliveryDTBDeliveryFees   DTBDeliveryFeeSlice
	DeliveryDTBDeliveryTimes  DTBDeliveryTimeSlice
	DeliveryDTBPaymentOptions DTBPaymentOptionSlice
	DeliveryDTBShippings      DTBShippingSlice
}

// NewStruct creates a new relationship struct
func (*dtbDeliveryR) NewStruct() *dtbDeliveryR {
	return &dtbDeliveryR{}
}

// dtbDeliveryL is where Load methods for each relationship are stored.
type dtbDeliveryL struct{}

var (
	dtbDeliveryColumns               = []string{"id", "creator_id", "sale_type_id", "name", "service_name", "description", "confirm_url", "sort_no", "visible", "create_date", "update_date", "discriminator_type"}
	dtbDeliveryColumnsWithoutDefault = []string{"creator_id", "sale_type_id", "name", "service_name", "description", "confirm_url", "sort_no", "create_date", "update_date", "discriminator_type"}
	dtbDeliveryColumnsWithDefault    = []string{"id", "visible"}
	dtbDeliveryPrimaryKeyColumns     = []string{"id"}
)

type (
	// DTBDeliverySlice is an alias for a slice of pointers to DTBDelivery.
	// This should generally be used opposed to []DTBDelivery.
	DTBDeliverySlice []*DTBDelivery
	// DTBDeliveryHook is the signature for custom DTBDelivery hook methods
	DTBDeliveryHook func(context.Context, boil.ContextExecutor, *DTBDelivery) error

	dtbDeliveryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dtbDeliveryType                 = reflect.TypeOf(&DTBDelivery{})
	dtbDeliveryMapping              = queries.MakeStructMapping(dtbDeliveryType)
	dtbDeliveryPrimaryKeyMapping, _ = queries.BindMapping(dtbDeliveryType, dtbDeliveryMapping, dtbDeliveryPrimaryKeyColumns)
	dtbDeliveryInsertCacheMut       sync.RWMutex
	dtbDeliveryInsertCache          = make(map[string]insertCache)
	dtbDeliveryUpdateCacheMut       sync.RWMutex
	dtbDeliveryUpdateCache          = make(map[string]updateCache)
	dtbDeliveryUpsertCacheMut       sync.RWMutex
	dtbDeliveryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dtbDeliveryBeforeInsertHooks []DTBDeliveryHook
var dtbDeliveryBeforeUpdateHooks []DTBDeliveryHook
var dtbDeliveryBeforeDeleteHooks []DTBDeliveryHook
var dtbDeliveryBeforeUpsertHooks []DTBDeliveryHook

var dtbDeliveryAfterInsertHooks []DTBDeliveryHook
var dtbDeliveryAfterSelectHooks []DTBDeliveryHook
var dtbDeliveryAfterUpdateHooks []DTBDeliveryHook
var dtbDeliveryAfterDeleteHooks []DTBDeliveryHook
var dtbDeliveryAfterUpsertHooks []DTBDeliveryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DTBDelivery) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbDeliveryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DTBDelivery) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbDeliveryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DTBDelivery) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbDeliveryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DTBDelivery) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbDeliveryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DTBDelivery) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbDeliveryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DTBDelivery) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbDeliveryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DTBDelivery) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbDeliveryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DTBDelivery) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbDeliveryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DTBDelivery) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbDeliveryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDTBDeliveryHook registers your hook function for all future operations.
func AddDTBDeliveryHook(hookPoint boil.HookPoint, dtbDeliveryHook DTBDeliveryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		dtbDeliveryBeforeInsertHooks = append(dtbDeliveryBeforeInsertHooks, dtbDeliveryHook)
	case boil.BeforeUpdateHook:
		dtbDeliveryBeforeUpdateHooks = append(dtbDeliveryBeforeUpdateHooks, dtbDeliveryHook)
	case boil.BeforeDeleteHook:
		dtbDeliveryBeforeDeleteHooks = append(dtbDeliveryBeforeDeleteHooks, dtbDeliveryHook)
	case boil.BeforeUpsertHook:
		dtbDeliveryBeforeUpsertHooks = append(dtbDeliveryBeforeUpsertHooks, dtbDeliveryHook)
	case boil.AfterInsertHook:
		dtbDeliveryAfterInsertHooks = append(dtbDeliveryAfterInsertHooks, dtbDeliveryHook)
	case boil.AfterSelectHook:
		dtbDeliveryAfterSelectHooks = append(dtbDeliveryAfterSelectHooks, dtbDeliveryHook)
	case boil.AfterUpdateHook:
		dtbDeliveryAfterUpdateHooks = append(dtbDeliveryAfterUpdateHooks, dtbDeliveryHook)
	case boil.AfterDeleteHook:
		dtbDeliveryAfterDeleteHooks = append(dtbDeliveryAfterDeleteHooks, dtbDeliveryHook)
	case boil.AfterUpsertHook:
		dtbDeliveryAfterUpsertHooks = append(dtbDeliveryAfterUpsertHooks, dtbDeliveryHook)
	}
}

// One returns a single dtbDelivery record from the query.
func (q dtbDeliveryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DTBDelivery, error) {
	o := &DTBDelivery{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for dtb_delivery")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DTBDelivery records from the query.
func (q dtbDeliveryQuery) All(ctx context.Context, exec boil.ContextExecutor) (DTBDeliverySlice, error) {
	var o []*DTBDelivery

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to DTBDelivery slice")
	}

	if len(dtbDeliveryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DTBDelivery records in the query.
func (q dtbDeliveryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count dtb_delivery rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dtbDeliveryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if dtb_delivery exists")
	}

	return count > 0, nil
}

// Creator pointed to by the foreign key.
func (o *DTBDelivery) Creator(mods ...qm.QueryMod) dtbMemberQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.CreatorID),
	}

	queryMods = append(queryMods, mods...)

	query := DTBMembers(queryMods...)
	queries.SetFrom(query.Query, "`dtb_member`")

	return query
}

// SaleType pointed to by the foreign key.
func (o *DTBDelivery) SaleType(mods ...qm.QueryMod) mtbSaleTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.SaleTypeID),
	}

	queryMods = append(queryMods, mods...)

	query := MTBSaleTypes(queryMods...)
	queries.SetFrom(query.Query, "`mtb_sale_type`")

	return query
}

// DeliveryDTBDeliveryFees retrieves all the dtb_delivery_fee's DTBDeliveryFees with an executor via delivery_id column.
func (o *DTBDelivery) DeliveryDTBDeliveryFees(mods ...qm.QueryMod) dtbDeliveryFeeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`dtb_delivery_fee`.`delivery_id`=?", o.ID),
	)

	query := DTBDeliveryFees(queryMods...)
	queries.SetFrom(query.Query, "`dtb_delivery_fee`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`dtb_delivery_fee`.*"})
	}

	return query
}

// DeliveryDTBDeliveryTimes retrieves all the dtb_delivery_time's DTBDeliveryTimes with an executor via delivery_id column.
func (o *DTBDelivery) DeliveryDTBDeliveryTimes(mods ...qm.QueryMod) dtbDeliveryTimeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`dtb_delivery_time`.`delivery_id`=?", o.ID),
	)

	query := DTBDeliveryTimes(queryMods...)
	queries.SetFrom(query.Query, "`dtb_delivery_time`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`dtb_delivery_time`.*"})
	}

	return query
}

// DeliveryDTBPaymentOptions retrieves all the dtb_payment_option's DTBPaymentOptions with an executor via delivery_id column.
func (o *DTBDelivery) DeliveryDTBPaymentOptions(mods ...qm.QueryMod) dtbPaymentOptionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`dtb_payment_option`.`delivery_id`=?", o.ID),
	)

	query := DTBPaymentOptions(queryMods...)
	queries.SetFrom(query.Query, "`dtb_payment_option`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`dtb_payment_option`.*"})
	}

	return query
}

// DeliveryDTBShippings retrieves all the dtb_shipping's DTBShippings with an executor via delivery_id column.
func (o *DTBDelivery) DeliveryDTBShippings(mods ...qm.QueryMod) dtbShippingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`dtb_shipping`.`delivery_id`=?", o.ID),
	)

	query := DTBShippings(queryMods...)
	queries.SetFrom(query.Query, "`dtb_shipping`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`dtb_shipping`.*"})
	}

	return query
}

// LoadCreator allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dtbDeliveryL) LoadCreator(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBDelivery interface{}, mods queries.Applicator) error {
	var slice []*DTBDelivery
	var object *DTBDelivery

	if singular {
		object = maybeDTBDelivery.(*DTBDelivery)
	} else {
		slice = *maybeDTBDelivery.(*[]*DTBDelivery)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbDeliveryR{}
		}
		if !queries.IsNil(object.CreatorID) {
			args = append(args, object.CreatorID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbDeliveryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CreatorID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CreatorID) {
				args = append(args, obj.CreatorID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_member`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DTBMember")
	}

	var resultSlice []*DTBMember
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DTBMember")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dtb_member")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_member")
	}

	if len(dtbDeliveryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Creator = foreign
		if foreign.R == nil {
			foreign.R = &dtbMemberR{}
		}
		foreign.R.CreatorDTBDeliveries = append(foreign.R.CreatorDTBDeliveries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CreatorID, foreign.ID) {
				local.R.Creator = foreign
				if foreign.R == nil {
					foreign.R = &dtbMemberR{}
				}
				foreign.R.CreatorDTBDeliveries = append(foreign.R.CreatorDTBDeliveries, local)
				break
			}
		}
	}

	return nil
}

// LoadSaleType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dtbDeliveryL) LoadSaleType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBDelivery interface{}, mods queries.Applicator) error {
	var slice []*DTBDelivery
	var object *DTBDelivery

	if singular {
		object = maybeDTBDelivery.(*DTBDelivery)
	} else {
		slice = *maybeDTBDelivery.(*[]*DTBDelivery)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbDeliveryR{}
		}
		if !queries.IsNil(object.SaleTypeID) {
			args = append(args, object.SaleTypeID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbDeliveryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SaleTypeID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SaleTypeID) {
				args = append(args, obj.SaleTypeID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`mtb_sale_type`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MTBSaleType")
	}

	var resultSlice []*MTBSaleType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MTBSaleType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mtb_sale_type")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mtb_sale_type")
	}

	if len(dtbDeliveryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SaleType = foreign
		if foreign.R == nil {
			foreign.R = &mtbSaleTypeR{}
		}
		foreign.R.SaleTypeDTBDeliveries = append(foreign.R.SaleTypeDTBDeliveries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SaleTypeID, foreign.ID) {
				local.R.SaleType = foreign
				if foreign.R == nil {
					foreign.R = &mtbSaleTypeR{}
				}
				foreign.R.SaleTypeDTBDeliveries = append(foreign.R.SaleTypeDTBDeliveries, local)
				break
			}
		}
	}

	return nil
}

// LoadDeliveryDTBDeliveryFees allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dtbDeliveryL) LoadDeliveryDTBDeliveryFees(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBDelivery interface{}, mods queries.Applicator) error {
	var slice []*DTBDelivery
	var object *DTBDelivery

	if singular {
		object = maybeDTBDelivery.(*DTBDelivery)
	} else {
		slice = *maybeDTBDelivery.(*[]*DTBDelivery)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbDeliveryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbDeliveryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_delivery_fee`), qm.WhereIn(`delivery_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dtb_delivery_fee")
	}

	var resultSlice []*DTBDeliveryFee
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dtb_delivery_fee")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dtb_delivery_fee")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_delivery_fee")
	}

	if len(dtbDeliveryFeeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DeliveryDTBDeliveryFees = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dtbDeliveryFeeR{}
			}
			foreign.R.Delivery = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.DeliveryID) {
				local.R.DeliveryDTBDeliveryFees = append(local.R.DeliveryDTBDeliveryFees, foreign)
				if foreign.R == nil {
					foreign.R = &dtbDeliveryFeeR{}
				}
				foreign.R.Delivery = local
				break
			}
		}
	}

	return nil
}

// LoadDeliveryDTBDeliveryTimes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dtbDeliveryL) LoadDeliveryDTBDeliveryTimes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBDelivery interface{}, mods queries.Applicator) error {
	var slice []*DTBDelivery
	var object *DTBDelivery

	if singular {
		object = maybeDTBDelivery.(*DTBDelivery)
	} else {
		slice = *maybeDTBDelivery.(*[]*DTBDelivery)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbDeliveryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbDeliveryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_delivery_time`), qm.WhereIn(`delivery_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dtb_delivery_time")
	}

	var resultSlice []*DTBDeliveryTime
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dtb_delivery_time")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dtb_delivery_time")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_delivery_time")
	}

	if len(dtbDeliveryTimeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DeliveryDTBDeliveryTimes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dtbDeliveryTimeR{}
			}
			foreign.R.Delivery = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.DeliveryID) {
				local.R.DeliveryDTBDeliveryTimes = append(local.R.DeliveryDTBDeliveryTimes, foreign)
				if foreign.R == nil {
					foreign.R = &dtbDeliveryTimeR{}
				}
				foreign.R.Delivery = local
				break
			}
		}
	}

	return nil
}

// LoadDeliveryDTBPaymentOptions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dtbDeliveryL) LoadDeliveryDTBPaymentOptions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBDelivery interface{}, mods queries.Applicator) error {
	var slice []*DTBDelivery
	var object *DTBDelivery

	if singular {
		object = maybeDTBDelivery.(*DTBDelivery)
	} else {
		slice = *maybeDTBDelivery.(*[]*DTBDelivery)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbDeliveryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbDeliveryR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_payment_option`), qm.WhereIn(`delivery_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dtb_payment_option")
	}

	var resultSlice []*DTBPaymentOption
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dtb_payment_option")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dtb_payment_option")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_payment_option")
	}

	if len(dtbPaymentOptionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DeliveryDTBPaymentOptions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dtbPaymentOptionR{}
			}
			foreign.R.Delivery = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DeliveryID {
				local.R.DeliveryDTBPaymentOptions = append(local.R.DeliveryDTBPaymentOptions, foreign)
				if foreign.R == nil {
					foreign.R = &dtbPaymentOptionR{}
				}
				foreign.R.Delivery = local
				break
			}
		}
	}

	return nil
}

// LoadDeliveryDTBShippings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dtbDeliveryL) LoadDeliveryDTBShippings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBDelivery interface{}, mods queries.Applicator) error {
	var slice []*DTBDelivery
	var object *DTBDelivery

	if singular {
		object = maybeDTBDelivery.(*DTBDelivery)
	} else {
		slice = *maybeDTBDelivery.(*[]*DTBDelivery)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbDeliveryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbDeliveryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_shipping`), qm.WhereIn(`delivery_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dtb_shipping")
	}

	var resultSlice []*DTBShipping
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dtb_shipping")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dtb_shipping")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_shipping")
	}

	if len(dtbShippingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DeliveryDTBShippings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dtbShippingR{}
			}
			foreign.R.Delivery = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.DeliveryID) {
				local.R.DeliveryDTBShippings = append(local.R.DeliveryDTBShippings, foreign)
				if foreign.R == nil {
					foreign.R = &dtbShippingR{}
				}
				foreign.R.Delivery = local
				break
			}
		}
	}

	return nil
}

// SetCreator of the dtbDelivery to the related item.
// Sets o.R.Creator to related.
// Adds o to related.R.CreatorDTBDeliveries.
func (o *DTBDelivery) SetCreator(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DTBMember) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `dtb_delivery` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"creator_id"}),
		strmangle.WhereClause("`", "`", 0, dtbDeliveryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CreatorID, related.ID)
	if o.R == nil {
		o.R = &dtbDeliveryR{
			Creator: related,
		}
	} else {
		o.R.Creator = related
	}

	if related.R == nil {
		related.R = &dtbMemberR{
			CreatorDTBDeliveries: DTBDeliverySlice{o},
		}
	} else {
		related.R.CreatorDTBDeliveries = append(related.R.CreatorDTBDeliveries, o)
	}

	return nil
}

// RemoveCreator relationship.
// Sets o.R.Creator to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *DTBDelivery) RemoveCreator(ctx context.Context, exec boil.ContextExecutor, related *DTBMember) error {
	var err error

	queries.SetScanner(&o.CreatorID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("creator_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Creator = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CreatorDTBDeliveries {
		if queries.Equal(o.CreatorID, ri.CreatorID) {
			continue
		}

		ln := len(related.R.CreatorDTBDeliveries)
		if ln > 1 && i < ln-1 {
			related.R.CreatorDTBDeliveries[i] = related.R.CreatorDTBDeliveries[ln-1]
		}
		related.R.CreatorDTBDeliveries = related.R.CreatorDTBDeliveries[:ln-1]
		break
	}
	return nil
}

// SetSaleType of the dtbDelivery to the related item.
// Sets o.R.SaleType to related.
// Adds o to related.R.SaleTypeDTBDeliveries.
func (o *DTBDelivery) SetSaleType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MTBSaleType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `dtb_delivery` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"sale_type_id"}),
		strmangle.WhereClause("`", "`", 0, dtbDeliveryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SaleTypeID, related.ID)
	if o.R == nil {
		o.R = &dtbDeliveryR{
			SaleType: related,
		}
	} else {
		o.R.SaleType = related
	}

	if related.R == nil {
		related.R = &mtbSaleTypeR{
			SaleTypeDTBDeliveries: DTBDeliverySlice{o},
		}
	} else {
		related.R.SaleTypeDTBDeliveries = append(related.R.SaleTypeDTBDeliveries, o)
	}

	return nil
}

// RemoveSaleType relationship.
// Sets o.R.SaleType to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *DTBDelivery) RemoveSaleType(ctx context.Context, exec boil.ContextExecutor, related *MTBSaleType) error {
	var err error

	queries.SetScanner(&o.SaleTypeID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("sale_type_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.SaleType = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SaleTypeDTBDeliveries {
		if queries.Equal(o.SaleTypeID, ri.SaleTypeID) {
			continue
		}

		ln := len(related.R.SaleTypeDTBDeliveries)
		if ln > 1 && i < ln-1 {
			related.R.SaleTypeDTBDeliveries[i] = related.R.SaleTypeDTBDeliveries[ln-1]
		}
		related.R.SaleTypeDTBDeliveries = related.R.SaleTypeDTBDeliveries[:ln-1]
		break
	}
	return nil
}

// AddDeliveryDTBDeliveryFees adds the given related objects to the existing relationships
// of the dtb_delivery, optionally inserting them as new records.
// Appends related to o.R.DeliveryDTBDeliveryFees.
// Sets related.R.Delivery appropriately.
func (o *DTBDelivery) AddDeliveryDTBDeliveryFees(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBDeliveryFee) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DeliveryID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `dtb_delivery_fee` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"delivery_id"}),
				strmangle.WhereClause("`", "`", 0, dtbDeliveryFeePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DeliveryID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &dtbDeliveryR{
			DeliveryDTBDeliveryFees: related,
		}
	} else {
		o.R.DeliveryDTBDeliveryFees = append(o.R.DeliveryDTBDeliveryFees, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dtbDeliveryFeeR{
				Delivery: o,
			}
		} else {
			rel.R.Delivery = o
		}
	}
	return nil
}

// SetDeliveryDTBDeliveryFees removes all previously related items of the
// dtb_delivery replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Delivery's DeliveryDTBDeliveryFees accordingly.
// Replaces o.R.DeliveryDTBDeliveryFees with related.
// Sets related.R.Delivery's DeliveryDTBDeliveryFees accordingly.
func (o *DTBDelivery) SetDeliveryDTBDeliveryFees(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBDeliveryFee) error {
	query := "update `dtb_delivery_fee` set `delivery_id` = null where `delivery_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.DeliveryDTBDeliveryFees {
			queries.SetScanner(&rel.DeliveryID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Delivery = nil
		}

		o.R.DeliveryDTBDeliveryFees = nil
	}
	return o.AddDeliveryDTBDeliveryFees(ctx, exec, insert, related...)
}

// RemoveDeliveryDTBDeliveryFees relationships from objects passed in.
// Removes related items from R.DeliveryDTBDeliveryFees (uses pointer comparison, removal does not keep order)
// Sets related.R.Delivery.
func (o *DTBDelivery) RemoveDeliveryDTBDeliveryFees(ctx context.Context, exec boil.ContextExecutor, related ...*DTBDeliveryFee) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DeliveryID, nil)
		if rel.R != nil {
			rel.R.Delivery = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("delivery_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DeliveryDTBDeliveryFees {
			if rel != ri {
				continue
			}

			ln := len(o.R.DeliveryDTBDeliveryFees)
			if ln > 1 && i < ln-1 {
				o.R.DeliveryDTBDeliveryFees[i] = o.R.DeliveryDTBDeliveryFees[ln-1]
			}
			o.R.DeliveryDTBDeliveryFees = o.R.DeliveryDTBDeliveryFees[:ln-1]
			break
		}
	}

	return nil
}

// AddDeliveryDTBDeliveryTimes adds the given related objects to the existing relationships
// of the dtb_delivery, optionally inserting them as new records.
// Appends related to o.R.DeliveryDTBDeliveryTimes.
// Sets related.R.Delivery appropriately.
func (o *DTBDelivery) AddDeliveryDTBDeliveryTimes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBDeliveryTime) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DeliveryID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `dtb_delivery_time` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"delivery_id"}),
				strmangle.WhereClause("`", "`", 0, dtbDeliveryTimePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DeliveryID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &dtbDeliveryR{
			DeliveryDTBDeliveryTimes: related,
		}
	} else {
		o.R.DeliveryDTBDeliveryTimes = append(o.R.DeliveryDTBDeliveryTimes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dtbDeliveryTimeR{
				Delivery: o,
			}
		} else {
			rel.R.Delivery = o
		}
	}
	return nil
}

// SetDeliveryDTBDeliveryTimes removes all previously related items of the
// dtb_delivery replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Delivery's DeliveryDTBDeliveryTimes accordingly.
// Replaces o.R.DeliveryDTBDeliveryTimes with related.
// Sets related.R.Delivery's DeliveryDTBDeliveryTimes accordingly.
func (o *DTBDelivery) SetDeliveryDTBDeliveryTimes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBDeliveryTime) error {
	query := "update `dtb_delivery_time` set `delivery_id` = null where `delivery_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.DeliveryDTBDeliveryTimes {
			queries.SetScanner(&rel.DeliveryID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Delivery = nil
		}

		o.R.DeliveryDTBDeliveryTimes = nil
	}
	return o.AddDeliveryDTBDeliveryTimes(ctx, exec, insert, related...)
}

// RemoveDeliveryDTBDeliveryTimes relationships from objects passed in.
// Removes related items from R.DeliveryDTBDeliveryTimes (uses pointer comparison, removal does not keep order)
// Sets related.R.Delivery.
func (o *DTBDelivery) RemoveDeliveryDTBDeliveryTimes(ctx context.Context, exec boil.ContextExecutor, related ...*DTBDeliveryTime) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DeliveryID, nil)
		if rel.R != nil {
			rel.R.Delivery = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("delivery_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DeliveryDTBDeliveryTimes {
			if rel != ri {
				continue
			}

			ln := len(o.R.DeliveryDTBDeliveryTimes)
			if ln > 1 && i < ln-1 {
				o.R.DeliveryDTBDeliveryTimes[i] = o.R.DeliveryDTBDeliveryTimes[ln-1]
			}
			o.R.DeliveryDTBDeliveryTimes = o.R.DeliveryDTBDeliveryTimes[:ln-1]
			break
		}
	}

	return nil
}

// AddDeliveryDTBPaymentOptions adds the given related objects to the existing relationships
// of the dtb_delivery, optionally inserting them as new records.
// Appends related to o.R.DeliveryDTBPaymentOptions.
// Sets related.R.Delivery appropriately.
func (o *DTBDelivery) AddDeliveryDTBPaymentOptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBPaymentOption) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DeliveryID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `dtb_payment_option` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"delivery_id"}),
				strmangle.WhereClause("`", "`", 0, dtbPaymentOptionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.DeliveryID, rel.PaymentID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DeliveryID = o.ID
		}
	}

	if o.R == nil {
		o.R = &dtbDeliveryR{
			DeliveryDTBPaymentOptions: related,
		}
	} else {
		o.R.DeliveryDTBPaymentOptions = append(o.R.DeliveryDTBPaymentOptions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dtbPaymentOptionR{
				Delivery: o,
			}
		} else {
			rel.R.Delivery = o
		}
	}
	return nil
}

// AddDeliveryDTBShippings adds the given related objects to the existing relationships
// of the dtb_delivery, optionally inserting them as new records.
// Appends related to o.R.DeliveryDTBShippings.
// Sets related.R.Delivery appropriately.
func (o *DTBDelivery) AddDeliveryDTBShippings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBShipping) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DeliveryID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `dtb_shipping` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"delivery_id"}),
				strmangle.WhereClause("`", "`", 0, dtbShippingPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DeliveryID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &dtbDeliveryR{
			DeliveryDTBShippings: related,
		}
	} else {
		o.R.DeliveryDTBShippings = append(o.R.DeliveryDTBShippings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dtbShippingR{
				Delivery: o,
			}
		} else {
			rel.R.Delivery = o
		}
	}
	return nil
}

// SetDeliveryDTBShippings removes all previously related items of the
// dtb_delivery replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Delivery's DeliveryDTBShippings accordingly.
// Replaces o.R.DeliveryDTBShippings with related.
// Sets related.R.Delivery's DeliveryDTBShippings accordingly.
func (o *DTBDelivery) SetDeliveryDTBShippings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBShipping) error {
	query := "update `dtb_shipping` set `delivery_id` = null where `delivery_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.DeliveryDTBShippings {
			queries.SetScanner(&rel.DeliveryID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Delivery = nil
		}

		o.R.DeliveryDTBShippings = nil
	}
	return o.AddDeliveryDTBShippings(ctx, exec, insert, related...)
}

// RemoveDeliveryDTBShippings relationships from objects passed in.
// Removes related items from R.DeliveryDTBShippings (uses pointer comparison, removal does not keep order)
// Sets related.R.Delivery.
func (o *DTBDelivery) RemoveDeliveryDTBShippings(ctx context.Context, exec boil.ContextExecutor, related ...*DTBShipping) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DeliveryID, nil)
		if rel.R != nil {
			rel.R.Delivery = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("delivery_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DeliveryDTBShippings {
			if rel != ri {
				continue
			}

			ln := len(o.R.DeliveryDTBShippings)
			if ln > 1 && i < ln-1 {
				o.R.DeliveryDTBShippings[i] = o.R.DeliveryDTBShippings[ln-1]
			}
			o.R.DeliveryDTBShippings = o.R.DeliveryDTBShippings[:ln-1]
			break
		}
	}

	return nil
}

// DTBDeliveries retrieves all the records using an executor.
func DTBDeliveries(mods ...qm.QueryMod) dtbDeliveryQuery {
	mods = append(mods, qm.From("`dtb_delivery`"))
	return dtbDeliveryQuery{NewQuery(mods...)}
}

// FindDTBDelivery retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDTBDelivery(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*DTBDelivery, error) {
	dtbDeliveryObj := &DTBDelivery{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `dtb_delivery` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, dtbDeliveryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from dtb_delivery")
	}

	return dtbDeliveryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DTBDelivery) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no dtb_delivery provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dtbDeliveryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dtbDeliveryInsertCacheMut.RLock()
	cache, cached := dtbDeliveryInsertCache[key]
	dtbDeliveryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dtbDeliveryColumns,
			dtbDeliveryColumnsWithDefault,
			dtbDeliveryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dtbDeliveryType, dtbDeliveryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dtbDeliveryType, dtbDeliveryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `dtb_delivery` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `dtb_delivery` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `dtb_delivery` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dtbDeliveryPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into dtb_delivery")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == dtbDeliveryMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for dtb_delivery")
	}

CacheNoHooks:
	if !cached {
		dtbDeliveryInsertCacheMut.Lock()
		dtbDeliveryInsertCache[key] = cache
		dtbDeliveryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DTBDelivery.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DTBDelivery) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dtbDeliveryUpdateCacheMut.RLock()
	cache, cached := dtbDeliveryUpdateCache[key]
	dtbDeliveryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dtbDeliveryColumns,
			dtbDeliveryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update dtb_delivery, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `dtb_delivery` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dtbDeliveryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dtbDeliveryType, dtbDeliveryMapping, append(wl, dtbDeliveryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update dtb_delivery row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for dtb_delivery")
	}

	if !cached {
		dtbDeliveryUpdateCacheMut.Lock()
		dtbDeliveryUpdateCache[key] = cache
		dtbDeliveryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dtbDeliveryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for dtb_delivery")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for dtb_delivery")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DTBDeliverySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbDeliveryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `dtb_delivery` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbDeliveryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in dtbDelivery slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all dtbDelivery")
	}
	return rowsAff, nil
}

var mySQLDTBDeliveryUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DTBDelivery) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no dtb_delivery provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dtbDeliveryColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDTBDeliveryUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dtbDeliveryUpsertCacheMut.RLock()
	cache, cached := dtbDeliveryUpsertCache[key]
	dtbDeliveryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dtbDeliveryColumns,
			dtbDeliveryColumnsWithDefault,
			dtbDeliveryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			dtbDeliveryColumns,
			dtbDeliveryPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("model: unable to upsert dtb_delivery, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "dtb_delivery", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `dtb_delivery` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dtbDeliveryType, dtbDeliveryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dtbDeliveryType, dtbDeliveryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for dtb_delivery")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == dtbDeliveryMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dtbDeliveryType, dtbDeliveryMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for dtb_delivery")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for dtb_delivery")
	}

CacheNoHooks:
	if !cached {
		dtbDeliveryUpsertCacheMut.Lock()
		dtbDeliveryUpsertCache[key] = cache
		dtbDeliveryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DTBDelivery record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DTBDelivery) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no DTBDelivery provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dtbDeliveryPrimaryKeyMapping)
	sql := "DELETE FROM `dtb_delivery` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from dtb_delivery")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for dtb_delivery")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dtbDeliveryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no dtbDeliveryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from dtb_delivery")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for dtb_delivery")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DTBDeliverySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no DTBDelivery slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(dtbDeliveryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbDeliveryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `dtb_delivery` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbDeliveryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from dtbDelivery slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for dtb_delivery")
	}

	if len(dtbDeliveryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DTBDelivery) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDTBDelivery(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DTBDeliverySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DTBDeliverySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbDeliveryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `dtb_delivery`.* FROM `dtb_delivery` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbDeliveryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in DTBDeliverySlice")
	}

	*o = slice

	return nil
}

// DTBDeliveryExists checks if the DTBDelivery row exists.
func DTBDeliveryExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `dtb_delivery` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if dtb_delivery exists")
	}

	return exists, nil
}
