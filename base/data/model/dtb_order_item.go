// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// DTBOrderItem is an object representing the database table.
type DTBOrderItem struct {
	ID                 uint              `boil:"id" json:"id" toml:"id" yaml:"id"`
	OrderID            null.Uint         `boil:"order_id" json:"order_id,omitempty" toml:"order_id" yaml:"order_id,omitempty"`
	ProductID          null.Uint         `boil:"product_id" json:"product_id,omitempty" toml:"product_id" yaml:"product_id,omitempty"`
	ProductClassID     null.Uint         `boil:"product_class_id" json:"product_class_id,omitempty" toml:"product_class_id" yaml:"product_class_id,omitempty"`
	ShippingID         null.Uint         `boil:"shipping_id" json:"shipping_id,omitempty" toml:"shipping_id" yaml:"shipping_id,omitempty"`
	RoundingTypeID     null.Uint16       `boil:"rounding_type_id" json:"rounding_type_id,omitempty" toml:"rounding_type_id" yaml:"rounding_type_id,omitempty"`
	TaxTypeID          null.Uint16       `boil:"tax_type_id" json:"tax_type_id,omitempty" toml:"tax_type_id" yaml:"tax_type_id,omitempty"`
	TaxDisplayTypeID   null.Uint16       `boil:"tax_display_type_id" json:"tax_display_type_id,omitempty" toml:"tax_display_type_id" yaml:"tax_display_type_id,omitempty"`
	OrderItemTypeID    null.Uint16       `boil:"order_item_type_id" json:"order_item_type_id,omitempty" toml:"order_item_type_id" yaml:"order_item_type_id,omitempty"`
	ProductName        string            `boil:"product_name" json:"product_name" toml:"product_name" yaml:"product_name"`
	ProductCode        null.String       `boil:"product_code" json:"product_code,omitempty" toml:"product_code" yaml:"product_code,omitempty"`
	ClassName1         null.String       `boil:"class_name1" json:"class_name1,omitempty" toml:"class_name1" yaml:"class_name1,omitempty"`
	ClassName2         null.String       `boil:"class_name2" json:"class_name2,omitempty" toml:"class_name2" yaml:"class_name2,omitempty"`
	ClassCategoryName1 null.String       `boil:"class_category_name1" json:"class_category_name1,omitempty" toml:"class_category_name1" yaml:"class_category_name1,omitempty"`
	ClassCategoryName2 null.String       `boil:"class_category_name2" json:"class_category_name2,omitempty" toml:"class_category_name2" yaml:"class_category_name2,omitempty"`
	Price              types.Decimal     `boil:"price" json:"price" toml:"price" yaml:"price"`
	Quantity           types.Decimal     `boil:"quantity" json:"quantity" toml:"quantity" yaml:"quantity"`
	Tax                types.Decimal     `boil:"tax" json:"tax" toml:"tax" yaml:"tax"`
	TaxRate            types.Decimal     `boil:"tax_rate" json:"tax_rate" toml:"tax_rate" yaml:"tax_rate"`
	TaxRuleID          null.Uint16       `boil:"tax_rule_id" json:"tax_rule_id,omitempty" toml:"tax_rule_id" yaml:"tax_rule_id,omitempty"`
	CurrencyCode       null.String       `boil:"currency_code" json:"currency_code,omitempty" toml:"currency_code" yaml:"currency_code,omitempty"`
	ProcessorName      null.String       `boil:"processor_name" json:"processor_name,omitempty" toml:"processor_name" yaml:"processor_name,omitempty"`
	PointRate          types.NullDecimal `boil:"point_rate" json:"point_rate,omitempty" toml:"point_rate" yaml:"point_rate,omitempty"`
	DiscriminatorType  string            `boil:"discriminator_type" json:"discriminator_type" toml:"discriminator_type" yaml:"discriminator_type"`

	R *dtbOrderItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dtbOrderItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DTBOrderItemColumns = struct {
	ID                 string
	OrderID            string
	ProductID          string
	ProductClassID     string
	ShippingID         string
	RoundingTypeID     string
	TaxTypeID          string
	TaxDisplayTypeID   string
	OrderItemTypeID    string
	ProductName        string
	ProductCode        string
	ClassName1         string
	ClassName2         string
	ClassCategoryName1 string
	ClassCategoryName2 string
	Price              string
	Quantity           string
	Tax                string
	TaxRate            string
	TaxRuleID          string
	CurrencyCode       string
	ProcessorName      string
	PointRate          string
	DiscriminatorType  string
}{
	ID:                 "id",
	OrderID:            "order_id",
	ProductID:          "product_id",
	ProductClassID:     "product_class_id",
	ShippingID:         "shipping_id",
	RoundingTypeID:     "rounding_type_id",
	TaxTypeID:          "tax_type_id",
	TaxDisplayTypeID:   "tax_display_type_id",
	OrderItemTypeID:    "order_item_type_id",
	ProductName:        "product_name",
	ProductCode:        "product_code",
	ClassName1:         "class_name1",
	ClassName2:         "class_name2",
	ClassCategoryName1: "class_category_name1",
	ClassCategoryName2: "class_category_name2",
	Price:              "price",
	Quantity:           "quantity",
	Tax:                "tax",
	TaxRate:            "tax_rate",
	TaxRuleID:          "tax_rule_id",
	CurrencyCode:       "currency_code",
	ProcessorName:      "processor_name",
	PointRate:          "point_rate",
	DiscriminatorType:  "discriminator_type",
}

// Generated where

var DTBOrderItemWhere = struct {
	ID                 whereHelperuint
	OrderID            whereHelpernull_Uint
	ProductID          whereHelpernull_Uint
	ProductClassID     whereHelpernull_Uint
	ShippingID         whereHelpernull_Uint
	RoundingTypeID     whereHelpernull_Uint16
	TaxTypeID          whereHelpernull_Uint16
	TaxDisplayTypeID   whereHelpernull_Uint16
	OrderItemTypeID    whereHelpernull_Uint16
	ProductName        whereHelperstring
	ProductCode        whereHelpernull_String
	ClassName1         whereHelpernull_String
	ClassName2         whereHelpernull_String
	ClassCategoryName1 whereHelpernull_String
	ClassCategoryName2 whereHelpernull_String
	Price              whereHelpertypes_Decimal
	Quantity           whereHelpertypes_Decimal
	Tax                whereHelpertypes_Decimal
	TaxRate            whereHelpertypes_Decimal
	TaxRuleID          whereHelpernull_Uint16
	CurrencyCode       whereHelpernull_String
	ProcessorName      whereHelpernull_String
	PointRate          whereHelpertypes_NullDecimal
	DiscriminatorType  whereHelperstring
}{
	ID:                 whereHelperuint{field: `id`},
	OrderID:            whereHelpernull_Uint{field: `order_id`},
	ProductID:          whereHelpernull_Uint{field: `product_id`},
	ProductClassID:     whereHelpernull_Uint{field: `product_class_id`},
	ShippingID:         whereHelpernull_Uint{field: `shipping_id`},
	RoundingTypeID:     whereHelpernull_Uint16{field: `rounding_type_id`},
	TaxTypeID:          whereHelpernull_Uint16{field: `tax_type_id`},
	TaxDisplayTypeID:   whereHelpernull_Uint16{field: `tax_display_type_id`},
	OrderItemTypeID:    whereHelpernull_Uint16{field: `order_item_type_id`},
	ProductName:        whereHelperstring{field: `product_name`},
	ProductCode:        whereHelpernull_String{field: `product_code`},
	ClassName1:         whereHelpernull_String{field: `class_name1`},
	ClassName2:         whereHelpernull_String{field: `class_name2`},
	ClassCategoryName1: whereHelpernull_String{field: `class_category_name1`},
	ClassCategoryName2: whereHelpernull_String{field: `class_category_name2`},
	Price:              whereHelpertypes_Decimal{field: `price`},
	Quantity:           whereHelpertypes_Decimal{field: `quantity`},
	Tax:                whereHelpertypes_Decimal{field: `tax`},
	TaxRate:            whereHelpertypes_Decimal{field: `tax_rate`},
	TaxRuleID:          whereHelpernull_Uint16{field: `tax_rule_id`},
	CurrencyCode:       whereHelpernull_String{field: `currency_code`},
	ProcessorName:      whereHelpernull_String{field: `processor_name`},
	PointRate:          whereHelpertypes_NullDecimal{field: `point_rate`},
	DiscriminatorType:  whereHelperstring{field: `discriminator_type`},
}

// DTBOrderItemRels is where relationship names are stored.
var DTBOrderItemRels = struct {
	RoundingType   string
	ProductClass   string
	Product        string
	Shipping       string
	TaxType        string
	Order          string
	TaxDisplayType string
	OrderItemType  string
}{
	RoundingType:   "RoundingType",
	ProductClass:   "ProductClass",
	Product:        "Product",
	Shipping:       "Shipping",
	TaxType:        "TaxType",
	Order:          "Order",
	TaxDisplayType: "TaxDisplayType",
	OrderItemType:  "OrderItemType",
}

// dtbOrderItemR is where relationships are stored.
type dtbOrderItemR struct {
	RoundingType   *MTBRoundingType
	ProductClass   *DTBProductClass
	Product        *DTBProduct
	Shipping       *DTBShipping
	TaxType        *MTBTaxType
	Order          *DTBOrder
	TaxDisplayType *MTBTaxDisplayType
	OrderItemType  *MTBOrderItemType
}

// NewStruct creates a new relationship struct
func (*dtbOrderItemR) NewStruct() *dtbOrderItemR {
	return &dtbOrderItemR{}
}

// dtbOrderItemL is where Load methods for each relationship are stored.
type dtbOrderItemL struct{}

var (
	dtbOrderItemColumns               = []string{"id", "order_id", "product_id", "product_class_id", "shipping_id", "rounding_type_id", "tax_type_id", "tax_display_type_id", "order_item_type_id", "product_name", "product_code", "class_name1", "class_name2", "class_category_name1", "class_category_name2", "price", "quantity", "tax", "tax_rate", "tax_rule_id", "currency_code", "processor_name", "point_rate", "discriminator_type"}
	dtbOrderItemColumnsWithoutDefault = []string{"order_id", "product_id", "product_class_id", "shipping_id", "rounding_type_id", "tax_type_id", "tax_display_type_id", "order_item_type_id", "product_name", "product_code", "class_name1", "class_name2", "class_category_name1", "class_category_name2", "tax_rule_id", "currency_code", "processor_name", "point_rate", "discriminator_type"}
	dtbOrderItemColumnsWithDefault    = []string{"id", "price", "quantity", "tax", "tax_rate"}
	dtbOrderItemPrimaryKeyColumns     = []string{"id"}
)

type (
	// DTBOrderItemSlice is an alias for a slice of pointers to DTBOrderItem.
	// This should generally be used opposed to []DTBOrderItem.
	DTBOrderItemSlice []*DTBOrderItem
	// DTBOrderItemHook is the signature for custom DTBOrderItem hook methods
	DTBOrderItemHook func(context.Context, boil.ContextExecutor, *DTBOrderItem) error

	dtbOrderItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dtbOrderItemType                 = reflect.TypeOf(&DTBOrderItem{})
	dtbOrderItemMapping              = queries.MakeStructMapping(dtbOrderItemType)
	dtbOrderItemPrimaryKeyMapping, _ = queries.BindMapping(dtbOrderItemType, dtbOrderItemMapping, dtbOrderItemPrimaryKeyColumns)
	dtbOrderItemInsertCacheMut       sync.RWMutex
	dtbOrderItemInsertCache          = make(map[string]insertCache)
	dtbOrderItemUpdateCacheMut       sync.RWMutex
	dtbOrderItemUpdateCache          = make(map[string]updateCache)
	dtbOrderItemUpsertCacheMut       sync.RWMutex
	dtbOrderItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dtbOrderItemBeforeInsertHooks []DTBOrderItemHook
var dtbOrderItemBeforeUpdateHooks []DTBOrderItemHook
var dtbOrderItemBeforeDeleteHooks []DTBOrderItemHook
var dtbOrderItemBeforeUpsertHooks []DTBOrderItemHook

var dtbOrderItemAfterInsertHooks []DTBOrderItemHook
var dtbOrderItemAfterSelectHooks []DTBOrderItemHook
var dtbOrderItemAfterUpdateHooks []DTBOrderItemHook
var dtbOrderItemAfterDeleteHooks []DTBOrderItemHook
var dtbOrderItemAfterUpsertHooks []DTBOrderItemHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DTBOrderItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbOrderItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DTBOrderItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbOrderItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DTBOrderItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbOrderItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DTBOrderItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbOrderItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DTBOrderItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbOrderItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DTBOrderItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbOrderItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DTBOrderItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbOrderItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DTBOrderItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbOrderItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DTBOrderItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbOrderItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDTBOrderItemHook registers your hook function for all future operations.
func AddDTBOrderItemHook(hookPoint boil.HookPoint, dtbOrderItemHook DTBOrderItemHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		dtbOrderItemBeforeInsertHooks = append(dtbOrderItemBeforeInsertHooks, dtbOrderItemHook)
	case boil.BeforeUpdateHook:
		dtbOrderItemBeforeUpdateHooks = append(dtbOrderItemBeforeUpdateHooks, dtbOrderItemHook)
	case boil.BeforeDeleteHook:
		dtbOrderItemBeforeDeleteHooks = append(dtbOrderItemBeforeDeleteHooks, dtbOrderItemHook)
	case boil.BeforeUpsertHook:
		dtbOrderItemBeforeUpsertHooks = append(dtbOrderItemBeforeUpsertHooks, dtbOrderItemHook)
	case boil.AfterInsertHook:
		dtbOrderItemAfterInsertHooks = append(dtbOrderItemAfterInsertHooks, dtbOrderItemHook)
	case boil.AfterSelectHook:
		dtbOrderItemAfterSelectHooks = append(dtbOrderItemAfterSelectHooks, dtbOrderItemHook)
	case boil.AfterUpdateHook:
		dtbOrderItemAfterUpdateHooks = append(dtbOrderItemAfterUpdateHooks, dtbOrderItemHook)
	case boil.AfterDeleteHook:
		dtbOrderItemAfterDeleteHooks = append(dtbOrderItemAfterDeleteHooks, dtbOrderItemHook)
	case boil.AfterUpsertHook:
		dtbOrderItemAfterUpsertHooks = append(dtbOrderItemAfterUpsertHooks, dtbOrderItemHook)
	}
}

// One returns a single dtbOrderItem record from the query.
func (q dtbOrderItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DTBOrderItem, error) {
	o := &DTBOrderItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for dtb_order_item")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DTBOrderItem records from the query.
func (q dtbOrderItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (DTBOrderItemSlice, error) {
	var o []*DTBOrderItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to DTBOrderItem slice")
	}

	if len(dtbOrderItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DTBOrderItem records in the query.
func (q dtbOrderItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count dtb_order_item rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dtbOrderItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if dtb_order_item exists")
	}

	return count > 0, nil
}

// RoundingType pointed to by the foreign key.
func (o *DTBOrderItem) RoundingType(mods ...qm.QueryMod) mtbRoundingTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.RoundingTypeID),
	}

	queryMods = append(queryMods, mods...)

	query := MTBRoundingTypes(queryMods...)
	queries.SetFrom(query.Query, "`mtb_rounding_type`")

	return query
}

// ProductClass pointed to by the foreign key.
func (o *DTBOrderItem) ProductClass(mods ...qm.QueryMod) dtbProductClassQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ProductClassID),
	}

	queryMods = append(queryMods, mods...)

	query := DTBProductClasses(queryMods...)
	queries.SetFrom(query.Query, "`dtb_product_class`")

	return query
}

// Product pointed to by the foreign key.
func (o *DTBOrderItem) Product(mods ...qm.QueryMod) dtbProductQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	query := DTBProducts(queryMods...)
	queries.SetFrom(query.Query, "`dtb_product`")

	return query
}

// Shipping pointed to by the foreign key.
func (o *DTBOrderItem) Shipping(mods ...qm.QueryMod) dtbShippingQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ShippingID),
	}

	queryMods = append(queryMods, mods...)

	query := DTBShippings(queryMods...)
	queries.SetFrom(query.Query, "`dtb_shipping`")

	return query
}

// TaxType pointed to by the foreign key.
func (o *DTBOrderItem) TaxType(mods ...qm.QueryMod) mtbTaxTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.TaxTypeID),
	}

	queryMods = append(queryMods, mods...)

	query := MTBTaxTypes(queryMods...)
	queries.SetFrom(query.Query, "`mtb_tax_type`")

	return query
}

// Order pointed to by the foreign key.
func (o *DTBOrderItem) Order(mods ...qm.QueryMod) dtbOrderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	query := DTBOrders(queryMods...)
	queries.SetFrom(query.Query, "`dtb_order`")

	return query
}

// TaxDisplayType pointed to by the foreign key.
func (o *DTBOrderItem) TaxDisplayType(mods ...qm.QueryMod) mtbTaxDisplayTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.TaxDisplayTypeID),
	}

	queryMods = append(queryMods, mods...)

	query := MTBTaxDisplayTypes(queryMods...)
	queries.SetFrom(query.Query, "`mtb_tax_display_type`")

	return query
}

// OrderItemType pointed to by the foreign key.
func (o *DTBOrderItem) OrderItemType(mods ...qm.QueryMod) mtbOrderItemTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.OrderItemTypeID),
	}

	queryMods = append(queryMods, mods...)

	query := MTBOrderItemTypes(queryMods...)
	queries.SetFrom(query.Query, "`mtb_order_item_type`")

	return query
}

// LoadRoundingType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dtbOrderItemL) LoadRoundingType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBOrderItem interface{}, mods queries.Applicator) error {
	var slice []*DTBOrderItem
	var object *DTBOrderItem

	if singular {
		object = maybeDTBOrderItem.(*DTBOrderItem)
	} else {
		slice = *maybeDTBOrderItem.(*[]*DTBOrderItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbOrderItemR{}
		}
		if !queries.IsNil(object.RoundingTypeID) {
			args = append(args, object.RoundingTypeID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbOrderItemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.RoundingTypeID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.RoundingTypeID) {
				args = append(args, obj.RoundingTypeID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`mtb_rounding_type`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MTBRoundingType")
	}

	var resultSlice []*MTBRoundingType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MTBRoundingType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mtb_rounding_type")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mtb_rounding_type")
	}

	if len(dtbOrderItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RoundingType = foreign
		if foreign.R == nil {
			foreign.R = &mtbRoundingTypeR{}
		}
		foreign.R.RoundingTypeDTBOrderItems = append(foreign.R.RoundingTypeDTBOrderItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RoundingTypeID, foreign.ID) {
				local.R.RoundingType = foreign
				if foreign.R == nil {
					foreign.R = &mtbRoundingTypeR{}
				}
				foreign.R.RoundingTypeDTBOrderItems = append(foreign.R.RoundingTypeDTBOrderItems, local)
				break
			}
		}
	}

	return nil
}

// LoadProductClass allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dtbOrderItemL) LoadProductClass(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBOrderItem interface{}, mods queries.Applicator) error {
	var slice []*DTBOrderItem
	var object *DTBOrderItem

	if singular {
		object = maybeDTBOrderItem.(*DTBOrderItem)
	} else {
		slice = *maybeDTBOrderItem.(*[]*DTBOrderItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbOrderItemR{}
		}
		if !queries.IsNil(object.ProductClassID) {
			args = append(args, object.ProductClassID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbOrderItemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductClassID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProductClassID) {
				args = append(args, obj.ProductClassID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_product_class`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DTBProductClass")
	}

	var resultSlice []*DTBProductClass
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DTBProductClass")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dtb_product_class")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_product_class")
	}

	if len(dtbOrderItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductClass = foreign
		if foreign.R == nil {
			foreign.R = &dtbProductClassR{}
		}
		foreign.R.ProductClassDTBOrderItems = append(foreign.R.ProductClassDTBOrderItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductClassID, foreign.ID) {
				local.R.ProductClass = foreign
				if foreign.R == nil {
					foreign.R = &dtbProductClassR{}
				}
				foreign.R.ProductClassDTBOrderItems = append(foreign.R.ProductClassDTBOrderItems, local)
				break
			}
		}
	}

	return nil
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dtbOrderItemL) LoadProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBOrderItem interface{}, mods queries.Applicator) error {
	var slice []*DTBOrderItem
	var object *DTBOrderItem

	if singular {
		object = maybeDTBOrderItem.(*DTBOrderItem)
	} else {
		slice = *maybeDTBOrderItem.(*[]*DTBOrderItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbOrderItemR{}
		}
		if !queries.IsNil(object.ProductID) {
			args = append(args, object.ProductID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbOrderItemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProductID) {
				args = append(args, obj.ProductID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_product`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DTBProduct")
	}

	var resultSlice []*DTBProduct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DTBProduct")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dtb_product")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_product")
	}

	if len(dtbOrderItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &dtbProductR{}
		}
		foreign.R.ProductDTBOrderItems = append(foreign.R.ProductDTBOrderItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductID, foreign.ID) {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &dtbProductR{}
				}
				foreign.R.ProductDTBOrderItems = append(foreign.R.ProductDTBOrderItems, local)
				break
			}
		}
	}

	return nil
}

// LoadShipping allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dtbOrderItemL) LoadShipping(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBOrderItem interface{}, mods queries.Applicator) error {
	var slice []*DTBOrderItem
	var object *DTBOrderItem

	if singular {
		object = maybeDTBOrderItem.(*DTBOrderItem)
	} else {
		slice = *maybeDTBOrderItem.(*[]*DTBOrderItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbOrderItemR{}
		}
		if !queries.IsNil(object.ShippingID) {
			args = append(args, object.ShippingID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbOrderItemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ShippingID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ShippingID) {
				args = append(args, obj.ShippingID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_shipping`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DTBShipping")
	}

	var resultSlice []*DTBShipping
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DTBShipping")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dtb_shipping")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_shipping")
	}

	if len(dtbOrderItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Shipping = foreign
		if foreign.R == nil {
			foreign.R = &dtbShippingR{}
		}
		foreign.R.ShippingDTBOrderItems = append(foreign.R.ShippingDTBOrderItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ShippingID, foreign.ID) {
				local.R.Shipping = foreign
				if foreign.R == nil {
					foreign.R = &dtbShippingR{}
				}
				foreign.R.ShippingDTBOrderItems = append(foreign.R.ShippingDTBOrderItems, local)
				break
			}
		}
	}

	return nil
}

// LoadTaxType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dtbOrderItemL) LoadTaxType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBOrderItem interface{}, mods queries.Applicator) error {
	var slice []*DTBOrderItem
	var object *DTBOrderItem

	if singular {
		object = maybeDTBOrderItem.(*DTBOrderItem)
	} else {
		slice = *maybeDTBOrderItem.(*[]*DTBOrderItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbOrderItemR{}
		}
		if !queries.IsNil(object.TaxTypeID) {
			args = append(args, object.TaxTypeID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbOrderItemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TaxTypeID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TaxTypeID) {
				args = append(args, obj.TaxTypeID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`mtb_tax_type`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MTBTaxType")
	}

	var resultSlice []*MTBTaxType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MTBTaxType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mtb_tax_type")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mtb_tax_type")
	}

	if len(dtbOrderItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TaxType = foreign
		if foreign.R == nil {
			foreign.R = &mtbTaxTypeR{}
		}
		foreign.R.TaxTypeDTBOrderItems = append(foreign.R.TaxTypeDTBOrderItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TaxTypeID, foreign.ID) {
				local.R.TaxType = foreign
				if foreign.R == nil {
					foreign.R = &mtbTaxTypeR{}
				}
				foreign.R.TaxTypeDTBOrderItems = append(foreign.R.TaxTypeDTBOrderItems, local)
				break
			}
		}
	}

	return nil
}

// LoadOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dtbOrderItemL) LoadOrder(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBOrderItem interface{}, mods queries.Applicator) error {
	var slice []*DTBOrderItem
	var object *DTBOrderItem

	if singular {
		object = maybeDTBOrderItem.(*DTBOrderItem)
	} else {
		slice = *maybeDTBOrderItem.(*[]*DTBOrderItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbOrderItemR{}
		}
		if !queries.IsNil(object.OrderID) {
			args = append(args, object.OrderID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbOrderItemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OrderID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OrderID) {
				args = append(args, obj.OrderID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_order`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DTBOrder")
	}

	var resultSlice []*DTBOrder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DTBOrder")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dtb_order")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_order")
	}

	if len(dtbOrderItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Order = foreign
		if foreign.R == nil {
			foreign.R = &dtbOrderR{}
		}
		foreign.R.OrderDTBOrderItems = append(foreign.R.OrderDTBOrderItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OrderID, foreign.ID) {
				local.R.Order = foreign
				if foreign.R == nil {
					foreign.R = &dtbOrderR{}
				}
				foreign.R.OrderDTBOrderItems = append(foreign.R.OrderDTBOrderItems, local)
				break
			}
		}
	}

	return nil
}

// LoadTaxDisplayType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dtbOrderItemL) LoadTaxDisplayType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBOrderItem interface{}, mods queries.Applicator) error {
	var slice []*DTBOrderItem
	var object *DTBOrderItem

	if singular {
		object = maybeDTBOrderItem.(*DTBOrderItem)
	} else {
		slice = *maybeDTBOrderItem.(*[]*DTBOrderItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbOrderItemR{}
		}
		if !queries.IsNil(object.TaxDisplayTypeID) {
			args = append(args, object.TaxDisplayTypeID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbOrderItemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TaxDisplayTypeID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TaxDisplayTypeID) {
				args = append(args, obj.TaxDisplayTypeID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`mtb_tax_display_type`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MTBTaxDisplayType")
	}

	var resultSlice []*MTBTaxDisplayType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MTBTaxDisplayType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mtb_tax_display_type")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mtb_tax_display_type")
	}

	if len(dtbOrderItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TaxDisplayType = foreign
		if foreign.R == nil {
			foreign.R = &mtbTaxDisplayTypeR{}
		}
		foreign.R.TaxDisplayTypeDTBOrderItems = append(foreign.R.TaxDisplayTypeDTBOrderItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TaxDisplayTypeID, foreign.ID) {
				local.R.TaxDisplayType = foreign
				if foreign.R == nil {
					foreign.R = &mtbTaxDisplayTypeR{}
				}
				foreign.R.TaxDisplayTypeDTBOrderItems = append(foreign.R.TaxDisplayTypeDTBOrderItems, local)
				break
			}
		}
	}

	return nil
}

// LoadOrderItemType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dtbOrderItemL) LoadOrderItemType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBOrderItem interface{}, mods queries.Applicator) error {
	var slice []*DTBOrderItem
	var object *DTBOrderItem

	if singular {
		object = maybeDTBOrderItem.(*DTBOrderItem)
	} else {
		slice = *maybeDTBOrderItem.(*[]*DTBOrderItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbOrderItemR{}
		}
		if !queries.IsNil(object.OrderItemTypeID) {
			args = append(args, object.OrderItemTypeID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbOrderItemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OrderItemTypeID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OrderItemTypeID) {
				args = append(args, obj.OrderItemTypeID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`mtb_order_item_type`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MTBOrderItemType")
	}

	var resultSlice []*MTBOrderItemType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MTBOrderItemType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mtb_order_item_type")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mtb_order_item_type")
	}

	if len(dtbOrderItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrderItemType = foreign
		if foreign.R == nil {
			foreign.R = &mtbOrderItemTypeR{}
		}
		foreign.R.OrderItemTypeDTBOrderItems = append(foreign.R.OrderItemTypeDTBOrderItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OrderItemTypeID, foreign.ID) {
				local.R.OrderItemType = foreign
				if foreign.R == nil {
					foreign.R = &mtbOrderItemTypeR{}
				}
				foreign.R.OrderItemTypeDTBOrderItems = append(foreign.R.OrderItemTypeDTBOrderItems, local)
				break
			}
		}
	}

	return nil
}

// SetRoundingType of the dtbOrderItem to the related item.
// Sets o.R.RoundingType to related.
// Adds o to related.R.RoundingTypeDTBOrderItems.
func (o *DTBOrderItem) SetRoundingType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MTBRoundingType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `dtb_order_item` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"rounding_type_id"}),
		strmangle.WhereClause("`", "`", 0, dtbOrderItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RoundingTypeID, related.ID)
	if o.R == nil {
		o.R = &dtbOrderItemR{
			RoundingType: related,
		}
	} else {
		o.R.RoundingType = related
	}

	if related.R == nil {
		related.R = &mtbRoundingTypeR{
			RoundingTypeDTBOrderItems: DTBOrderItemSlice{o},
		}
	} else {
		related.R.RoundingTypeDTBOrderItems = append(related.R.RoundingTypeDTBOrderItems, o)
	}

	return nil
}

// RemoveRoundingType relationship.
// Sets o.R.RoundingType to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *DTBOrderItem) RemoveRoundingType(ctx context.Context, exec boil.ContextExecutor, related *MTBRoundingType) error {
	var err error

	queries.SetScanner(&o.RoundingTypeID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("rounding_type_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.RoundingType = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RoundingTypeDTBOrderItems {
		if queries.Equal(o.RoundingTypeID, ri.RoundingTypeID) {
			continue
		}

		ln := len(related.R.RoundingTypeDTBOrderItems)
		if ln > 1 && i < ln-1 {
			related.R.RoundingTypeDTBOrderItems[i] = related.R.RoundingTypeDTBOrderItems[ln-1]
		}
		related.R.RoundingTypeDTBOrderItems = related.R.RoundingTypeDTBOrderItems[:ln-1]
		break
	}
	return nil
}

// SetProductClass of the dtbOrderItem to the related item.
// Sets o.R.ProductClass to related.
// Adds o to related.R.ProductClassDTBOrderItems.
func (o *DTBOrderItem) SetProductClass(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DTBProductClass) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `dtb_order_item` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"product_class_id"}),
		strmangle.WhereClause("`", "`", 0, dtbOrderItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductClassID, related.ID)
	if o.R == nil {
		o.R = &dtbOrderItemR{
			ProductClass: related,
		}
	} else {
		o.R.ProductClass = related
	}

	if related.R == nil {
		related.R = &dtbProductClassR{
			ProductClassDTBOrderItems: DTBOrderItemSlice{o},
		}
	} else {
		related.R.ProductClassDTBOrderItems = append(related.R.ProductClassDTBOrderItems, o)
	}

	return nil
}

// RemoveProductClass relationship.
// Sets o.R.ProductClass to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *DTBOrderItem) RemoveProductClass(ctx context.Context, exec boil.ContextExecutor, related *DTBProductClass) error {
	var err error

	queries.SetScanner(&o.ProductClassID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("product_class_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.ProductClass = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ProductClassDTBOrderItems {
		if queries.Equal(o.ProductClassID, ri.ProductClassID) {
			continue
		}

		ln := len(related.R.ProductClassDTBOrderItems)
		if ln > 1 && i < ln-1 {
			related.R.ProductClassDTBOrderItems[i] = related.R.ProductClassDTBOrderItems[ln-1]
		}
		related.R.ProductClassDTBOrderItems = related.R.ProductClassDTBOrderItems[:ln-1]
		break
	}
	return nil
}

// SetProduct of the dtbOrderItem to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.ProductDTBOrderItems.
func (o *DTBOrderItem) SetProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DTBProduct) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `dtb_order_item` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"product_id"}),
		strmangle.WhereClause("`", "`", 0, dtbOrderItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductID, related.ID)
	if o.R == nil {
		o.R = &dtbOrderItemR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &dtbProductR{
			ProductDTBOrderItems: DTBOrderItemSlice{o},
		}
	} else {
		related.R.ProductDTBOrderItems = append(related.R.ProductDTBOrderItems, o)
	}

	return nil
}

// RemoveProduct relationship.
// Sets o.R.Product to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *DTBOrderItem) RemoveProduct(ctx context.Context, exec boil.ContextExecutor, related *DTBProduct) error {
	var err error

	queries.SetScanner(&o.ProductID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("product_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Product = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ProductDTBOrderItems {
		if queries.Equal(o.ProductID, ri.ProductID) {
			continue
		}

		ln := len(related.R.ProductDTBOrderItems)
		if ln > 1 && i < ln-1 {
			related.R.ProductDTBOrderItems[i] = related.R.ProductDTBOrderItems[ln-1]
		}
		related.R.ProductDTBOrderItems = related.R.ProductDTBOrderItems[:ln-1]
		break
	}
	return nil
}

// SetShipping of the dtbOrderItem to the related item.
// Sets o.R.Shipping to related.
// Adds o to related.R.ShippingDTBOrderItems.
func (o *DTBOrderItem) SetShipping(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DTBShipping) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `dtb_order_item` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"shipping_id"}),
		strmangle.WhereClause("`", "`", 0, dtbOrderItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ShippingID, related.ID)
	if o.R == nil {
		o.R = &dtbOrderItemR{
			Shipping: related,
		}
	} else {
		o.R.Shipping = related
	}

	if related.R == nil {
		related.R = &dtbShippingR{
			ShippingDTBOrderItems: DTBOrderItemSlice{o},
		}
	} else {
		related.R.ShippingDTBOrderItems = append(related.R.ShippingDTBOrderItems, o)
	}

	return nil
}

// RemoveShipping relationship.
// Sets o.R.Shipping to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *DTBOrderItem) RemoveShipping(ctx context.Context, exec boil.ContextExecutor, related *DTBShipping) error {
	var err error

	queries.SetScanner(&o.ShippingID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("shipping_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Shipping = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ShippingDTBOrderItems {
		if queries.Equal(o.ShippingID, ri.ShippingID) {
			continue
		}

		ln := len(related.R.ShippingDTBOrderItems)
		if ln > 1 && i < ln-1 {
			related.R.ShippingDTBOrderItems[i] = related.R.ShippingDTBOrderItems[ln-1]
		}
		related.R.ShippingDTBOrderItems = related.R.ShippingDTBOrderItems[:ln-1]
		break
	}
	return nil
}

// SetTaxType of the dtbOrderItem to the related item.
// Sets o.R.TaxType to related.
// Adds o to related.R.TaxTypeDTBOrderItems.
func (o *DTBOrderItem) SetTaxType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MTBTaxType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `dtb_order_item` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"tax_type_id"}),
		strmangle.WhereClause("`", "`", 0, dtbOrderItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TaxTypeID, related.ID)
	if o.R == nil {
		o.R = &dtbOrderItemR{
			TaxType: related,
		}
	} else {
		o.R.TaxType = related
	}

	if related.R == nil {
		related.R = &mtbTaxTypeR{
			TaxTypeDTBOrderItems: DTBOrderItemSlice{o},
		}
	} else {
		related.R.TaxTypeDTBOrderItems = append(related.R.TaxTypeDTBOrderItems, o)
	}

	return nil
}

// RemoveTaxType relationship.
// Sets o.R.TaxType to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *DTBOrderItem) RemoveTaxType(ctx context.Context, exec boil.ContextExecutor, related *MTBTaxType) error {
	var err error

	queries.SetScanner(&o.TaxTypeID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("tax_type_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.TaxType = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.TaxTypeDTBOrderItems {
		if queries.Equal(o.TaxTypeID, ri.TaxTypeID) {
			continue
		}

		ln := len(related.R.TaxTypeDTBOrderItems)
		if ln > 1 && i < ln-1 {
			related.R.TaxTypeDTBOrderItems[i] = related.R.TaxTypeDTBOrderItems[ln-1]
		}
		related.R.TaxTypeDTBOrderItems = related.R.TaxTypeDTBOrderItems[:ln-1]
		break
	}
	return nil
}

// SetOrder of the dtbOrderItem to the related item.
// Sets o.R.Order to related.
// Adds o to related.R.OrderDTBOrderItems.
func (o *DTBOrderItem) SetOrder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DTBOrder) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `dtb_order_item` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"order_id"}),
		strmangle.WhereClause("`", "`", 0, dtbOrderItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OrderID, related.ID)
	if o.R == nil {
		o.R = &dtbOrderItemR{
			Order: related,
		}
	} else {
		o.R.Order = related
	}

	if related.R == nil {
		related.R = &dtbOrderR{
			OrderDTBOrderItems: DTBOrderItemSlice{o},
		}
	} else {
		related.R.OrderDTBOrderItems = append(related.R.OrderDTBOrderItems, o)
	}

	return nil
}

// RemoveOrder relationship.
// Sets o.R.Order to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *DTBOrderItem) RemoveOrder(ctx context.Context, exec boil.ContextExecutor, related *DTBOrder) error {
	var err error

	queries.SetScanner(&o.OrderID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("order_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Order = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OrderDTBOrderItems {
		if queries.Equal(o.OrderID, ri.OrderID) {
			continue
		}

		ln := len(related.R.OrderDTBOrderItems)
		if ln > 1 && i < ln-1 {
			related.R.OrderDTBOrderItems[i] = related.R.OrderDTBOrderItems[ln-1]
		}
		related.R.OrderDTBOrderItems = related.R.OrderDTBOrderItems[:ln-1]
		break
	}
	return nil
}

// SetTaxDisplayType of the dtbOrderItem to the related item.
// Sets o.R.TaxDisplayType to related.
// Adds o to related.R.TaxDisplayTypeDTBOrderItems.
func (o *DTBOrderItem) SetTaxDisplayType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MTBTaxDisplayType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `dtb_order_item` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"tax_display_type_id"}),
		strmangle.WhereClause("`", "`", 0, dtbOrderItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TaxDisplayTypeID, related.ID)
	if o.R == nil {
		o.R = &dtbOrderItemR{
			TaxDisplayType: related,
		}
	} else {
		o.R.TaxDisplayType = related
	}

	if related.R == nil {
		related.R = &mtbTaxDisplayTypeR{
			TaxDisplayTypeDTBOrderItems: DTBOrderItemSlice{o},
		}
	} else {
		related.R.TaxDisplayTypeDTBOrderItems = append(related.R.TaxDisplayTypeDTBOrderItems, o)
	}

	return nil
}

// RemoveTaxDisplayType relationship.
// Sets o.R.TaxDisplayType to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *DTBOrderItem) RemoveTaxDisplayType(ctx context.Context, exec boil.ContextExecutor, related *MTBTaxDisplayType) error {
	var err error

	queries.SetScanner(&o.TaxDisplayTypeID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("tax_display_type_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.TaxDisplayType = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.TaxDisplayTypeDTBOrderItems {
		if queries.Equal(o.TaxDisplayTypeID, ri.TaxDisplayTypeID) {
			continue
		}

		ln := len(related.R.TaxDisplayTypeDTBOrderItems)
		if ln > 1 && i < ln-1 {
			related.R.TaxDisplayTypeDTBOrderItems[i] = related.R.TaxDisplayTypeDTBOrderItems[ln-1]
		}
		related.R.TaxDisplayTypeDTBOrderItems = related.R.TaxDisplayTypeDTBOrderItems[:ln-1]
		break
	}
	return nil
}

// SetOrderItemType of the dtbOrderItem to the related item.
// Sets o.R.OrderItemType to related.
// Adds o to related.R.OrderItemTypeDTBOrderItems.
func (o *DTBOrderItem) SetOrderItemType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MTBOrderItemType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `dtb_order_item` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"order_item_type_id"}),
		strmangle.WhereClause("`", "`", 0, dtbOrderItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OrderItemTypeID, related.ID)
	if o.R == nil {
		o.R = &dtbOrderItemR{
			OrderItemType: related,
		}
	} else {
		o.R.OrderItemType = related
	}

	if related.R == nil {
		related.R = &mtbOrderItemTypeR{
			OrderItemTypeDTBOrderItems: DTBOrderItemSlice{o},
		}
	} else {
		related.R.OrderItemTypeDTBOrderItems = append(related.R.OrderItemTypeDTBOrderItems, o)
	}

	return nil
}

// RemoveOrderItemType relationship.
// Sets o.R.OrderItemType to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *DTBOrderItem) RemoveOrderItemType(ctx context.Context, exec boil.ContextExecutor, related *MTBOrderItemType) error {
	var err error

	queries.SetScanner(&o.OrderItemTypeID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("order_item_type_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.OrderItemType = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OrderItemTypeDTBOrderItems {
		if queries.Equal(o.OrderItemTypeID, ri.OrderItemTypeID) {
			continue
		}

		ln := len(related.R.OrderItemTypeDTBOrderItems)
		if ln > 1 && i < ln-1 {
			related.R.OrderItemTypeDTBOrderItems[i] = related.R.OrderItemTypeDTBOrderItems[ln-1]
		}
		related.R.OrderItemTypeDTBOrderItems = related.R.OrderItemTypeDTBOrderItems[:ln-1]
		break
	}
	return nil
}

// DTBOrderItems retrieves all the records using an executor.
func DTBOrderItems(mods ...qm.QueryMod) dtbOrderItemQuery {
	mods = append(mods, qm.From("`dtb_order_item`"))
	return dtbOrderItemQuery{NewQuery(mods...)}
}

// FindDTBOrderItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDTBOrderItem(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*DTBOrderItem, error) {
	dtbOrderItemObj := &DTBOrderItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `dtb_order_item` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, dtbOrderItemObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from dtb_order_item")
	}

	return dtbOrderItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DTBOrderItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no dtb_order_item provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dtbOrderItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dtbOrderItemInsertCacheMut.RLock()
	cache, cached := dtbOrderItemInsertCache[key]
	dtbOrderItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dtbOrderItemColumns,
			dtbOrderItemColumnsWithDefault,
			dtbOrderItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dtbOrderItemType, dtbOrderItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dtbOrderItemType, dtbOrderItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `dtb_order_item` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `dtb_order_item` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `dtb_order_item` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dtbOrderItemPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into dtb_order_item")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == dtbOrderItemMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for dtb_order_item")
	}

CacheNoHooks:
	if !cached {
		dtbOrderItemInsertCacheMut.Lock()
		dtbOrderItemInsertCache[key] = cache
		dtbOrderItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DTBOrderItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DTBOrderItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dtbOrderItemUpdateCacheMut.RLock()
	cache, cached := dtbOrderItemUpdateCache[key]
	dtbOrderItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dtbOrderItemColumns,
			dtbOrderItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update dtb_order_item, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `dtb_order_item` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dtbOrderItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dtbOrderItemType, dtbOrderItemMapping, append(wl, dtbOrderItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update dtb_order_item row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for dtb_order_item")
	}

	if !cached {
		dtbOrderItemUpdateCacheMut.Lock()
		dtbOrderItemUpdateCache[key] = cache
		dtbOrderItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dtbOrderItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for dtb_order_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for dtb_order_item")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DTBOrderItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbOrderItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `dtb_order_item` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbOrderItemPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in dtbOrderItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all dtbOrderItem")
	}
	return rowsAff, nil
}

var mySQLDTBOrderItemUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DTBOrderItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no dtb_order_item provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dtbOrderItemColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDTBOrderItemUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dtbOrderItemUpsertCacheMut.RLock()
	cache, cached := dtbOrderItemUpsertCache[key]
	dtbOrderItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dtbOrderItemColumns,
			dtbOrderItemColumnsWithDefault,
			dtbOrderItemColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			dtbOrderItemColumns,
			dtbOrderItemPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("model: unable to upsert dtb_order_item, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "dtb_order_item", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `dtb_order_item` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dtbOrderItemType, dtbOrderItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dtbOrderItemType, dtbOrderItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for dtb_order_item")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == dtbOrderItemMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dtbOrderItemType, dtbOrderItemMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for dtb_order_item")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for dtb_order_item")
	}

CacheNoHooks:
	if !cached {
		dtbOrderItemUpsertCacheMut.Lock()
		dtbOrderItemUpsertCache[key] = cache
		dtbOrderItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DTBOrderItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DTBOrderItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no DTBOrderItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dtbOrderItemPrimaryKeyMapping)
	sql := "DELETE FROM `dtb_order_item` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from dtb_order_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for dtb_order_item")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dtbOrderItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no dtbOrderItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from dtb_order_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for dtb_order_item")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DTBOrderItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no DTBOrderItem slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(dtbOrderItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbOrderItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `dtb_order_item` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbOrderItemPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from dtbOrderItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for dtb_order_item")
	}

	if len(dtbOrderItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DTBOrderItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDTBOrderItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DTBOrderItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DTBOrderItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbOrderItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `dtb_order_item`.* FROM `dtb_order_item` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbOrderItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in DTBOrderItemSlice")
	}

	*o = slice

	return nil
}

// DTBOrderItemExists checks if the DTBOrderItem row exists.
func DTBOrderItemExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `dtb_order_item` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if dtb_order_item exists")
	}

	return exists, nil
}
