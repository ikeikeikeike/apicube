// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDTBProducts(t *testing.T) {
	t.Parallel()

	query := DTBProducts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDTBProductsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProduct{}
	if err = randomize.Struct(seed, o, dtbProductDBTypes, true, dtbProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBProductsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProduct{}
	if err = randomize.Struct(seed, o, dtbProductDBTypes, true, dtbProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DTBProducts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBProductsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProduct{}
	if err = randomize.Struct(seed, o, dtbProductDBTypes, true, dtbProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBProductSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBProductsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProduct{}
	if err = randomize.Struct(seed, o, dtbProductDBTypes, true, dtbProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DTBProductExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DTBProduct exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DTBProductExists to return true, but got false.")
	}
}

func testDTBProductsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProduct{}
	if err = randomize.Struct(seed, o, dtbProductDBTypes, true, dtbProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dtbProductFound, err := FindDTBProduct(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if dtbProductFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDTBProductsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProduct{}
	if err = randomize.Struct(seed, o, dtbProductDBTypes, true, dtbProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DTBProducts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDTBProductsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProduct{}
	if err = randomize.Struct(seed, o, dtbProductDBTypes, true, dtbProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DTBProducts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDTBProductsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtbProductOne := &DTBProduct{}
	dtbProductTwo := &DTBProduct{}
	if err = randomize.Struct(seed, dtbProductOne, dtbProductDBTypes, false, dtbProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProduct struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbProductTwo, dtbProductDBTypes, false, dtbProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbProductOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbProductTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBProducts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDTBProductsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dtbProductOne := &DTBProduct{}
	dtbProductTwo := &DTBProduct{}
	if err = randomize.Struct(seed, dtbProductOne, dtbProductDBTypes, false, dtbProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProduct struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbProductTwo, dtbProductDBTypes, false, dtbProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbProductOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbProductTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dtbProductBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBProduct) error {
	*o = DTBProduct{}
	return nil
}

func dtbProductAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBProduct) error {
	*o = DTBProduct{}
	return nil
}

func dtbProductAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DTBProduct) error {
	*o = DTBProduct{}
	return nil
}

func dtbProductBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBProduct) error {
	*o = DTBProduct{}
	return nil
}

func dtbProductAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBProduct) error {
	*o = DTBProduct{}
	return nil
}

func dtbProductBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBProduct) error {
	*o = DTBProduct{}
	return nil
}

func dtbProductAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBProduct) error {
	*o = DTBProduct{}
	return nil
}

func dtbProductBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBProduct) error {
	*o = DTBProduct{}
	return nil
}

func dtbProductAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBProduct) error {
	*o = DTBProduct{}
	return nil
}

func testDTBProductsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DTBProduct{}
	o := &DTBProduct{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dtbProductDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBProduct object: %s", err)
	}

	AddDTBProductHook(boil.BeforeInsertHook, dtbProductBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dtbProductBeforeInsertHooks = []DTBProductHook{}

	AddDTBProductHook(boil.AfterInsertHook, dtbProductAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dtbProductAfterInsertHooks = []DTBProductHook{}

	AddDTBProductHook(boil.AfterSelectHook, dtbProductAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dtbProductAfterSelectHooks = []DTBProductHook{}

	AddDTBProductHook(boil.BeforeUpdateHook, dtbProductBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dtbProductBeforeUpdateHooks = []DTBProductHook{}

	AddDTBProductHook(boil.AfterUpdateHook, dtbProductAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dtbProductAfterUpdateHooks = []DTBProductHook{}

	AddDTBProductHook(boil.BeforeDeleteHook, dtbProductBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dtbProductBeforeDeleteHooks = []DTBProductHook{}

	AddDTBProductHook(boil.AfterDeleteHook, dtbProductAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dtbProductAfterDeleteHooks = []DTBProductHook{}

	AddDTBProductHook(boil.BeforeUpsertHook, dtbProductBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dtbProductBeforeUpsertHooks = []DTBProductHook{}

	AddDTBProductHook(boil.AfterUpsertHook, dtbProductAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dtbProductAfterUpsertHooks = []DTBProductHook{}
}

func testDTBProductsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProduct{}
	if err = randomize.Struct(seed, o, dtbProductDBTypes, true, dtbProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBProductsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProduct{}
	if err = randomize.Struct(seed, o, dtbProductDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DTBProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dtbProductColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DTBProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBProductToManyProductDTBProductCategories(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBProduct
	var b, c DTBProductCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbProductDBTypes, true, dtbProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProduct struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbProductCategoryDBTypes, false, dtbProductCategoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbProductCategoryDBTypes, false, dtbProductCategoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ProductID = a.ID
	c.ProductID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ProductDTBProductCategories().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ProductID == b.ProductID {
			bFound = true
		}
		if v.ProductID == c.ProductID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBProductSlice{&a}
	if err = a.L.LoadProductDTBProductCategories(ctx, tx, false, (*[]*DTBProduct)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductDTBProductCategories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ProductDTBProductCategories = nil
	if err = a.L.LoadProductDTBProductCategories(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductDTBProductCategories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBProductToManyProductDTBProductClasses(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBProduct
	var b, c DTBProductClass

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbProductDBTypes, true, dtbProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProduct struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbProductClassDBTypes, false, dtbProductClassColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbProductClassDBTypes, false, dtbProductClassColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ProductID, a.ID)
	queries.Assign(&c.ProductID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ProductDTBProductClasses().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ProductID, b.ProductID) {
			bFound = true
		}
		if queries.Equal(v.ProductID, c.ProductID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBProductSlice{&a}
	if err = a.L.LoadProductDTBProductClasses(ctx, tx, false, (*[]*DTBProduct)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductDTBProductClasses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ProductDTBProductClasses = nil
	if err = a.L.LoadProductDTBProductClasses(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductDTBProductClasses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBProductToManyProductDTBProductImages(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBProduct
	var b, c DTBProductImage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbProductDBTypes, true, dtbProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProduct struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbProductImageDBTypes, false, dtbProductImageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbProductImageDBTypes, false, dtbProductImageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ProductID, a.ID)
	queries.Assign(&c.ProductID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ProductDTBProductImages().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ProductID, b.ProductID) {
			bFound = true
		}
		if queries.Equal(v.ProductID, c.ProductID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBProductSlice{&a}
	if err = a.L.LoadProductDTBProductImages(ctx, tx, false, (*[]*DTBProduct)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductDTBProductImages); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ProductDTBProductImages = nil
	if err = a.L.LoadProductDTBProductImages(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductDTBProductImages); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBProductToManyProductDTBProductTags(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBProduct
	var b, c DTBProductTag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbProductDBTypes, true, dtbProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProduct struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbProductTagDBTypes, false, dtbProductTagColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbProductTagDBTypes, false, dtbProductTagColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ProductID, a.ID)
	queries.Assign(&c.ProductID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ProductDTBProductTags().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ProductID, b.ProductID) {
			bFound = true
		}
		if queries.Equal(v.ProductID, c.ProductID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBProductSlice{&a}
	if err = a.L.LoadProductDTBProductTags(ctx, tx, false, (*[]*DTBProduct)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductDTBProductTags); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ProductDTBProductTags = nil
	if err = a.L.LoadProductDTBProductTags(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductDTBProductTags); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBProductToManyAddOpProductDTBProductCategories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBProduct
	var b, c, d, e DTBProductCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbProductDBTypes, false, strmangle.SetComplement(dtbProductPrimaryKeyColumns, dtbProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBProductCategory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbProductCategoryDBTypes, false, strmangle.SetComplement(dtbProductCategoryPrimaryKeyColumns, dtbProductCategoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBProductCategory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProductDTBProductCategories(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ProductID {
			t.Error("foreign key was wrong value", a.ID, first.ProductID)
		}
		if a.ID != second.ProductID {
			t.Error("foreign key was wrong value", a.ID, second.ProductID)
		}

		if first.R.Product != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Product != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ProductDTBProductCategories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ProductDTBProductCategories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ProductDTBProductCategories().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testDTBProductToManyAddOpProductDTBProductClasses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBProduct
	var b, c, d, e DTBProductClass

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbProductDBTypes, false, strmangle.SetComplement(dtbProductPrimaryKeyColumns, dtbProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBProductClass{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbProductClassDBTypes, false, strmangle.SetComplement(dtbProductClassPrimaryKeyColumns, dtbProductClassColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBProductClass{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProductDTBProductClasses(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ProductID) {
			t.Error("foreign key was wrong value", a.ID, first.ProductID)
		}
		if !queries.Equal(a.ID, second.ProductID) {
			t.Error("foreign key was wrong value", a.ID, second.ProductID)
		}

		if first.R.Product != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Product != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ProductDTBProductClasses[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ProductDTBProductClasses[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ProductDTBProductClasses().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDTBProductToManySetOpProductDTBProductClasses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBProduct
	var b, c, d, e DTBProductClass

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbProductDBTypes, false, strmangle.SetComplement(dtbProductPrimaryKeyColumns, dtbProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBProductClass{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbProductClassDBTypes, false, strmangle.SetComplement(dtbProductClassPrimaryKeyColumns, dtbProductClassColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetProductDTBProductClasses(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductDTBProductClasses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetProductDTBProductClasses(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductDTBProductClasses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ProductID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ProductID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ProductID) {
		t.Error("foreign key was wrong value", a.ID, d.ProductID)
	}
	if !queries.Equal(a.ID, e.ProductID) {
		t.Error("foreign key was wrong value", a.ID, e.ProductID)
	}

	if b.R.Product != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Product != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Product != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Product != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ProductDTBProductClasses[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ProductDTBProductClasses[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDTBProductToManyRemoveOpProductDTBProductClasses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBProduct
	var b, c, d, e DTBProductClass

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbProductDBTypes, false, strmangle.SetComplement(dtbProductPrimaryKeyColumns, dtbProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBProductClass{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbProductClassDBTypes, false, strmangle.SetComplement(dtbProductClassPrimaryKeyColumns, dtbProductClassColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddProductDTBProductClasses(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductDTBProductClasses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveProductDTBProductClasses(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductDTBProductClasses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ProductID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ProductID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Product != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Product != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Product != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Product != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ProductDTBProductClasses) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ProductDTBProductClasses[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ProductDTBProductClasses[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDTBProductToManyAddOpProductDTBProductImages(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBProduct
	var b, c, d, e DTBProductImage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbProductDBTypes, false, strmangle.SetComplement(dtbProductPrimaryKeyColumns, dtbProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBProductImage{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbProductImageDBTypes, false, strmangle.SetComplement(dtbProductImagePrimaryKeyColumns, dtbProductImageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBProductImage{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProductDTBProductImages(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ProductID) {
			t.Error("foreign key was wrong value", a.ID, first.ProductID)
		}
		if !queries.Equal(a.ID, second.ProductID) {
			t.Error("foreign key was wrong value", a.ID, second.ProductID)
		}

		if first.R.Product != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Product != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ProductDTBProductImages[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ProductDTBProductImages[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ProductDTBProductImages().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDTBProductToManySetOpProductDTBProductImages(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBProduct
	var b, c, d, e DTBProductImage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbProductDBTypes, false, strmangle.SetComplement(dtbProductPrimaryKeyColumns, dtbProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBProductImage{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbProductImageDBTypes, false, strmangle.SetComplement(dtbProductImagePrimaryKeyColumns, dtbProductImageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetProductDTBProductImages(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductDTBProductImages().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetProductDTBProductImages(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductDTBProductImages().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ProductID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ProductID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ProductID) {
		t.Error("foreign key was wrong value", a.ID, d.ProductID)
	}
	if !queries.Equal(a.ID, e.ProductID) {
		t.Error("foreign key was wrong value", a.ID, e.ProductID)
	}

	if b.R.Product != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Product != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Product != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Product != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ProductDTBProductImages[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ProductDTBProductImages[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDTBProductToManyRemoveOpProductDTBProductImages(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBProduct
	var b, c, d, e DTBProductImage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbProductDBTypes, false, strmangle.SetComplement(dtbProductPrimaryKeyColumns, dtbProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBProductImage{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbProductImageDBTypes, false, strmangle.SetComplement(dtbProductImagePrimaryKeyColumns, dtbProductImageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddProductDTBProductImages(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductDTBProductImages().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveProductDTBProductImages(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductDTBProductImages().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ProductID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ProductID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Product != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Product != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Product != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Product != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ProductDTBProductImages) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ProductDTBProductImages[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ProductDTBProductImages[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDTBProductToManyAddOpProductDTBProductTags(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBProduct
	var b, c, d, e DTBProductTag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbProductDBTypes, false, strmangle.SetComplement(dtbProductPrimaryKeyColumns, dtbProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBProductTag{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbProductTagDBTypes, false, strmangle.SetComplement(dtbProductTagPrimaryKeyColumns, dtbProductTagColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBProductTag{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProductDTBProductTags(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ProductID) {
			t.Error("foreign key was wrong value", a.ID, first.ProductID)
		}
		if !queries.Equal(a.ID, second.ProductID) {
			t.Error("foreign key was wrong value", a.ID, second.ProductID)
		}

		if first.R.Product != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Product != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ProductDTBProductTags[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ProductDTBProductTags[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ProductDTBProductTags().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDTBProductToManySetOpProductDTBProductTags(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBProduct
	var b, c, d, e DTBProductTag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbProductDBTypes, false, strmangle.SetComplement(dtbProductPrimaryKeyColumns, dtbProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBProductTag{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbProductTagDBTypes, false, strmangle.SetComplement(dtbProductTagPrimaryKeyColumns, dtbProductTagColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetProductDTBProductTags(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductDTBProductTags().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetProductDTBProductTags(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductDTBProductTags().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ProductID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ProductID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ProductID) {
		t.Error("foreign key was wrong value", a.ID, d.ProductID)
	}
	if !queries.Equal(a.ID, e.ProductID) {
		t.Error("foreign key was wrong value", a.ID, e.ProductID)
	}

	if b.R.Product != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Product != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Product != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Product != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ProductDTBProductTags[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ProductDTBProductTags[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDTBProductToManyRemoveOpProductDTBProductTags(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBProduct
	var b, c, d, e DTBProductTag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbProductDBTypes, false, strmangle.SetComplement(dtbProductPrimaryKeyColumns, dtbProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBProductTag{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbProductTagDBTypes, false, strmangle.SetComplement(dtbProductTagPrimaryKeyColumns, dtbProductTagColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddProductDTBProductTags(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductDTBProductTags().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveProductDTBProductTags(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductDTBProductTags().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ProductID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ProductID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Product != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Product != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Product != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Product != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ProductDTBProductTags) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ProductDTBProductTags[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ProductDTBProductTags[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDTBProductsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProduct{}
	if err = randomize.Struct(seed, o, dtbProductDBTypes, true, dtbProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBProductsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProduct{}
	if err = randomize.Struct(seed, o, dtbProductDBTypes, true, dtbProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBProductSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBProductsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBProduct{}
	if err = randomize.Struct(seed, o, dtbProductDBTypes, true, dtbProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBProducts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dtbProductDBTypes = map[string]string{`ID`: `int`, `CreatorID`: `int`, `ProductStatusID`: `smallint`, `Name`: `varchar`, `Note`: `varchar`, `DescriptionList`: `varchar`, `DescriptionDetail`: `varchar`, `SearchWord`: `varchar`, `FreeArea`: `longtext`, `CreateDate`: `datetime`, `UpdateDate`: `datetime`, `DiscriminatorType`: `varchar`}
	_                 = bytes.MinRead
)

func testDTBProductsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dtbProductPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dtbProductColumns) == len(dtbProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBProduct{}
	if err = randomize.Struct(seed, o, dtbProductDBTypes, true, dtbProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbProductDBTypes, true, dtbProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBProduct struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDTBProductsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dtbProductColumns) == len(dtbProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBProduct{}
	if err = randomize.Struct(seed, o, dtbProductDBTypes, true, dtbProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbProductDBTypes, true, dtbProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBProduct struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dtbProductColumns, dtbProductPrimaryKeyColumns) {
		fields = dtbProductColumns
	} else {
		fields = strmangle.SetComplement(
			dtbProductColumns,
			dtbProductPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DTBProductSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDTBProductsUpsert(t *testing.T) {
	t.Parallel()

	if len(dtbProductColumns) == len(dtbProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDTBProductUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DTBProduct{}
	if err = randomize.Struct(seed, &o, dtbProductDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBProduct: %s", err)
	}

	count, err := DTBProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dtbProductDBTypes, false, dtbProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBProduct struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBProduct: %s", err)
	}

	count, err = DTBProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
