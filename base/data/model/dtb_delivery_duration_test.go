// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDTBDeliveryDurations(t *testing.T) {
	t.Parallel()

	query := DTBDeliveryDurations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDTBDeliveryDurationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBDeliveryDuration{}
	if err = randomize.Struct(seed, o, dtbDeliveryDurationDBTypes, true, dtbDeliveryDurationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryDuration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBDeliveryDurations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBDeliveryDurationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBDeliveryDuration{}
	if err = randomize.Struct(seed, o, dtbDeliveryDurationDBTypes, true, dtbDeliveryDurationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryDuration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DTBDeliveryDurations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBDeliveryDurations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBDeliveryDurationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBDeliveryDuration{}
	if err = randomize.Struct(seed, o, dtbDeliveryDurationDBTypes, true, dtbDeliveryDurationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryDuration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBDeliveryDurationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBDeliveryDurations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBDeliveryDurationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBDeliveryDuration{}
	if err = randomize.Struct(seed, o, dtbDeliveryDurationDBTypes, true, dtbDeliveryDurationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryDuration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DTBDeliveryDurationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DTBDeliveryDuration exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DTBDeliveryDurationExists to return true, but got false.")
	}
}

func testDTBDeliveryDurationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBDeliveryDuration{}
	if err = randomize.Struct(seed, o, dtbDeliveryDurationDBTypes, true, dtbDeliveryDurationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryDuration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dtbDeliveryDurationFound, err := FindDTBDeliveryDuration(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if dtbDeliveryDurationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDTBDeliveryDurationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBDeliveryDuration{}
	if err = randomize.Struct(seed, o, dtbDeliveryDurationDBTypes, true, dtbDeliveryDurationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryDuration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DTBDeliveryDurations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDTBDeliveryDurationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBDeliveryDuration{}
	if err = randomize.Struct(seed, o, dtbDeliveryDurationDBTypes, true, dtbDeliveryDurationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryDuration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DTBDeliveryDurations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDTBDeliveryDurationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtbDeliveryDurationOne := &DTBDeliveryDuration{}
	dtbDeliveryDurationTwo := &DTBDeliveryDuration{}
	if err = randomize.Struct(seed, dtbDeliveryDurationOne, dtbDeliveryDurationDBTypes, false, dtbDeliveryDurationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryDuration struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbDeliveryDurationTwo, dtbDeliveryDurationDBTypes, false, dtbDeliveryDurationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryDuration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbDeliveryDurationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbDeliveryDurationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBDeliveryDurations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDTBDeliveryDurationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dtbDeliveryDurationOne := &DTBDeliveryDuration{}
	dtbDeliveryDurationTwo := &DTBDeliveryDuration{}
	if err = randomize.Struct(seed, dtbDeliveryDurationOne, dtbDeliveryDurationDBTypes, false, dtbDeliveryDurationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryDuration struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbDeliveryDurationTwo, dtbDeliveryDurationDBTypes, false, dtbDeliveryDurationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryDuration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbDeliveryDurationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbDeliveryDurationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBDeliveryDurations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dtbDeliveryDurationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBDeliveryDuration) error {
	*o = DTBDeliveryDuration{}
	return nil
}

func dtbDeliveryDurationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBDeliveryDuration) error {
	*o = DTBDeliveryDuration{}
	return nil
}

func dtbDeliveryDurationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DTBDeliveryDuration) error {
	*o = DTBDeliveryDuration{}
	return nil
}

func dtbDeliveryDurationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBDeliveryDuration) error {
	*o = DTBDeliveryDuration{}
	return nil
}

func dtbDeliveryDurationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBDeliveryDuration) error {
	*o = DTBDeliveryDuration{}
	return nil
}

func dtbDeliveryDurationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBDeliveryDuration) error {
	*o = DTBDeliveryDuration{}
	return nil
}

func dtbDeliveryDurationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBDeliveryDuration) error {
	*o = DTBDeliveryDuration{}
	return nil
}

func dtbDeliveryDurationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBDeliveryDuration) error {
	*o = DTBDeliveryDuration{}
	return nil
}

func dtbDeliveryDurationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBDeliveryDuration) error {
	*o = DTBDeliveryDuration{}
	return nil
}

func testDTBDeliveryDurationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DTBDeliveryDuration{}
	o := &DTBDeliveryDuration{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dtbDeliveryDurationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryDuration object: %s", err)
	}

	AddDTBDeliveryDurationHook(boil.BeforeInsertHook, dtbDeliveryDurationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dtbDeliveryDurationBeforeInsertHooks = []DTBDeliveryDurationHook{}

	AddDTBDeliveryDurationHook(boil.AfterInsertHook, dtbDeliveryDurationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dtbDeliveryDurationAfterInsertHooks = []DTBDeliveryDurationHook{}

	AddDTBDeliveryDurationHook(boil.AfterSelectHook, dtbDeliveryDurationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dtbDeliveryDurationAfterSelectHooks = []DTBDeliveryDurationHook{}

	AddDTBDeliveryDurationHook(boil.BeforeUpdateHook, dtbDeliveryDurationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dtbDeliveryDurationBeforeUpdateHooks = []DTBDeliveryDurationHook{}

	AddDTBDeliveryDurationHook(boil.AfterUpdateHook, dtbDeliveryDurationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dtbDeliveryDurationAfterUpdateHooks = []DTBDeliveryDurationHook{}

	AddDTBDeliveryDurationHook(boil.BeforeDeleteHook, dtbDeliveryDurationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dtbDeliveryDurationBeforeDeleteHooks = []DTBDeliveryDurationHook{}

	AddDTBDeliveryDurationHook(boil.AfterDeleteHook, dtbDeliveryDurationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dtbDeliveryDurationAfterDeleteHooks = []DTBDeliveryDurationHook{}

	AddDTBDeliveryDurationHook(boil.BeforeUpsertHook, dtbDeliveryDurationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dtbDeliveryDurationBeforeUpsertHooks = []DTBDeliveryDurationHook{}

	AddDTBDeliveryDurationHook(boil.AfterUpsertHook, dtbDeliveryDurationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dtbDeliveryDurationAfterUpsertHooks = []DTBDeliveryDurationHook{}
}

func testDTBDeliveryDurationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBDeliveryDuration{}
	if err = randomize.Struct(seed, o, dtbDeliveryDurationDBTypes, true, dtbDeliveryDurationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryDuration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBDeliveryDurations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBDeliveryDurationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBDeliveryDuration{}
	if err = randomize.Struct(seed, o, dtbDeliveryDurationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryDuration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dtbDeliveryDurationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DTBDeliveryDurations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBDeliveryDurationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBDeliveryDuration{}
	if err = randomize.Struct(seed, o, dtbDeliveryDurationDBTypes, true, dtbDeliveryDurationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryDuration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBDeliveryDurationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBDeliveryDuration{}
	if err = randomize.Struct(seed, o, dtbDeliveryDurationDBTypes, true, dtbDeliveryDurationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryDuration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBDeliveryDurationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBDeliveryDurationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBDeliveryDuration{}
	if err = randomize.Struct(seed, o, dtbDeliveryDurationDBTypes, true, dtbDeliveryDurationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryDuration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBDeliveryDurations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dtbDeliveryDurationDBTypes = map[string]string{`ID`: `int`, `Name`: `varchar`, `Duration`: `smallint`, `SortNo`: `int`, `DiscriminatorType`: `varchar`}
	_                          = bytes.MinRead
)

func testDTBDeliveryDurationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dtbDeliveryDurationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dtbDeliveryDurationColumns) == len(dtbDeliveryDurationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBDeliveryDuration{}
	if err = randomize.Struct(seed, o, dtbDeliveryDurationDBTypes, true, dtbDeliveryDurationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryDuration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBDeliveryDurations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbDeliveryDurationDBTypes, true, dtbDeliveryDurationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryDuration struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDTBDeliveryDurationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dtbDeliveryDurationColumns) == len(dtbDeliveryDurationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBDeliveryDuration{}
	if err = randomize.Struct(seed, o, dtbDeliveryDurationDBTypes, true, dtbDeliveryDurationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryDuration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBDeliveryDurations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbDeliveryDurationDBTypes, true, dtbDeliveryDurationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryDuration struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dtbDeliveryDurationColumns, dtbDeliveryDurationPrimaryKeyColumns) {
		fields = dtbDeliveryDurationColumns
	} else {
		fields = strmangle.SetComplement(
			dtbDeliveryDurationColumns,
			dtbDeliveryDurationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DTBDeliveryDurationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDTBDeliveryDurationsUpsert(t *testing.T) {
	t.Parallel()

	if len(dtbDeliveryDurationColumns) == len(dtbDeliveryDurationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDTBDeliveryDurationUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DTBDeliveryDuration{}
	if err = randomize.Struct(seed, &o, dtbDeliveryDurationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryDuration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBDeliveryDuration: %s", err)
	}

	count, err := DTBDeliveryDurations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dtbDeliveryDurationDBTypes, false, dtbDeliveryDurationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBDeliveryDuration struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBDeliveryDuration: %s", err)
	}

	count, err = DTBDeliveryDurations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
