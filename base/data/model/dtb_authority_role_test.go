// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDTBAuthorityRoles(t *testing.T) {
	t.Parallel()

	query := DTBAuthorityRoles()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDTBAuthorityRolesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBAuthorityRole{}
	if err = randomize.Struct(seed, o, dtbAuthorityRoleDBTypes, true, dtbAuthorityRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBAuthorityRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBAuthorityRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBAuthorityRolesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBAuthorityRole{}
	if err = randomize.Struct(seed, o, dtbAuthorityRoleDBTypes, true, dtbAuthorityRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBAuthorityRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DTBAuthorityRoles().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBAuthorityRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBAuthorityRolesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBAuthorityRole{}
	if err = randomize.Struct(seed, o, dtbAuthorityRoleDBTypes, true, dtbAuthorityRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBAuthorityRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBAuthorityRoleSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBAuthorityRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBAuthorityRolesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBAuthorityRole{}
	if err = randomize.Struct(seed, o, dtbAuthorityRoleDBTypes, true, dtbAuthorityRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBAuthorityRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DTBAuthorityRoleExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DTBAuthorityRole exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DTBAuthorityRoleExists to return true, but got false.")
	}
}

func testDTBAuthorityRolesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBAuthorityRole{}
	if err = randomize.Struct(seed, o, dtbAuthorityRoleDBTypes, true, dtbAuthorityRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBAuthorityRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dtbAuthorityRoleFound, err := FindDTBAuthorityRole(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if dtbAuthorityRoleFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDTBAuthorityRolesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBAuthorityRole{}
	if err = randomize.Struct(seed, o, dtbAuthorityRoleDBTypes, true, dtbAuthorityRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBAuthorityRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DTBAuthorityRoles().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDTBAuthorityRolesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBAuthorityRole{}
	if err = randomize.Struct(seed, o, dtbAuthorityRoleDBTypes, true, dtbAuthorityRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBAuthorityRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DTBAuthorityRoles().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDTBAuthorityRolesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtbAuthorityRoleOne := &DTBAuthorityRole{}
	dtbAuthorityRoleTwo := &DTBAuthorityRole{}
	if err = randomize.Struct(seed, dtbAuthorityRoleOne, dtbAuthorityRoleDBTypes, false, dtbAuthorityRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBAuthorityRole struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbAuthorityRoleTwo, dtbAuthorityRoleDBTypes, false, dtbAuthorityRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBAuthorityRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbAuthorityRoleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbAuthorityRoleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBAuthorityRoles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDTBAuthorityRolesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dtbAuthorityRoleOne := &DTBAuthorityRole{}
	dtbAuthorityRoleTwo := &DTBAuthorityRole{}
	if err = randomize.Struct(seed, dtbAuthorityRoleOne, dtbAuthorityRoleDBTypes, false, dtbAuthorityRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBAuthorityRole struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbAuthorityRoleTwo, dtbAuthorityRoleDBTypes, false, dtbAuthorityRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBAuthorityRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbAuthorityRoleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbAuthorityRoleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBAuthorityRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dtbAuthorityRoleBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBAuthorityRole) error {
	*o = DTBAuthorityRole{}
	return nil
}

func dtbAuthorityRoleAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBAuthorityRole) error {
	*o = DTBAuthorityRole{}
	return nil
}

func dtbAuthorityRoleAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DTBAuthorityRole) error {
	*o = DTBAuthorityRole{}
	return nil
}

func dtbAuthorityRoleBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBAuthorityRole) error {
	*o = DTBAuthorityRole{}
	return nil
}

func dtbAuthorityRoleAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBAuthorityRole) error {
	*o = DTBAuthorityRole{}
	return nil
}

func dtbAuthorityRoleBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBAuthorityRole) error {
	*o = DTBAuthorityRole{}
	return nil
}

func dtbAuthorityRoleAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBAuthorityRole) error {
	*o = DTBAuthorityRole{}
	return nil
}

func dtbAuthorityRoleBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBAuthorityRole) error {
	*o = DTBAuthorityRole{}
	return nil
}

func dtbAuthorityRoleAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBAuthorityRole) error {
	*o = DTBAuthorityRole{}
	return nil
}

func testDTBAuthorityRolesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DTBAuthorityRole{}
	o := &DTBAuthorityRole{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dtbAuthorityRoleDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBAuthorityRole object: %s", err)
	}

	AddDTBAuthorityRoleHook(boil.BeforeInsertHook, dtbAuthorityRoleBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dtbAuthorityRoleBeforeInsertHooks = []DTBAuthorityRoleHook{}

	AddDTBAuthorityRoleHook(boil.AfterInsertHook, dtbAuthorityRoleAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dtbAuthorityRoleAfterInsertHooks = []DTBAuthorityRoleHook{}

	AddDTBAuthorityRoleHook(boil.AfterSelectHook, dtbAuthorityRoleAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dtbAuthorityRoleAfterSelectHooks = []DTBAuthorityRoleHook{}

	AddDTBAuthorityRoleHook(boil.BeforeUpdateHook, dtbAuthorityRoleBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dtbAuthorityRoleBeforeUpdateHooks = []DTBAuthorityRoleHook{}

	AddDTBAuthorityRoleHook(boil.AfterUpdateHook, dtbAuthorityRoleAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dtbAuthorityRoleAfterUpdateHooks = []DTBAuthorityRoleHook{}

	AddDTBAuthorityRoleHook(boil.BeforeDeleteHook, dtbAuthorityRoleBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dtbAuthorityRoleBeforeDeleteHooks = []DTBAuthorityRoleHook{}

	AddDTBAuthorityRoleHook(boil.AfterDeleteHook, dtbAuthorityRoleAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dtbAuthorityRoleAfterDeleteHooks = []DTBAuthorityRoleHook{}

	AddDTBAuthorityRoleHook(boil.BeforeUpsertHook, dtbAuthorityRoleBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dtbAuthorityRoleBeforeUpsertHooks = []DTBAuthorityRoleHook{}

	AddDTBAuthorityRoleHook(boil.AfterUpsertHook, dtbAuthorityRoleAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dtbAuthorityRoleAfterUpsertHooks = []DTBAuthorityRoleHook{}
}

func testDTBAuthorityRolesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBAuthorityRole{}
	if err = randomize.Struct(seed, o, dtbAuthorityRoleDBTypes, true, dtbAuthorityRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBAuthorityRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBAuthorityRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBAuthorityRolesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBAuthorityRole{}
	if err = randomize.Struct(seed, o, dtbAuthorityRoleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DTBAuthorityRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dtbAuthorityRoleColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DTBAuthorityRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBAuthorityRoleToOneMTBAuthorityUsingAuthority(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBAuthorityRole
	var foreign MTBAuthority

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbAuthorityRoleDBTypes, true, dtbAuthorityRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBAuthorityRole struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, mtbAuthorityDBTypes, false, mtbAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBAuthority struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.AuthorityID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Authority().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBAuthorityRoleSlice{&local}
	if err = local.L.LoadAuthority(ctx, tx, false, (*[]*DTBAuthorityRole)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Authority == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Authority = nil
	if err = local.L.LoadAuthority(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Authority == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBAuthorityRoleToOneSetOpMTBAuthorityUsingAuthority(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBAuthorityRole
	var b, c MTBAuthority

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbAuthorityRoleDBTypes, false, strmangle.SetComplement(dtbAuthorityRolePrimaryKeyColumns, dtbAuthorityRoleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbAuthorityDBTypes, false, strmangle.SetComplement(mtbAuthorityPrimaryKeyColumns, mtbAuthorityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mtbAuthorityDBTypes, false, strmangle.SetComplement(mtbAuthorityPrimaryKeyColumns, mtbAuthorityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MTBAuthority{&b, &c} {
		err = a.SetAuthority(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Authority != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AuthorityDTBAuthorityRoles[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.AuthorityID, x.ID) {
			t.Error("foreign key was wrong value", a.AuthorityID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AuthorityID))
		reflect.Indirect(reflect.ValueOf(&a.AuthorityID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.AuthorityID, x.ID) {
			t.Error("foreign key was wrong value", a.AuthorityID, x.ID)
		}
	}
}

func testDTBAuthorityRoleToOneRemoveOpMTBAuthorityUsingAuthority(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBAuthorityRole
	var b MTBAuthority

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbAuthorityRoleDBTypes, false, strmangle.SetComplement(dtbAuthorityRolePrimaryKeyColumns, dtbAuthorityRoleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbAuthorityDBTypes, false, strmangle.SetComplement(mtbAuthorityPrimaryKeyColumns, mtbAuthorityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetAuthority(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveAuthority(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Authority().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Authority != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.AuthorityID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.AuthorityDTBAuthorityRoles) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBAuthorityRolesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBAuthorityRole{}
	if err = randomize.Struct(seed, o, dtbAuthorityRoleDBTypes, true, dtbAuthorityRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBAuthorityRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBAuthorityRolesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBAuthorityRole{}
	if err = randomize.Struct(seed, o, dtbAuthorityRoleDBTypes, true, dtbAuthorityRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBAuthorityRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBAuthorityRoleSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBAuthorityRolesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBAuthorityRole{}
	if err = randomize.Struct(seed, o, dtbAuthorityRoleDBTypes, true, dtbAuthorityRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBAuthorityRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBAuthorityRoles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dtbAuthorityRoleDBTypes = map[string]string{`ID`: `int`, `AuthorityID`: `smallint`, `CreatorID`: `int`, `DenyURL`: `varchar`, `CreateDate`: `datetime`, `UpdateDate`: `datetime`, `DiscriminatorType`: `varchar`}
	_                       = bytes.MinRead
)

func testDTBAuthorityRolesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dtbAuthorityRolePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dtbAuthorityRoleColumns) == len(dtbAuthorityRolePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBAuthorityRole{}
	if err = randomize.Struct(seed, o, dtbAuthorityRoleDBTypes, true, dtbAuthorityRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBAuthorityRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBAuthorityRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbAuthorityRoleDBTypes, true, dtbAuthorityRolePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBAuthorityRole struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDTBAuthorityRolesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dtbAuthorityRoleColumns) == len(dtbAuthorityRolePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBAuthorityRole{}
	if err = randomize.Struct(seed, o, dtbAuthorityRoleDBTypes, true, dtbAuthorityRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBAuthorityRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBAuthorityRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbAuthorityRoleDBTypes, true, dtbAuthorityRolePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBAuthorityRole struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dtbAuthorityRoleColumns, dtbAuthorityRolePrimaryKeyColumns) {
		fields = dtbAuthorityRoleColumns
	} else {
		fields = strmangle.SetComplement(
			dtbAuthorityRoleColumns,
			dtbAuthorityRolePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DTBAuthorityRoleSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDTBAuthorityRolesUpsert(t *testing.T) {
	t.Parallel()

	if len(dtbAuthorityRoleColumns) == len(dtbAuthorityRolePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDTBAuthorityRoleUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DTBAuthorityRole{}
	if err = randomize.Struct(seed, &o, dtbAuthorityRoleDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBAuthorityRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBAuthorityRole: %s", err)
	}

	count, err := DTBAuthorityRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dtbAuthorityRoleDBTypes, false, dtbAuthorityRolePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBAuthorityRole struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBAuthorityRole: %s", err)
	}

	count, err = DTBAuthorityRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
