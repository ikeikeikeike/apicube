// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMigrationVersions(t *testing.T) {
	t.Parallel()

	query := MigrationVersions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMigrationVersionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MigrationVersion{}
	if err = randomize.Struct(seed, o, migrationVersionDBTypes, true, migrationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MigrationVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MigrationVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMigrationVersionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MigrationVersion{}
	if err = randomize.Struct(seed, o, migrationVersionDBTypes, true, migrationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MigrationVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MigrationVersions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MigrationVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMigrationVersionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MigrationVersion{}
	if err = randomize.Struct(seed, o, migrationVersionDBTypes, true, migrationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MigrationVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MigrationVersionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MigrationVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMigrationVersionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MigrationVersion{}
	if err = randomize.Struct(seed, o, migrationVersionDBTypes, true, migrationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MigrationVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MigrationVersionExists(ctx, tx, o.Version)
	if err != nil {
		t.Errorf("Unable to check if MigrationVersion exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MigrationVersionExists to return true, but got false.")
	}
}

func testMigrationVersionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MigrationVersion{}
	if err = randomize.Struct(seed, o, migrationVersionDBTypes, true, migrationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MigrationVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	migrationVersionFound, err := FindMigrationVersion(ctx, tx, o.Version)
	if err != nil {
		t.Error(err)
	}

	if migrationVersionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMigrationVersionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MigrationVersion{}
	if err = randomize.Struct(seed, o, migrationVersionDBTypes, true, migrationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MigrationVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MigrationVersions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMigrationVersionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MigrationVersion{}
	if err = randomize.Struct(seed, o, migrationVersionDBTypes, true, migrationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MigrationVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MigrationVersions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMigrationVersionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	migrationVersionOne := &MigrationVersion{}
	migrationVersionTwo := &MigrationVersion{}
	if err = randomize.Struct(seed, migrationVersionOne, migrationVersionDBTypes, false, migrationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MigrationVersion struct: %s", err)
	}
	if err = randomize.Struct(seed, migrationVersionTwo, migrationVersionDBTypes, false, migrationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MigrationVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = migrationVersionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = migrationVersionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MigrationVersions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMigrationVersionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	migrationVersionOne := &MigrationVersion{}
	migrationVersionTwo := &MigrationVersion{}
	if err = randomize.Struct(seed, migrationVersionOne, migrationVersionDBTypes, false, migrationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MigrationVersion struct: %s", err)
	}
	if err = randomize.Struct(seed, migrationVersionTwo, migrationVersionDBTypes, false, migrationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MigrationVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = migrationVersionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = migrationVersionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MigrationVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func migrationVersionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *MigrationVersion) error {
	*o = MigrationVersion{}
	return nil
}

func migrationVersionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *MigrationVersion) error {
	*o = MigrationVersion{}
	return nil
}

func migrationVersionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *MigrationVersion) error {
	*o = MigrationVersion{}
	return nil
}

func migrationVersionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MigrationVersion) error {
	*o = MigrationVersion{}
	return nil
}

func migrationVersionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MigrationVersion) error {
	*o = MigrationVersion{}
	return nil
}

func migrationVersionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MigrationVersion) error {
	*o = MigrationVersion{}
	return nil
}

func migrationVersionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MigrationVersion) error {
	*o = MigrationVersion{}
	return nil
}

func migrationVersionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MigrationVersion) error {
	*o = MigrationVersion{}
	return nil
}

func migrationVersionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MigrationVersion) error {
	*o = MigrationVersion{}
	return nil
}

func testMigrationVersionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &MigrationVersion{}
	o := &MigrationVersion{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, migrationVersionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MigrationVersion object: %s", err)
	}

	AddMigrationVersionHook(boil.BeforeInsertHook, migrationVersionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	migrationVersionBeforeInsertHooks = []MigrationVersionHook{}

	AddMigrationVersionHook(boil.AfterInsertHook, migrationVersionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	migrationVersionAfterInsertHooks = []MigrationVersionHook{}

	AddMigrationVersionHook(boil.AfterSelectHook, migrationVersionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	migrationVersionAfterSelectHooks = []MigrationVersionHook{}

	AddMigrationVersionHook(boil.BeforeUpdateHook, migrationVersionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	migrationVersionBeforeUpdateHooks = []MigrationVersionHook{}

	AddMigrationVersionHook(boil.AfterUpdateHook, migrationVersionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	migrationVersionAfterUpdateHooks = []MigrationVersionHook{}

	AddMigrationVersionHook(boil.BeforeDeleteHook, migrationVersionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	migrationVersionBeforeDeleteHooks = []MigrationVersionHook{}

	AddMigrationVersionHook(boil.AfterDeleteHook, migrationVersionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	migrationVersionAfterDeleteHooks = []MigrationVersionHook{}

	AddMigrationVersionHook(boil.BeforeUpsertHook, migrationVersionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	migrationVersionBeforeUpsertHooks = []MigrationVersionHook{}

	AddMigrationVersionHook(boil.AfterUpsertHook, migrationVersionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	migrationVersionAfterUpsertHooks = []MigrationVersionHook{}
}

func testMigrationVersionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MigrationVersion{}
	if err = randomize.Struct(seed, o, migrationVersionDBTypes, true, migrationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MigrationVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MigrationVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMigrationVersionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MigrationVersion{}
	if err = randomize.Struct(seed, o, migrationVersionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MigrationVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(migrationVersionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MigrationVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMigrationVersionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MigrationVersion{}
	if err = randomize.Struct(seed, o, migrationVersionDBTypes, true, migrationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MigrationVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMigrationVersionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MigrationVersion{}
	if err = randomize.Struct(seed, o, migrationVersionDBTypes, true, migrationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MigrationVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MigrationVersionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMigrationVersionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MigrationVersion{}
	if err = randomize.Struct(seed, o, migrationVersionDBTypes, true, migrationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MigrationVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MigrationVersions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	migrationVersionDBTypes = map[string]string{`Version`: `varchar`}
	_                       = bytes.MinRead
)

func testMigrationVersionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(migrationVersionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(migrationVersionColumns) == len(migrationVersionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MigrationVersion{}
	if err = randomize.Struct(seed, o, migrationVersionDBTypes, true, migrationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MigrationVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MigrationVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, migrationVersionDBTypes, true, migrationVersionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MigrationVersion struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMigrationVersionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(migrationVersionColumns) == len(migrationVersionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MigrationVersion{}
	if err = randomize.Struct(seed, o, migrationVersionDBTypes, true, migrationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MigrationVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MigrationVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, migrationVersionDBTypes, true, migrationVersionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MigrationVersion struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(migrationVersionColumns, migrationVersionPrimaryKeyColumns) {
		fields = migrationVersionColumns
	} else {
		fields = strmangle.SetComplement(
			migrationVersionColumns,
			migrationVersionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MigrationVersionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMigrationVersionsUpsert(t *testing.T) {
	t.Parallel()

	if len(migrationVersionColumns) == len(migrationVersionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLMigrationVersionUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MigrationVersion{}
	if err = randomize.Struct(seed, &o, migrationVersionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MigrationVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MigrationVersion: %s", err)
	}

	count, err := MigrationVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, migrationVersionDBTypes, false, migrationVersionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MigrationVersion struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MigrationVersion: %s", err)
	}

	count, err = MigrationVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
