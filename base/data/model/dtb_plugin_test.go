// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDTBPlugins(t *testing.T) {
	t.Parallel()

	query := DTBPlugins()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDTBPluginsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPlugin{}
	if err = randomize.Struct(seed, o, dtbPluginDBTypes, true, dtbPluginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPlugin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBPlugins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBPluginsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPlugin{}
	if err = randomize.Struct(seed, o, dtbPluginDBTypes, true, dtbPluginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPlugin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DTBPlugins().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBPlugins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBPluginsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPlugin{}
	if err = randomize.Struct(seed, o, dtbPluginDBTypes, true, dtbPluginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPlugin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBPluginSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBPlugins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBPluginsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPlugin{}
	if err = randomize.Struct(seed, o, dtbPluginDBTypes, true, dtbPluginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPlugin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DTBPluginExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DTBPlugin exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DTBPluginExists to return true, but got false.")
	}
}

func testDTBPluginsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPlugin{}
	if err = randomize.Struct(seed, o, dtbPluginDBTypes, true, dtbPluginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPlugin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dtbPluginFound, err := FindDTBPlugin(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if dtbPluginFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDTBPluginsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPlugin{}
	if err = randomize.Struct(seed, o, dtbPluginDBTypes, true, dtbPluginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPlugin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DTBPlugins().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDTBPluginsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPlugin{}
	if err = randomize.Struct(seed, o, dtbPluginDBTypes, true, dtbPluginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPlugin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DTBPlugins().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDTBPluginsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtbPluginOne := &DTBPlugin{}
	dtbPluginTwo := &DTBPlugin{}
	if err = randomize.Struct(seed, dtbPluginOne, dtbPluginDBTypes, false, dtbPluginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPlugin struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbPluginTwo, dtbPluginDBTypes, false, dtbPluginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPlugin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbPluginOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbPluginTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBPlugins().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDTBPluginsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dtbPluginOne := &DTBPlugin{}
	dtbPluginTwo := &DTBPlugin{}
	if err = randomize.Struct(seed, dtbPluginOne, dtbPluginDBTypes, false, dtbPluginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPlugin struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbPluginTwo, dtbPluginDBTypes, false, dtbPluginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPlugin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbPluginOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbPluginTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBPlugins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dtbPluginBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBPlugin) error {
	*o = DTBPlugin{}
	return nil
}

func dtbPluginAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBPlugin) error {
	*o = DTBPlugin{}
	return nil
}

func dtbPluginAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DTBPlugin) error {
	*o = DTBPlugin{}
	return nil
}

func dtbPluginBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBPlugin) error {
	*o = DTBPlugin{}
	return nil
}

func dtbPluginAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBPlugin) error {
	*o = DTBPlugin{}
	return nil
}

func dtbPluginBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBPlugin) error {
	*o = DTBPlugin{}
	return nil
}

func dtbPluginAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBPlugin) error {
	*o = DTBPlugin{}
	return nil
}

func dtbPluginBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBPlugin) error {
	*o = DTBPlugin{}
	return nil
}

func dtbPluginAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBPlugin) error {
	*o = DTBPlugin{}
	return nil
}

func testDTBPluginsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DTBPlugin{}
	o := &DTBPlugin{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dtbPluginDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBPlugin object: %s", err)
	}

	AddDTBPluginHook(boil.BeforeInsertHook, dtbPluginBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dtbPluginBeforeInsertHooks = []DTBPluginHook{}

	AddDTBPluginHook(boil.AfterInsertHook, dtbPluginAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dtbPluginAfterInsertHooks = []DTBPluginHook{}

	AddDTBPluginHook(boil.AfterSelectHook, dtbPluginAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dtbPluginAfterSelectHooks = []DTBPluginHook{}

	AddDTBPluginHook(boil.BeforeUpdateHook, dtbPluginBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dtbPluginBeforeUpdateHooks = []DTBPluginHook{}

	AddDTBPluginHook(boil.AfterUpdateHook, dtbPluginAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dtbPluginAfterUpdateHooks = []DTBPluginHook{}

	AddDTBPluginHook(boil.BeforeDeleteHook, dtbPluginBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dtbPluginBeforeDeleteHooks = []DTBPluginHook{}

	AddDTBPluginHook(boil.AfterDeleteHook, dtbPluginAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dtbPluginAfterDeleteHooks = []DTBPluginHook{}

	AddDTBPluginHook(boil.BeforeUpsertHook, dtbPluginBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dtbPluginBeforeUpsertHooks = []DTBPluginHook{}

	AddDTBPluginHook(boil.AfterUpsertHook, dtbPluginAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dtbPluginAfterUpsertHooks = []DTBPluginHook{}
}

func testDTBPluginsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPlugin{}
	if err = randomize.Struct(seed, o, dtbPluginDBTypes, true, dtbPluginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPlugin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBPlugins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBPluginsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPlugin{}
	if err = randomize.Struct(seed, o, dtbPluginDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DTBPlugin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dtbPluginColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DTBPlugins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBPluginsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPlugin{}
	if err = randomize.Struct(seed, o, dtbPluginDBTypes, true, dtbPluginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPlugin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBPluginsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPlugin{}
	if err = randomize.Struct(seed, o, dtbPluginDBTypes, true, dtbPluginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPlugin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBPluginSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBPluginsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPlugin{}
	if err = randomize.Struct(seed, o, dtbPluginDBTypes, true, dtbPluginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPlugin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBPlugins().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dtbPluginDBTypes = map[string]string{`ID`: `int`, `Name`: `varchar`, `Code`: `varchar`, `Enabled`: `tinyint`, `Version`: `varchar`, `Source`: `varchar`, `Initialized`: `tinyint`, `CreateDate`: `datetime`, `UpdateDate`: `datetime`, `DiscriminatorType`: `varchar`}
	_                = bytes.MinRead
)

func testDTBPluginsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dtbPluginPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dtbPluginColumns) == len(dtbPluginPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBPlugin{}
	if err = randomize.Struct(seed, o, dtbPluginDBTypes, true, dtbPluginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPlugin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBPlugins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbPluginDBTypes, true, dtbPluginPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBPlugin struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDTBPluginsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dtbPluginColumns) == len(dtbPluginPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBPlugin{}
	if err = randomize.Struct(seed, o, dtbPluginDBTypes, true, dtbPluginColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPlugin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBPlugins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbPluginDBTypes, true, dtbPluginPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBPlugin struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dtbPluginColumns, dtbPluginPrimaryKeyColumns) {
		fields = dtbPluginColumns
	} else {
		fields = strmangle.SetComplement(
			dtbPluginColumns,
			dtbPluginPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DTBPluginSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDTBPluginsUpsert(t *testing.T) {
	t.Parallel()

	if len(dtbPluginColumns) == len(dtbPluginPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDTBPluginUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DTBPlugin{}
	if err = randomize.Struct(seed, &o, dtbPluginDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBPlugin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBPlugin: %s", err)
	}

	count, err := DTBPlugins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dtbPluginDBTypes, false, dtbPluginPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBPlugin struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBPlugin: %s", err)
	}

	count, err = DTBPlugins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
