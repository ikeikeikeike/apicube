// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMTBCSVTypes(t *testing.T) {
	t.Parallel()

	query := MTBCSVTypes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMTBCSVTypesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBCSVType{}
	if err = randomize.Struct(seed, o, mtbCSVTypeDBTypes, true, mtbCSVTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCSVType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MTBCSVTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMTBCSVTypesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBCSVType{}
	if err = randomize.Struct(seed, o, mtbCSVTypeDBTypes, true, mtbCSVTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCSVType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MTBCSVTypes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MTBCSVTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMTBCSVTypesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBCSVType{}
	if err = randomize.Struct(seed, o, mtbCSVTypeDBTypes, true, mtbCSVTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCSVType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MTBCSVTypeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MTBCSVTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMTBCSVTypesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBCSVType{}
	if err = randomize.Struct(seed, o, mtbCSVTypeDBTypes, true, mtbCSVTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCSVType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MTBCSVTypeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if MTBCSVType exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MTBCSVTypeExists to return true, but got false.")
	}
}

func testMTBCSVTypesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBCSVType{}
	if err = randomize.Struct(seed, o, mtbCSVTypeDBTypes, true, mtbCSVTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCSVType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	mtbCSVTypeFound, err := FindMTBCSVType(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if mtbCSVTypeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMTBCSVTypesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBCSVType{}
	if err = randomize.Struct(seed, o, mtbCSVTypeDBTypes, true, mtbCSVTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCSVType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MTBCSVTypes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMTBCSVTypesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBCSVType{}
	if err = randomize.Struct(seed, o, mtbCSVTypeDBTypes, true, mtbCSVTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCSVType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MTBCSVTypes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMTBCSVTypesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	mtbCSVTypeOne := &MTBCSVType{}
	mtbCSVTypeTwo := &MTBCSVType{}
	if err = randomize.Struct(seed, mtbCSVTypeOne, mtbCSVTypeDBTypes, false, mtbCSVTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCSVType struct: %s", err)
	}
	if err = randomize.Struct(seed, mtbCSVTypeTwo, mtbCSVTypeDBTypes, false, mtbCSVTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCSVType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mtbCSVTypeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mtbCSVTypeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MTBCSVTypes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMTBCSVTypesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	mtbCSVTypeOne := &MTBCSVType{}
	mtbCSVTypeTwo := &MTBCSVType{}
	if err = randomize.Struct(seed, mtbCSVTypeOne, mtbCSVTypeDBTypes, false, mtbCSVTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCSVType struct: %s", err)
	}
	if err = randomize.Struct(seed, mtbCSVTypeTwo, mtbCSVTypeDBTypes, false, mtbCSVTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCSVType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mtbCSVTypeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mtbCSVTypeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MTBCSVTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func mtbCSVTypeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *MTBCSVType) error {
	*o = MTBCSVType{}
	return nil
}

func mtbCSVTypeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *MTBCSVType) error {
	*o = MTBCSVType{}
	return nil
}

func mtbCSVTypeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *MTBCSVType) error {
	*o = MTBCSVType{}
	return nil
}

func mtbCSVTypeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MTBCSVType) error {
	*o = MTBCSVType{}
	return nil
}

func mtbCSVTypeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MTBCSVType) error {
	*o = MTBCSVType{}
	return nil
}

func mtbCSVTypeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MTBCSVType) error {
	*o = MTBCSVType{}
	return nil
}

func mtbCSVTypeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MTBCSVType) error {
	*o = MTBCSVType{}
	return nil
}

func mtbCSVTypeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MTBCSVType) error {
	*o = MTBCSVType{}
	return nil
}

func mtbCSVTypeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MTBCSVType) error {
	*o = MTBCSVType{}
	return nil
}

func testMTBCSVTypesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &MTBCSVType{}
	o := &MTBCSVType{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, mtbCSVTypeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MTBCSVType object: %s", err)
	}

	AddMTBCSVTypeHook(boil.BeforeInsertHook, mtbCSVTypeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	mtbCSVTypeBeforeInsertHooks = []MTBCSVTypeHook{}

	AddMTBCSVTypeHook(boil.AfterInsertHook, mtbCSVTypeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	mtbCSVTypeAfterInsertHooks = []MTBCSVTypeHook{}

	AddMTBCSVTypeHook(boil.AfterSelectHook, mtbCSVTypeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	mtbCSVTypeAfterSelectHooks = []MTBCSVTypeHook{}

	AddMTBCSVTypeHook(boil.BeforeUpdateHook, mtbCSVTypeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	mtbCSVTypeBeforeUpdateHooks = []MTBCSVTypeHook{}

	AddMTBCSVTypeHook(boil.AfterUpdateHook, mtbCSVTypeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	mtbCSVTypeAfterUpdateHooks = []MTBCSVTypeHook{}

	AddMTBCSVTypeHook(boil.BeforeDeleteHook, mtbCSVTypeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	mtbCSVTypeBeforeDeleteHooks = []MTBCSVTypeHook{}

	AddMTBCSVTypeHook(boil.AfterDeleteHook, mtbCSVTypeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	mtbCSVTypeAfterDeleteHooks = []MTBCSVTypeHook{}

	AddMTBCSVTypeHook(boil.BeforeUpsertHook, mtbCSVTypeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	mtbCSVTypeBeforeUpsertHooks = []MTBCSVTypeHook{}

	AddMTBCSVTypeHook(boil.AfterUpsertHook, mtbCSVTypeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	mtbCSVTypeAfterUpsertHooks = []MTBCSVTypeHook{}
}

func testMTBCSVTypesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBCSVType{}
	if err = randomize.Struct(seed, o, mtbCSVTypeDBTypes, true, mtbCSVTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCSVType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MTBCSVTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMTBCSVTypesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBCSVType{}
	if err = randomize.Struct(seed, o, mtbCSVTypeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MTBCSVType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(mtbCSVTypeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MTBCSVTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMTBCSVTypeToManyCSVTypeDTBCSVS(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBCSVType
	var b, c DTBCSV

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbCSVTypeDBTypes, true, mtbCSVTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCSVType struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbCSVDBTypes, false, dtbCSVColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbCSVDBTypes, false, dtbCSVColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CSVTypeID, a.ID)
	queries.Assign(&c.CSVTypeID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CSVTypeDTBCSVS().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CSVTypeID, b.CSVTypeID) {
			bFound = true
		}
		if queries.Equal(v.CSVTypeID, c.CSVTypeID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MTBCSVTypeSlice{&a}
	if err = a.L.LoadCSVTypeDTBCSVS(ctx, tx, false, (*[]*MTBCSVType)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CSVTypeDTBCSVS); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CSVTypeDTBCSVS = nil
	if err = a.L.LoadCSVTypeDTBCSVS(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CSVTypeDTBCSVS); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMTBCSVTypeToManyAddOpCSVTypeDTBCSVS(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBCSVType
	var b, c, d, e DTBCSV

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbCSVTypeDBTypes, false, strmangle.SetComplement(mtbCSVTypePrimaryKeyColumns, mtbCSVTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBCSV{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbCSVDBTypes, false, strmangle.SetComplement(dtbCSVPrimaryKeyColumns, dtbCSVColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBCSV{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCSVTypeDTBCSVS(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CSVTypeID) {
			t.Error("foreign key was wrong value", a.ID, first.CSVTypeID)
		}
		if !queries.Equal(a.ID, second.CSVTypeID) {
			t.Error("foreign key was wrong value", a.ID, second.CSVTypeID)
		}

		if first.R.CSVType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.CSVType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CSVTypeDTBCSVS[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CSVTypeDTBCSVS[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CSVTypeDTBCSVS().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMTBCSVTypeToManySetOpCSVTypeDTBCSVS(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBCSVType
	var b, c, d, e DTBCSV

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbCSVTypeDBTypes, false, strmangle.SetComplement(mtbCSVTypePrimaryKeyColumns, mtbCSVTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBCSV{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbCSVDBTypes, false, strmangle.SetComplement(dtbCSVPrimaryKeyColumns, dtbCSVColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCSVTypeDTBCSVS(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CSVTypeDTBCSVS().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCSVTypeDTBCSVS(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CSVTypeDTBCSVS().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CSVTypeID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CSVTypeID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CSVTypeID) {
		t.Error("foreign key was wrong value", a.ID, d.CSVTypeID)
	}
	if !queries.Equal(a.ID, e.CSVTypeID) {
		t.Error("foreign key was wrong value", a.ID, e.CSVTypeID)
	}

	if b.R.CSVType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CSVType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CSVType != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.CSVType != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CSVTypeDTBCSVS[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CSVTypeDTBCSVS[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMTBCSVTypeToManyRemoveOpCSVTypeDTBCSVS(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MTBCSVType
	var b, c, d, e DTBCSV

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mtbCSVTypeDBTypes, false, strmangle.SetComplement(mtbCSVTypePrimaryKeyColumns, mtbCSVTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBCSV{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbCSVDBTypes, false, strmangle.SetComplement(dtbCSVPrimaryKeyColumns, dtbCSVColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCSVTypeDTBCSVS(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CSVTypeDTBCSVS().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCSVTypeDTBCSVS(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CSVTypeDTBCSVS().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CSVTypeID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CSVTypeID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.CSVType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CSVType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CSVType != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.CSVType != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CSVTypeDTBCSVS) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CSVTypeDTBCSVS[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CSVTypeDTBCSVS[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMTBCSVTypesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBCSVType{}
	if err = randomize.Struct(seed, o, mtbCSVTypeDBTypes, true, mtbCSVTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCSVType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMTBCSVTypesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBCSVType{}
	if err = randomize.Struct(seed, o, mtbCSVTypeDBTypes, true, mtbCSVTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCSVType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MTBCSVTypeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMTBCSVTypesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBCSVType{}
	if err = randomize.Struct(seed, o, mtbCSVTypeDBTypes, true, mtbCSVTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCSVType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MTBCSVTypes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	mtbCSVTypeDBTypes = map[string]string{`ID`: `smallint`, `Name`: `varchar`, `SortNo`: `smallint`, `DiscriminatorType`: `varchar`}
	_                 = bytes.MinRead
)

func testMTBCSVTypesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(mtbCSVTypePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(mtbCSVTypeColumns) == len(mtbCSVTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MTBCSVType{}
	if err = randomize.Struct(seed, o, mtbCSVTypeDBTypes, true, mtbCSVTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCSVType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MTBCSVTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mtbCSVTypeDBTypes, true, mtbCSVTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MTBCSVType struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMTBCSVTypesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(mtbCSVTypeColumns) == len(mtbCSVTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MTBCSVType{}
	if err = randomize.Struct(seed, o, mtbCSVTypeDBTypes, true, mtbCSVTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCSVType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MTBCSVTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mtbCSVTypeDBTypes, true, mtbCSVTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MTBCSVType struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(mtbCSVTypeColumns, mtbCSVTypePrimaryKeyColumns) {
		fields = mtbCSVTypeColumns
	} else {
		fields = strmangle.SetComplement(
			mtbCSVTypeColumns,
			mtbCSVTypePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MTBCSVTypeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMTBCSVTypesUpsert(t *testing.T) {
	t.Parallel()

	if len(mtbCSVTypeColumns) == len(mtbCSVTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLMTBCSVTypeUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MTBCSVType{}
	if err = randomize.Struct(seed, &o, mtbCSVTypeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MTBCSVType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MTBCSVType: %s", err)
	}

	count, err := MTBCSVTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, mtbCSVTypeDBTypes, false, mtbCSVTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MTBCSVType struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MTBCSVType: %s", err)
	}

	count, err = MTBCSVTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
