// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMTBOrderStatuses(t *testing.T) {
	t.Parallel()

	query := MTBOrderStatuses()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMTBOrderStatusesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBOrderStatus{}
	if err = randomize.Struct(seed, o, mtbOrderStatusDBTypes, true, mtbOrderStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBOrderStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MTBOrderStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMTBOrderStatusesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBOrderStatus{}
	if err = randomize.Struct(seed, o, mtbOrderStatusDBTypes, true, mtbOrderStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBOrderStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MTBOrderStatuses().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MTBOrderStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMTBOrderStatusesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBOrderStatus{}
	if err = randomize.Struct(seed, o, mtbOrderStatusDBTypes, true, mtbOrderStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBOrderStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MTBOrderStatusSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MTBOrderStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMTBOrderStatusesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBOrderStatus{}
	if err = randomize.Struct(seed, o, mtbOrderStatusDBTypes, true, mtbOrderStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBOrderStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MTBOrderStatusExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if MTBOrderStatus exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MTBOrderStatusExists to return true, but got false.")
	}
}

func testMTBOrderStatusesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBOrderStatus{}
	if err = randomize.Struct(seed, o, mtbOrderStatusDBTypes, true, mtbOrderStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBOrderStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	mtbOrderStatusFound, err := FindMTBOrderStatus(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if mtbOrderStatusFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMTBOrderStatusesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBOrderStatus{}
	if err = randomize.Struct(seed, o, mtbOrderStatusDBTypes, true, mtbOrderStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBOrderStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MTBOrderStatuses().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMTBOrderStatusesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBOrderStatus{}
	if err = randomize.Struct(seed, o, mtbOrderStatusDBTypes, true, mtbOrderStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBOrderStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MTBOrderStatuses().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMTBOrderStatusesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	mtbOrderStatusOne := &MTBOrderStatus{}
	mtbOrderStatusTwo := &MTBOrderStatus{}
	if err = randomize.Struct(seed, mtbOrderStatusOne, mtbOrderStatusDBTypes, false, mtbOrderStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBOrderStatus struct: %s", err)
	}
	if err = randomize.Struct(seed, mtbOrderStatusTwo, mtbOrderStatusDBTypes, false, mtbOrderStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBOrderStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mtbOrderStatusOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mtbOrderStatusTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MTBOrderStatuses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMTBOrderStatusesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	mtbOrderStatusOne := &MTBOrderStatus{}
	mtbOrderStatusTwo := &MTBOrderStatus{}
	if err = randomize.Struct(seed, mtbOrderStatusOne, mtbOrderStatusDBTypes, false, mtbOrderStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBOrderStatus struct: %s", err)
	}
	if err = randomize.Struct(seed, mtbOrderStatusTwo, mtbOrderStatusDBTypes, false, mtbOrderStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBOrderStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mtbOrderStatusOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mtbOrderStatusTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MTBOrderStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func mtbOrderStatusBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *MTBOrderStatus) error {
	*o = MTBOrderStatus{}
	return nil
}

func mtbOrderStatusAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *MTBOrderStatus) error {
	*o = MTBOrderStatus{}
	return nil
}

func mtbOrderStatusAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *MTBOrderStatus) error {
	*o = MTBOrderStatus{}
	return nil
}

func mtbOrderStatusBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MTBOrderStatus) error {
	*o = MTBOrderStatus{}
	return nil
}

func mtbOrderStatusAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MTBOrderStatus) error {
	*o = MTBOrderStatus{}
	return nil
}

func mtbOrderStatusBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MTBOrderStatus) error {
	*o = MTBOrderStatus{}
	return nil
}

func mtbOrderStatusAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MTBOrderStatus) error {
	*o = MTBOrderStatus{}
	return nil
}

func mtbOrderStatusBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MTBOrderStatus) error {
	*o = MTBOrderStatus{}
	return nil
}

func mtbOrderStatusAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MTBOrderStatus) error {
	*o = MTBOrderStatus{}
	return nil
}

func testMTBOrderStatusesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &MTBOrderStatus{}
	o := &MTBOrderStatus{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, mtbOrderStatusDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MTBOrderStatus object: %s", err)
	}

	AddMTBOrderStatusHook(boil.BeforeInsertHook, mtbOrderStatusBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	mtbOrderStatusBeforeInsertHooks = []MTBOrderStatusHook{}

	AddMTBOrderStatusHook(boil.AfterInsertHook, mtbOrderStatusAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	mtbOrderStatusAfterInsertHooks = []MTBOrderStatusHook{}

	AddMTBOrderStatusHook(boil.AfterSelectHook, mtbOrderStatusAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	mtbOrderStatusAfterSelectHooks = []MTBOrderStatusHook{}

	AddMTBOrderStatusHook(boil.BeforeUpdateHook, mtbOrderStatusBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	mtbOrderStatusBeforeUpdateHooks = []MTBOrderStatusHook{}

	AddMTBOrderStatusHook(boil.AfterUpdateHook, mtbOrderStatusAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	mtbOrderStatusAfterUpdateHooks = []MTBOrderStatusHook{}

	AddMTBOrderStatusHook(boil.BeforeDeleteHook, mtbOrderStatusBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	mtbOrderStatusBeforeDeleteHooks = []MTBOrderStatusHook{}

	AddMTBOrderStatusHook(boil.AfterDeleteHook, mtbOrderStatusAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	mtbOrderStatusAfterDeleteHooks = []MTBOrderStatusHook{}

	AddMTBOrderStatusHook(boil.BeforeUpsertHook, mtbOrderStatusBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	mtbOrderStatusBeforeUpsertHooks = []MTBOrderStatusHook{}

	AddMTBOrderStatusHook(boil.AfterUpsertHook, mtbOrderStatusAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	mtbOrderStatusAfterUpsertHooks = []MTBOrderStatusHook{}
}

func testMTBOrderStatusesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBOrderStatus{}
	if err = randomize.Struct(seed, o, mtbOrderStatusDBTypes, true, mtbOrderStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBOrderStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MTBOrderStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMTBOrderStatusesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBOrderStatus{}
	if err = randomize.Struct(seed, o, mtbOrderStatusDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MTBOrderStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(mtbOrderStatusColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MTBOrderStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMTBOrderStatusesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBOrderStatus{}
	if err = randomize.Struct(seed, o, mtbOrderStatusDBTypes, true, mtbOrderStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBOrderStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMTBOrderStatusesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBOrderStatus{}
	if err = randomize.Struct(seed, o, mtbOrderStatusDBTypes, true, mtbOrderStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBOrderStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MTBOrderStatusSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMTBOrderStatusesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBOrderStatus{}
	if err = randomize.Struct(seed, o, mtbOrderStatusDBTypes, true, mtbOrderStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBOrderStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MTBOrderStatuses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	mtbOrderStatusDBTypes = map[string]string{`ID`: `smallint`, `DisplayOrderCount`: `tinyint`, `Name`: `varchar`, `SortNo`: `smallint`, `DiscriminatorType`: `varchar`}
	_                     = bytes.MinRead
)

func testMTBOrderStatusesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(mtbOrderStatusPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(mtbOrderStatusColumns) == len(mtbOrderStatusPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MTBOrderStatus{}
	if err = randomize.Struct(seed, o, mtbOrderStatusDBTypes, true, mtbOrderStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBOrderStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MTBOrderStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mtbOrderStatusDBTypes, true, mtbOrderStatusPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MTBOrderStatus struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMTBOrderStatusesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(mtbOrderStatusColumns) == len(mtbOrderStatusPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MTBOrderStatus{}
	if err = randomize.Struct(seed, o, mtbOrderStatusDBTypes, true, mtbOrderStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBOrderStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MTBOrderStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mtbOrderStatusDBTypes, true, mtbOrderStatusPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MTBOrderStatus struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(mtbOrderStatusColumns, mtbOrderStatusPrimaryKeyColumns) {
		fields = mtbOrderStatusColumns
	} else {
		fields = strmangle.SetComplement(
			mtbOrderStatusColumns,
			mtbOrderStatusPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MTBOrderStatusSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMTBOrderStatusesUpsert(t *testing.T) {
	t.Parallel()

	if len(mtbOrderStatusColumns) == len(mtbOrderStatusPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLMTBOrderStatusUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MTBOrderStatus{}
	if err = randomize.Struct(seed, &o, mtbOrderStatusDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MTBOrderStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MTBOrderStatus: %s", err)
	}

	count, err := MTBOrderStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, mtbOrderStatusDBTypes, false, mtbOrderStatusPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MTBOrderStatus struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MTBOrderStatus: %s", err)
	}

	count, err = MTBOrderStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
