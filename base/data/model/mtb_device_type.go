// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// MTBDeviceType is an object representing the database table.
type MTBDeviceType struct {
	ID                uint16 `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name              string `boil:"name" json:"name" toml:"name" yaml:"name"`
	SortNo            uint16 `boil:"sort_no" json:"sort_no" toml:"sort_no" yaml:"sort_no"`
	DiscriminatorType string `boil:"discriminator_type" json:"discriminator_type" toml:"discriminator_type" yaml:"discriminator_type"`

	R *mtbDeviceTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L mtbDeviceTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MTBDeviceTypeColumns = struct {
	ID                string
	Name              string
	SortNo            string
	DiscriminatorType string
}{
	ID:                "id",
	Name:              "name",
	SortNo:            "sort_no",
	DiscriminatorType: "discriminator_type",
}

// Generated where

var MTBDeviceTypeWhere = struct {
	ID                whereHelperuint16
	Name              whereHelperstring
	SortNo            whereHelperuint16
	DiscriminatorType whereHelperstring
}{
	ID:                whereHelperuint16{field: `id`},
	Name:              whereHelperstring{field: `name`},
	SortNo:            whereHelperuint16{field: `sort_no`},
	DiscriminatorType: whereHelperstring{field: `discriminator_type`},
}

// MTBDeviceTypeRels is where relationship names are stored.
var MTBDeviceTypeRels = struct {
	DeviceTypeDTBBlocks    string
	DeviceTypeDTBLayouts   string
	DeviceTypeDTBOrders    string
	DeviceTypeDTBTemplates string
}{
	DeviceTypeDTBBlocks:    "DeviceTypeDTBBlocks",
	DeviceTypeDTBLayouts:   "DeviceTypeDTBLayouts",
	DeviceTypeDTBOrders:    "DeviceTypeDTBOrders",
	DeviceTypeDTBTemplates: "DeviceTypeDTBTemplates",
}

// mtbDeviceTypeR is where relationships are stored.
type mtbDeviceTypeR struct {
	DeviceTypeDTBBlocks    DTBBlockSlice
	DeviceTypeDTBLayouts   DTBLayoutSlice
	DeviceTypeDTBOrders    DTBOrderSlice
	DeviceTypeDTBTemplates DTBTemplateSlice
}

// NewStruct creates a new relationship struct
func (*mtbDeviceTypeR) NewStruct() *mtbDeviceTypeR {
	return &mtbDeviceTypeR{}
}

// mtbDeviceTypeL is where Load methods for each relationship are stored.
type mtbDeviceTypeL struct{}

var (
	mtbDeviceTypeColumns               = []string{"id", "name", "sort_no", "discriminator_type"}
	mtbDeviceTypeColumnsWithoutDefault = []string{"id", "name", "sort_no", "discriminator_type"}
	mtbDeviceTypeColumnsWithDefault    = []string{}
	mtbDeviceTypePrimaryKeyColumns     = []string{"id"}
)

type (
	// MTBDeviceTypeSlice is an alias for a slice of pointers to MTBDeviceType.
	// This should generally be used opposed to []MTBDeviceType.
	MTBDeviceTypeSlice []*MTBDeviceType
	// MTBDeviceTypeHook is the signature for custom MTBDeviceType hook methods
	MTBDeviceTypeHook func(context.Context, boil.ContextExecutor, *MTBDeviceType) error

	mtbDeviceTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mtbDeviceTypeType                 = reflect.TypeOf(&MTBDeviceType{})
	mtbDeviceTypeMapping              = queries.MakeStructMapping(mtbDeviceTypeType)
	mtbDeviceTypePrimaryKeyMapping, _ = queries.BindMapping(mtbDeviceTypeType, mtbDeviceTypeMapping, mtbDeviceTypePrimaryKeyColumns)
	mtbDeviceTypeInsertCacheMut       sync.RWMutex
	mtbDeviceTypeInsertCache          = make(map[string]insertCache)
	mtbDeviceTypeUpdateCacheMut       sync.RWMutex
	mtbDeviceTypeUpdateCache          = make(map[string]updateCache)
	mtbDeviceTypeUpsertCacheMut       sync.RWMutex
	mtbDeviceTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mtbDeviceTypeBeforeInsertHooks []MTBDeviceTypeHook
var mtbDeviceTypeBeforeUpdateHooks []MTBDeviceTypeHook
var mtbDeviceTypeBeforeDeleteHooks []MTBDeviceTypeHook
var mtbDeviceTypeBeforeUpsertHooks []MTBDeviceTypeHook

var mtbDeviceTypeAfterInsertHooks []MTBDeviceTypeHook
var mtbDeviceTypeAfterSelectHooks []MTBDeviceTypeHook
var mtbDeviceTypeAfterUpdateHooks []MTBDeviceTypeHook
var mtbDeviceTypeAfterDeleteHooks []MTBDeviceTypeHook
var mtbDeviceTypeAfterUpsertHooks []MTBDeviceTypeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MTBDeviceType) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mtbDeviceTypeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MTBDeviceType) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mtbDeviceTypeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MTBDeviceType) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mtbDeviceTypeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MTBDeviceType) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mtbDeviceTypeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MTBDeviceType) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mtbDeviceTypeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MTBDeviceType) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mtbDeviceTypeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MTBDeviceType) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mtbDeviceTypeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MTBDeviceType) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mtbDeviceTypeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MTBDeviceType) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mtbDeviceTypeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMTBDeviceTypeHook registers your hook function for all future operations.
func AddMTBDeviceTypeHook(hookPoint boil.HookPoint, mtbDeviceTypeHook MTBDeviceTypeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		mtbDeviceTypeBeforeInsertHooks = append(mtbDeviceTypeBeforeInsertHooks, mtbDeviceTypeHook)
	case boil.BeforeUpdateHook:
		mtbDeviceTypeBeforeUpdateHooks = append(mtbDeviceTypeBeforeUpdateHooks, mtbDeviceTypeHook)
	case boil.BeforeDeleteHook:
		mtbDeviceTypeBeforeDeleteHooks = append(mtbDeviceTypeBeforeDeleteHooks, mtbDeviceTypeHook)
	case boil.BeforeUpsertHook:
		mtbDeviceTypeBeforeUpsertHooks = append(mtbDeviceTypeBeforeUpsertHooks, mtbDeviceTypeHook)
	case boil.AfterInsertHook:
		mtbDeviceTypeAfterInsertHooks = append(mtbDeviceTypeAfterInsertHooks, mtbDeviceTypeHook)
	case boil.AfterSelectHook:
		mtbDeviceTypeAfterSelectHooks = append(mtbDeviceTypeAfterSelectHooks, mtbDeviceTypeHook)
	case boil.AfterUpdateHook:
		mtbDeviceTypeAfterUpdateHooks = append(mtbDeviceTypeAfterUpdateHooks, mtbDeviceTypeHook)
	case boil.AfterDeleteHook:
		mtbDeviceTypeAfterDeleteHooks = append(mtbDeviceTypeAfterDeleteHooks, mtbDeviceTypeHook)
	case boil.AfterUpsertHook:
		mtbDeviceTypeAfterUpsertHooks = append(mtbDeviceTypeAfterUpsertHooks, mtbDeviceTypeHook)
	}
}

// One returns a single mtbDeviceType record from the query.
func (q mtbDeviceTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MTBDeviceType, error) {
	o := &MTBDeviceType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for mtb_device_type")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MTBDeviceType records from the query.
func (q mtbDeviceTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (MTBDeviceTypeSlice, error) {
	var o []*MTBDeviceType

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to MTBDeviceType slice")
	}

	if len(mtbDeviceTypeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MTBDeviceType records in the query.
func (q mtbDeviceTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count mtb_device_type rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mtbDeviceTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if mtb_device_type exists")
	}

	return count > 0, nil
}

// DeviceTypeDTBBlocks retrieves all the dtb_block's DTBBlocks with an executor via device_type_id column.
func (o *MTBDeviceType) DeviceTypeDTBBlocks(mods ...qm.QueryMod) dtbBlockQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`dtb_block`.`device_type_id`=?", o.ID),
	)

	query := DTBBlocks(queryMods...)
	queries.SetFrom(query.Query, "`dtb_block`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`dtb_block`.*"})
	}

	return query
}

// DeviceTypeDTBLayouts retrieves all the dtb_layout's DTBLayouts with an executor via device_type_id column.
func (o *MTBDeviceType) DeviceTypeDTBLayouts(mods ...qm.QueryMod) dtbLayoutQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`dtb_layout`.`device_type_id`=?", o.ID),
	)

	query := DTBLayouts(queryMods...)
	queries.SetFrom(query.Query, "`dtb_layout`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`dtb_layout`.*"})
	}

	return query
}

// DeviceTypeDTBOrders retrieves all the dtb_order's DTBOrders with an executor via device_type_id column.
func (o *MTBDeviceType) DeviceTypeDTBOrders(mods ...qm.QueryMod) dtbOrderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`dtb_order`.`device_type_id`=?", o.ID),
	)

	query := DTBOrders(queryMods...)
	queries.SetFrom(query.Query, "`dtb_order`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`dtb_order`.*"})
	}

	return query
}

// DeviceTypeDTBTemplates retrieves all the dtb_template's DTBTemplates with an executor via device_type_id column.
func (o *MTBDeviceType) DeviceTypeDTBTemplates(mods ...qm.QueryMod) dtbTemplateQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`dtb_template`.`device_type_id`=?", o.ID),
	)

	query := DTBTemplates(queryMods...)
	queries.SetFrom(query.Query, "`dtb_template`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`dtb_template`.*"})
	}

	return query
}

// LoadDeviceTypeDTBBlocks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mtbDeviceTypeL) LoadDeviceTypeDTBBlocks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMTBDeviceType interface{}, mods queries.Applicator) error {
	var slice []*MTBDeviceType
	var object *MTBDeviceType

	if singular {
		object = maybeMTBDeviceType.(*MTBDeviceType)
	} else {
		slice = *maybeMTBDeviceType.(*[]*MTBDeviceType)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mtbDeviceTypeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mtbDeviceTypeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_block`), qm.WhereIn(`device_type_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dtb_block")
	}

	var resultSlice []*DTBBlock
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dtb_block")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dtb_block")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_block")
	}

	if len(dtbBlockAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DeviceTypeDTBBlocks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dtbBlockR{}
			}
			foreign.R.DeviceType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.DeviceTypeID) {
				local.R.DeviceTypeDTBBlocks = append(local.R.DeviceTypeDTBBlocks, foreign)
				if foreign.R == nil {
					foreign.R = &dtbBlockR{}
				}
				foreign.R.DeviceType = local
				break
			}
		}
	}

	return nil
}

// LoadDeviceTypeDTBLayouts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mtbDeviceTypeL) LoadDeviceTypeDTBLayouts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMTBDeviceType interface{}, mods queries.Applicator) error {
	var slice []*MTBDeviceType
	var object *MTBDeviceType

	if singular {
		object = maybeMTBDeviceType.(*MTBDeviceType)
	} else {
		slice = *maybeMTBDeviceType.(*[]*MTBDeviceType)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mtbDeviceTypeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mtbDeviceTypeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_layout`), qm.WhereIn(`device_type_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dtb_layout")
	}

	var resultSlice []*DTBLayout
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dtb_layout")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dtb_layout")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_layout")
	}

	if len(dtbLayoutAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DeviceTypeDTBLayouts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dtbLayoutR{}
			}
			foreign.R.DeviceType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.DeviceTypeID) {
				local.R.DeviceTypeDTBLayouts = append(local.R.DeviceTypeDTBLayouts, foreign)
				if foreign.R == nil {
					foreign.R = &dtbLayoutR{}
				}
				foreign.R.DeviceType = local
				break
			}
		}
	}

	return nil
}

// LoadDeviceTypeDTBOrders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mtbDeviceTypeL) LoadDeviceTypeDTBOrders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMTBDeviceType interface{}, mods queries.Applicator) error {
	var slice []*MTBDeviceType
	var object *MTBDeviceType

	if singular {
		object = maybeMTBDeviceType.(*MTBDeviceType)
	} else {
		slice = *maybeMTBDeviceType.(*[]*MTBDeviceType)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mtbDeviceTypeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mtbDeviceTypeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_order`), qm.WhereIn(`device_type_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dtb_order")
	}

	var resultSlice []*DTBOrder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dtb_order")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dtb_order")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_order")
	}

	if len(dtbOrderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DeviceTypeDTBOrders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dtbOrderR{}
			}
			foreign.R.DeviceType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.DeviceTypeID) {
				local.R.DeviceTypeDTBOrders = append(local.R.DeviceTypeDTBOrders, foreign)
				if foreign.R == nil {
					foreign.R = &dtbOrderR{}
				}
				foreign.R.DeviceType = local
				break
			}
		}
	}

	return nil
}

// LoadDeviceTypeDTBTemplates allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mtbDeviceTypeL) LoadDeviceTypeDTBTemplates(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMTBDeviceType interface{}, mods queries.Applicator) error {
	var slice []*MTBDeviceType
	var object *MTBDeviceType

	if singular {
		object = maybeMTBDeviceType.(*MTBDeviceType)
	} else {
		slice = *maybeMTBDeviceType.(*[]*MTBDeviceType)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mtbDeviceTypeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mtbDeviceTypeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_template`), qm.WhereIn(`device_type_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dtb_template")
	}

	var resultSlice []*DTBTemplate
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dtb_template")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dtb_template")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_template")
	}

	if len(dtbTemplateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DeviceTypeDTBTemplates = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dtbTemplateR{}
			}
			foreign.R.DeviceType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.DeviceTypeID) {
				local.R.DeviceTypeDTBTemplates = append(local.R.DeviceTypeDTBTemplates, foreign)
				if foreign.R == nil {
					foreign.R = &dtbTemplateR{}
				}
				foreign.R.DeviceType = local
				break
			}
		}
	}

	return nil
}

// AddDeviceTypeDTBBlocks adds the given related objects to the existing relationships
// of the mtb_device_type, optionally inserting them as new records.
// Appends related to o.R.DeviceTypeDTBBlocks.
// Sets related.R.DeviceType appropriately.
func (o *MTBDeviceType) AddDeviceTypeDTBBlocks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBBlock) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DeviceTypeID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `dtb_block` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"device_type_id"}),
				strmangle.WhereClause("`", "`", 0, dtbBlockPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DeviceTypeID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &mtbDeviceTypeR{
			DeviceTypeDTBBlocks: related,
		}
	} else {
		o.R.DeviceTypeDTBBlocks = append(o.R.DeviceTypeDTBBlocks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dtbBlockR{
				DeviceType: o,
			}
		} else {
			rel.R.DeviceType = o
		}
	}
	return nil
}

// SetDeviceTypeDTBBlocks removes all previously related items of the
// mtb_device_type replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DeviceType's DeviceTypeDTBBlocks accordingly.
// Replaces o.R.DeviceTypeDTBBlocks with related.
// Sets related.R.DeviceType's DeviceTypeDTBBlocks accordingly.
func (o *MTBDeviceType) SetDeviceTypeDTBBlocks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBBlock) error {
	query := "update `dtb_block` set `device_type_id` = null where `device_type_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.DeviceTypeDTBBlocks {
			queries.SetScanner(&rel.DeviceTypeID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.DeviceType = nil
		}

		o.R.DeviceTypeDTBBlocks = nil
	}
	return o.AddDeviceTypeDTBBlocks(ctx, exec, insert, related...)
}

// RemoveDeviceTypeDTBBlocks relationships from objects passed in.
// Removes related items from R.DeviceTypeDTBBlocks (uses pointer comparison, removal does not keep order)
// Sets related.R.DeviceType.
func (o *MTBDeviceType) RemoveDeviceTypeDTBBlocks(ctx context.Context, exec boil.ContextExecutor, related ...*DTBBlock) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DeviceTypeID, nil)
		if rel.R != nil {
			rel.R.DeviceType = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("device_type_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DeviceTypeDTBBlocks {
			if rel != ri {
				continue
			}

			ln := len(o.R.DeviceTypeDTBBlocks)
			if ln > 1 && i < ln-1 {
				o.R.DeviceTypeDTBBlocks[i] = o.R.DeviceTypeDTBBlocks[ln-1]
			}
			o.R.DeviceTypeDTBBlocks = o.R.DeviceTypeDTBBlocks[:ln-1]
			break
		}
	}

	return nil
}

// AddDeviceTypeDTBLayouts adds the given related objects to the existing relationships
// of the mtb_device_type, optionally inserting them as new records.
// Appends related to o.R.DeviceTypeDTBLayouts.
// Sets related.R.DeviceType appropriately.
func (o *MTBDeviceType) AddDeviceTypeDTBLayouts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBLayout) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DeviceTypeID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `dtb_layout` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"device_type_id"}),
				strmangle.WhereClause("`", "`", 0, dtbLayoutPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DeviceTypeID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &mtbDeviceTypeR{
			DeviceTypeDTBLayouts: related,
		}
	} else {
		o.R.DeviceTypeDTBLayouts = append(o.R.DeviceTypeDTBLayouts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dtbLayoutR{
				DeviceType: o,
			}
		} else {
			rel.R.DeviceType = o
		}
	}
	return nil
}

// SetDeviceTypeDTBLayouts removes all previously related items of the
// mtb_device_type replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DeviceType's DeviceTypeDTBLayouts accordingly.
// Replaces o.R.DeviceTypeDTBLayouts with related.
// Sets related.R.DeviceType's DeviceTypeDTBLayouts accordingly.
func (o *MTBDeviceType) SetDeviceTypeDTBLayouts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBLayout) error {
	query := "update `dtb_layout` set `device_type_id` = null where `device_type_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.DeviceTypeDTBLayouts {
			queries.SetScanner(&rel.DeviceTypeID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.DeviceType = nil
		}

		o.R.DeviceTypeDTBLayouts = nil
	}
	return o.AddDeviceTypeDTBLayouts(ctx, exec, insert, related...)
}

// RemoveDeviceTypeDTBLayouts relationships from objects passed in.
// Removes related items from R.DeviceTypeDTBLayouts (uses pointer comparison, removal does not keep order)
// Sets related.R.DeviceType.
func (o *MTBDeviceType) RemoveDeviceTypeDTBLayouts(ctx context.Context, exec boil.ContextExecutor, related ...*DTBLayout) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DeviceTypeID, nil)
		if rel.R != nil {
			rel.R.DeviceType = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("device_type_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DeviceTypeDTBLayouts {
			if rel != ri {
				continue
			}

			ln := len(o.R.DeviceTypeDTBLayouts)
			if ln > 1 && i < ln-1 {
				o.R.DeviceTypeDTBLayouts[i] = o.R.DeviceTypeDTBLayouts[ln-1]
			}
			o.R.DeviceTypeDTBLayouts = o.R.DeviceTypeDTBLayouts[:ln-1]
			break
		}
	}

	return nil
}

// AddDeviceTypeDTBOrders adds the given related objects to the existing relationships
// of the mtb_device_type, optionally inserting them as new records.
// Appends related to o.R.DeviceTypeDTBOrders.
// Sets related.R.DeviceType appropriately.
func (o *MTBDeviceType) AddDeviceTypeDTBOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBOrder) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DeviceTypeID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `dtb_order` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"device_type_id"}),
				strmangle.WhereClause("`", "`", 0, dtbOrderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DeviceTypeID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &mtbDeviceTypeR{
			DeviceTypeDTBOrders: related,
		}
	} else {
		o.R.DeviceTypeDTBOrders = append(o.R.DeviceTypeDTBOrders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dtbOrderR{
				DeviceType: o,
			}
		} else {
			rel.R.DeviceType = o
		}
	}
	return nil
}

// SetDeviceTypeDTBOrders removes all previously related items of the
// mtb_device_type replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DeviceType's DeviceTypeDTBOrders accordingly.
// Replaces o.R.DeviceTypeDTBOrders with related.
// Sets related.R.DeviceType's DeviceTypeDTBOrders accordingly.
func (o *MTBDeviceType) SetDeviceTypeDTBOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBOrder) error {
	query := "update `dtb_order` set `device_type_id` = null where `device_type_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.DeviceTypeDTBOrders {
			queries.SetScanner(&rel.DeviceTypeID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.DeviceType = nil
		}

		o.R.DeviceTypeDTBOrders = nil
	}
	return o.AddDeviceTypeDTBOrders(ctx, exec, insert, related...)
}

// RemoveDeviceTypeDTBOrders relationships from objects passed in.
// Removes related items from R.DeviceTypeDTBOrders (uses pointer comparison, removal does not keep order)
// Sets related.R.DeviceType.
func (o *MTBDeviceType) RemoveDeviceTypeDTBOrders(ctx context.Context, exec boil.ContextExecutor, related ...*DTBOrder) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DeviceTypeID, nil)
		if rel.R != nil {
			rel.R.DeviceType = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("device_type_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DeviceTypeDTBOrders {
			if rel != ri {
				continue
			}

			ln := len(o.R.DeviceTypeDTBOrders)
			if ln > 1 && i < ln-1 {
				o.R.DeviceTypeDTBOrders[i] = o.R.DeviceTypeDTBOrders[ln-1]
			}
			o.R.DeviceTypeDTBOrders = o.R.DeviceTypeDTBOrders[:ln-1]
			break
		}
	}

	return nil
}

// AddDeviceTypeDTBTemplates adds the given related objects to the existing relationships
// of the mtb_device_type, optionally inserting them as new records.
// Appends related to o.R.DeviceTypeDTBTemplates.
// Sets related.R.DeviceType appropriately.
func (o *MTBDeviceType) AddDeviceTypeDTBTemplates(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBTemplate) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DeviceTypeID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `dtb_template` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"device_type_id"}),
				strmangle.WhereClause("`", "`", 0, dtbTemplatePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DeviceTypeID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &mtbDeviceTypeR{
			DeviceTypeDTBTemplates: related,
		}
	} else {
		o.R.DeviceTypeDTBTemplates = append(o.R.DeviceTypeDTBTemplates, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dtbTemplateR{
				DeviceType: o,
			}
		} else {
			rel.R.DeviceType = o
		}
	}
	return nil
}

// SetDeviceTypeDTBTemplates removes all previously related items of the
// mtb_device_type replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DeviceType's DeviceTypeDTBTemplates accordingly.
// Replaces o.R.DeviceTypeDTBTemplates with related.
// Sets related.R.DeviceType's DeviceTypeDTBTemplates accordingly.
func (o *MTBDeviceType) SetDeviceTypeDTBTemplates(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBTemplate) error {
	query := "update `dtb_template` set `device_type_id` = null where `device_type_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.DeviceTypeDTBTemplates {
			queries.SetScanner(&rel.DeviceTypeID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.DeviceType = nil
		}

		o.R.DeviceTypeDTBTemplates = nil
	}
	return o.AddDeviceTypeDTBTemplates(ctx, exec, insert, related...)
}

// RemoveDeviceTypeDTBTemplates relationships from objects passed in.
// Removes related items from R.DeviceTypeDTBTemplates (uses pointer comparison, removal does not keep order)
// Sets related.R.DeviceType.
func (o *MTBDeviceType) RemoveDeviceTypeDTBTemplates(ctx context.Context, exec boil.ContextExecutor, related ...*DTBTemplate) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DeviceTypeID, nil)
		if rel.R != nil {
			rel.R.DeviceType = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("device_type_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DeviceTypeDTBTemplates {
			if rel != ri {
				continue
			}

			ln := len(o.R.DeviceTypeDTBTemplates)
			if ln > 1 && i < ln-1 {
				o.R.DeviceTypeDTBTemplates[i] = o.R.DeviceTypeDTBTemplates[ln-1]
			}
			o.R.DeviceTypeDTBTemplates = o.R.DeviceTypeDTBTemplates[:ln-1]
			break
		}
	}

	return nil
}

// MTBDeviceTypes retrieves all the records using an executor.
func MTBDeviceTypes(mods ...qm.QueryMod) mtbDeviceTypeQuery {
	mods = append(mods, qm.From("`mtb_device_type`"))
	return mtbDeviceTypeQuery{NewQuery(mods...)}
}

// FindMTBDeviceType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMTBDeviceType(ctx context.Context, exec boil.ContextExecutor, iD uint16, selectCols ...string) (*MTBDeviceType, error) {
	mtbDeviceTypeObj := &MTBDeviceType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `mtb_device_type` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, mtbDeviceTypeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from mtb_device_type")
	}

	return mtbDeviceTypeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MTBDeviceType) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no mtb_device_type provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mtbDeviceTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mtbDeviceTypeInsertCacheMut.RLock()
	cache, cached := mtbDeviceTypeInsertCache[key]
	mtbDeviceTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mtbDeviceTypeColumns,
			mtbDeviceTypeColumnsWithDefault,
			mtbDeviceTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mtbDeviceTypeType, mtbDeviceTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mtbDeviceTypeType, mtbDeviceTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `mtb_device_type` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `mtb_device_type` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `mtb_device_type` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, mtbDeviceTypePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into mtb_device_type")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for mtb_device_type")
	}

CacheNoHooks:
	if !cached {
		mtbDeviceTypeInsertCacheMut.Lock()
		mtbDeviceTypeInsertCache[key] = cache
		mtbDeviceTypeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MTBDeviceType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MTBDeviceType) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mtbDeviceTypeUpdateCacheMut.RLock()
	cache, cached := mtbDeviceTypeUpdateCache[key]
	mtbDeviceTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mtbDeviceTypeColumns,
			mtbDeviceTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update mtb_device_type, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `mtb_device_type` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, mtbDeviceTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mtbDeviceTypeType, mtbDeviceTypeMapping, append(wl, mtbDeviceTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update mtb_device_type row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for mtb_device_type")
	}

	if !cached {
		mtbDeviceTypeUpdateCacheMut.Lock()
		mtbDeviceTypeUpdateCache[key] = cache
		mtbDeviceTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mtbDeviceTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for mtb_device_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for mtb_device_type")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MTBDeviceTypeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mtbDeviceTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `mtb_device_type` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mtbDeviceTypePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in mtbDeviceType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all mtbDeviceType")
	}
	return rowsAff, nil
}

var mySQLMTBDeviceTypeUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MTBDeviceType) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no mtb_device_type provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mtbDeviceTypeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLMTBDeviceTypeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mtbDeviceTypeUpsertCacheMut.RLock()
	cache, cached := mtbDeviceTypeUpsertCache[key]
	mtbDeviceTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mtbDeviceTypeColumns,
			mtbDeviceTypeColumnsWithDefault,
			mtbDeviceTypeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			mtbDeviceTypeColumns,
			mtbDeviceTypePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("model: unable to upsert mtb_device_type, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "mtb_device_type", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `mtb_device_type` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(mtbDeviceTypeType, mtbDeviceTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mtbDeviceTypeType, mtbDeviceTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for mtb_device_type")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(mtbDeviceTypeType, mtbDeviceTypeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for mtb_device_type")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for mtb_device_type")
	}

CacheNoHooks:
	if !cached {
		mtbDeviceTypeUpsertCacheMut.Lock()
		mtbDeviceTypeUpsertCache[key] = cache
		mtbDeviceTypeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MTBDeviceType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MTBDeviceType) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no MTBDeviceType provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mtbDeviceTypePrimaryKeyMapping)
	sql := "DELETE FROM `mtb_device_type` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from mtb_device_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for mtb_device_type")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mtbDeviceTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no mtbDeviceTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from mtb_device_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for mtb_device_type")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MTBDeviceTypeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no MTBDeviceType slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(mtbDeviceTypeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mtbDeviceTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `mtb_device_type` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mtbDeviceTypePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from mtbDeviceType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for mtb_device_type")
	}

	if len(mtbDeviceTypeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MTBDeviceType) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMTBDeviceType(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MTBDeviceTypeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MTBDeviceTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mtbDeviceTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `mtb_device_type`.* FROM `mtb_device_type` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mtbDeviceTypePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in MTBDeviceTypeSlice")
	}

	*o = slice

	return nil
}

// MTBDeviceTypeExists checks if the MTBDeviceType row exists.
func MTBDeviceTypeExists(ctx context.Context, exec boil.ContextExecutor, iD uint16) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `mtb_device_type` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if mtb_device_type exists")
	}

	return exists, nil
}
