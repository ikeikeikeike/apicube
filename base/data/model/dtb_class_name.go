// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// DTBClassName is an object representing the database table.
type DTBClassName struct {
	ID                uint        `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatorID         null.Uint   `boil:"creator_id" json:"creator_id,omitempty" toml:"creator_id" yaml:"creator_id,omitempty"`
	BackendName       null.String `boil:"backend_name" json:"backend_name,omitempty" toml:"backend_name" yaml:"backend_name,omitempty"`
	Name              string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	SortNo            uint        `boil:"sort_no" json:"sort_no" toml:"sort_no" yaml:"sort_no"`
	CreateDate        time.Time   `boil:"create_date" json:"create_date" toml:"create_date" yaml:"create_date"`
	UpdateDate        time.Time   `boil:"update_date" json:"update_date" toml:"update_date" yaml:"update_date"`
	DiscriminatorType string      `boil:"discriminator_type" json:"discriminator_type" toml:"discriminator_type" yaml:"discriminator_type"`

	R *dtbClassNameR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dtbClassNameL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DTBClassNameColumns = struct {
	ID                string
	CreatorID         string
	BackendName       string
	Name              string
	SortNo            string
	CreateDate        string
	UpdateDate        string
	DiscriminatorType string
}{
	ID:                "id",
	CreatorID:         "creator_id",
	BackendName:       "backend_name",
	Name:              "name",
	SortNo:            "sort_no",
	CreateDate:        "create_date",
	UpdateDate:        "update_date",
	DiscriminatorType: "discriminator_type",
}

// Generated where

var DTBClassNameWhere = struct {
	ID                whereHelperuint
	CreatorID         whereHelpernull_Uint
	BackendName       whereHelpernull_String
	Name              whereHelperstring
	SortNo            whereHelperuint
	CreateDate        whereHelpertime_Time
	UpdateDate        whereHelpertime_Time
	DiscriminatorType whereHelperstring
}{
	ID:                whereHelperuint{field: `id`},
	CreatorID:         whereHelpernull_Uint{field: `creator_id`},
	BackendName:       whereHelpernull_String{field: `backend_name`},
	Name:              whereHelperstring{field: `name`},
	SortNo:            whereHelperuint{field: `sort_no`},
	CreateDate:        whereHelpertime_Time{field: `create_date`},
	UpdateDate:        whereHelpertime_Time{field: `update_date`},
	DiscriminatorType: whereHelperstring{field: `discriminator_type`},
}

// DTBClassNameRels is where relationship names are stored.
var DTBClassNameRels = struct {
	Creator                     string
	ClassNameDTBClassCategories string
}{
	Creator:                     "Creator",
	ClassNameDTBClassCategories: "ClassNameDTBClassCategories",
}

// dtbClassNameR is where relationships are stored.
type dtbClassNameR struct {
	Creator                     *DTBMember
	ClassNameDTBClassCategories DTBClassCategorySlice
}

// NewStruct creates a new relationship struct
func (*dtbClassNameR) NewStruct() *dtbClassNameR {
	return &dtbClassNameR{}
}

// dtbClassNameL is where Load methods for each relationship are stored.
type dtbClassNameL struct{}

var (
	dtbClassNameColumns               = []string{"id", "creator_id", "backend_name", "name", "sort_no", "create_date", "update_date", "discriminator_type"}
	dtbClassNameColumnsWithoutDefault = []string{"creator_id", "backend_name", "name", "sort_no", "create_date", "update_date", "discriminator_type"}
	dtbClassNameColumnsWithDefault    = []string{"id"}
	dtbClassNamePrimaryKeyColumns     = []string{"id"}
)

type (
	// DTBClassNameSlice is an alias for a slice of pointers to DTBClassName.
	// This should generally be used opposed to []DTBClassName.
	DTBClassNameSlice []*DTBClassName
	// DTBClassNameHook is the signature for custom DTBClassName hook methods
	DTBClassNameHook func(context.Context, boil.ContextExecutor, *DTBClassName) error

	dtbClassNameQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dtbClassNameType                 = reflect.TypeOf(&DTBClassName{})
	dtbClassNameMapping              = queries.MakeStructMapping(dtbClassNameType)
	dtbClassNamePrimaryKeyMapping, _ = queries.BindMapping(dtbClassNameType, dtbClassNameMapping, dtbClassNamePrimaryKeyColumns)
	dtbClassNameInsertCacheMut       sync.RWMutex
	dtbClassNameInsertCache          = make(map[string]insertCache)
	dtbClassNameUpdateCacheMut       sync.RWMutex
	dtbClassNameUpdateCache          = make(map[string]updateCache)
	dtbClassNameUpsertCacheMut       sync.RWMutex
	dtbClassNameUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dtbClassNameBeforeInsertHooks []DTBClassNameHook
var dtbClassNameBeforeUpdateHooks []DTBClassNameHook
var dtbClassNameBeforeDeleteHooks []DTBClassNameHook
var dtbClassNameBeforeUpsertHooks []DTBClassNameHook

var dtbClassNameAfterInsertHooks []DTBClassNameHook
var dtbClassNameAfterSelectHooks []DTBClassNameHook
var dtbClassNameAfterUpdateHooks []DTBClassNameHook
var dtbClassNameAfterDeleteHooks []DTBClassNameHook
var dtbClassNameAfterUpsertHooks []DTBClassNameHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DTBClassName) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbClassNameBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DTBClassName) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbClassNameBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DTBClassName) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbClassNameBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DTBClassName) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbClassNameBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DTBClassName) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbClassNameAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DTBClassName) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbClassNameAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DTBClassName) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbClassNameAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DTBClassName) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbClassNameAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DTBClassName) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbClassNameAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDTBClassNameHook registers your hook function for all future operations.
func AddDTBClassNameHook(hookPoint boil.HookPoint, dtbClassNameHook DTBClassNameHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		dtbClassNameBeforeInsertHooks = append(dtbClassNameBeforeInsertHooks, dtbClassNameHook)
	case boil.BeforeUpdateHook:
		dtbClassNameBeforeUpdateHooks = append(dtbClassNameBeforeUpdateHooks, dtbClassNameHook)
	case boil.BeforeDeleteHook:
		dtbClassNameBeforeDeleteHooks = append(dtbClassNameBeforeDeleteHooks, dtbClassNameHook)
	case boil.BeforeUpsertHook:
		dtbClassNameBeforeUpsertHooks = append(dtbClassNameBeforeUpsertHooks, dtbClassNameHook)
	case boil.AfterInsertHook:
		dtbClassNameAfterInsertHooks = append(dtbClassNameAfterInsertHooks, dtbClassNameHook)
	case boil.AfterSelectHook:
		dtbClassNameAfterSelectHooks = append(dtbClassNameAfterSelectHooks, dtbClassNameHook)
	case boil.AfterUpdateHook:
		dtbClassNameAfterUpdateHooks = append(dtbClassNameAfterUpdateHooks, dtbClassNameHook)
	case boil.AfterDeleteHook:
		dtbClassNameAfterDeleteHooks = append(dtbClassNameAfterDeleteHooks, dtbClassNameHook)
	case boil.AfterUpsertHook:
		dtbClassNameAfterUpsertHooks = append(dtbClassNameAfterUpsertHooks, dtbClassNameHook)
	}
}

// One returns a single dtbClassName record from the query.
func (q dtbClassNameQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DTBClassName, error) {
	o := &DTBClassName{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for dtb_class_name")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DTBClassName records from the query.
func (q dtbClassNameQuery) All(ctx context.Context, exec boil.ContextExecutor) (DTBClassNameSlice, error) {
	var o []*DTBClassName

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to DTBClassName slice")
	}

	if len(dtbClassNameAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DTBClassName records in the query.
func (q dtbClassNameQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count dtb_class_name rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dtbClassNameQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if dtb_class_name exists")
	}

	return count > 0, nil
}

// Creator pointed to by the foreign key.
func (o *DTBClassName) Creator(mods ...qm.QueryMod) dtbMemberQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.CreatorID),
	}

	queryMods = append(queryMods, mods...)

	query := DTBMembers(queryMods...)
	queries.SetFrom(query.Query, "`dtb_member`")

	return query
}

// ClassNameDTBClassCategories retrieves all the dtb_class_category's DTBClassCategories with an executor via class_name_id column.
func (o *DTBClassName) ClassNameDTBClassCategories(mods ...qm.QueryMod) dtbClassCategoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`dtb_class_category`.`class_name_id`=?", o.ID),
	)

	query := DTBClassCategories(queryMods...)
	queries.SetFrom(query.Query, "`dtb_class_category`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`dtb_class_category`.*"})
	}

	return query
}

// LoadCreator allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dtbClassNameL) LoadCreator(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBClassName interface{}, mods queries.Applicator) error {
	var slice []*DTBClassName
	var object *DTBClassName

	if singular {
		object = maybeDTBClassName.(*DTBClassName)
	} else {
		slice = *maybeDTBClassName.(*[]*DTBClassName)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbClassNameR{}
		}
		if !queries.IsNil(object.CreatorID) {
			args = append(args, object.CreatorID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbClassNameR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CreatorID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CreatorID) {
				args = append(args, obj.CreatorID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_member`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DTBMember")
	}

	var resultSlice []*DTBMember
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DTBMember")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dtb_member")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_member")
	}

	if len(dtbClassNameAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Creator = foreign
		if foreign.R == nil {
			foreign.R = &dtbMemberR{}
		}
		foreign.R.CreatorDTBClassNames = append(foreign.R.CreatorDTBClassNames, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CreatorID, foreign.ID) {
				local.R.Creator = foreign
				if foreign.R == nil {
					foreign.R = &dtbMemberR{}
				}
				foreign.R.CreatorDTBClassNames = append(foreign.R.CreatorDTBClassNames, local)
				break
			}
		}
	}

	return nil
}

// LoadClassNameDTBClassCategories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dtbClassNameL) LoadClassNameDTBClassCategories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBClassName interface{}, mods queries.Applicator) error {
	var slice []*DTBClassName
	var object *DTBClassName

	if singular {
		object = maybeDTBClassName.(*DTBClassName)
	} else {
		slice = *maybeDTBClassName.(*[]*DTBClassName)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbClassNameR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbClassNameR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_class_category`), qm.WhereIn(`class_name_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dtb_class_category")
	}

	var resultSlice []*DTBClassCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dtb_class_category")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dtb_class_category")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_class_category")
	}

	if len(dtbClassCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ClassNameDTBClassCategories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dtbClassCategoryR{}
			}
			foreign.R.ClassName = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ClassNameID) {
				local.R.ClassNameDTBClassCategories = append(local.R.ClassNameDTBClassCategories, foreign)
				if foreign.R == nil {
					foreign.R = &dtbClassCategoryR{}
				}
				foreign.R.ClassName = local
				break
			}
		}
	}

	return nil
}

// SetCreator of the dtbClassName to the related item.
// Sets o.R.Creator to related.
// Adds o to related.R.CreatorDTBClassNames.
func (o *DTBClassName) SetCreator(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DTBMember) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `dtb_class_name` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"creator_id"}),
		strmangle.WhereClause("`", "`", 0, dtbClassNamePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CreatorID, related.ID)
	if o.R == nil {
		o.R = &dtbClassNameR{
			Creator: related,
		}
	} else {
		o.R.Creator = related
	}

	if related.R == nil {
		related.R = &dtbMemberR{
			CreatorDTBClassNames: DTBClassNameSlice{o},
		}
	} else {
		related.R.CreatorDTBClassNames = append(related.R.CreatorDTBClassNames, o)
	}

	return nil
}

// RemoveCreator relationship.
// Sets o.R.Creator to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *DTBClassName) RemoveCreator(ctx context.Context, exec boil.ContextExecutor, related *DTBMember) error {
	var err error

	queries.SetScanner(&o.CreatorID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("creator_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Creator = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CreatorDTBClassNames {
		if queries.Equal(o.CreatorID, ri.CreatorID) {
			continue
		}

		ln := len(related.R.CreatorDTBClassNames)
		if ln > 1 && i < ln-1 {
			related.R.CreatorDTBClassNames[i] = related.R.CreatorDTBClassNames[ln-1]
		}
		related.R.CreatorDTBClassNames = related.R.CreatorDTBClassNames[:ln-1]
		break
	}
	return nil
}

// AddClassNameDTBClassCategories adds the given related objects to the existing relationships
// of the dtb_class_name, optionally inserting them as new records.
// Appends related to o.R.ClassNameDTBClassCategories.
// Sets related.R.ClassName appropriately.
func (o *DTBClassName) AddClassNameDTBClassCategories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBClassCategory) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ClassNameID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `dtb_class_category` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"class_name_id"}),
				strmangle.WhereClause("`", "`", 0, dtbClassCategoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ClassNameID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &dtbClassNameR{
			ClassNameDTBClassCategories: related,
		}
	} else {
		o.R.ClassNameDTBClassCategories = append(o.R.ClassNameDTBClassCategories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dtbClassCategoryR{
				ClassName: o,
			}
		} else {
			rel.R.ClassName = o
		}
	}
	return nil
}

// SetClassNameDTBClassCategories removes all previously related items of the
// dtb_class_name replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ClassName's ClassNameDTBClassCategories accordingly.
// Replaces o.R.ClassNameDTBClassCategories with related.
// Sets related.R.ClassName's ClassNameDTBClassCategories accordingly.
func (o *DTBClassName) SetClassNameDTBClassCategories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBClassCategory) error {
	query := "update `dtb_class_category` set `class_name_id` = null where `class_name_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ClassNameDTBClassCategories {
			queries.SetScanner(&rel.ClassNameID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ClassName = nil
		}

		o.R.ClassNameDTBClassCategories = nil
	}
	return o.AddClassNameDTBClassCategories(ctx, exec, insert, related...)
}

// RemoveClassNameDTBClassCategories relationships from objects passed in.
// Removes related items from R.ClassNameDTBClassCategories (uses pointer comparison, removal does not keep order)
// Sets related.R.ClassName.
func (o *DTBClassName) RemoveClassNameDTBClassCategories(ctx context.Context, exec boil.ContextExecutor, related ...*DTBClassCategory) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ClassNameID, nil)
		if rel.R != nil {
			rel.R.ClassName = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("class_name_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ClassNameDTBClassCategories {
			if rel != ri {
				continue
			}

			ln := len(o.R.ClassNameDTBClassCategories)
			if ln > 1 && i < ln-1 {
				o.R.ClassNameDTBClassCategories[i] = o.R.ClassNameDTBClassCategories[ln-1]
			}
			o.R.ClassNameDTBClassCategories = o.R.ClassNameDTBClassCategories[:ln-1]
			break
		}
	}

	return nil
}

// DTBClassNames retrieves all the records using an executor.
func DTBClassNames(mods ...qm.QueryMod) dtbClassNameQuery {
	mods = append(mods, qm.From("`dtb_class_name`"))
	return dtbClassNameQuery{NewQuery(mods...)}
}

// FindDTBClassName retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDTBClassName(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*DTBClassName, error) {
	dtbClassNameObj := &DTBClassName{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `dtb_class_name` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, dtbClassNameObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from dtb_class_name")
	}

	return dtbClassNameObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DTBClassName) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no dtb_class_name provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dtbClassNameColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dtbClassNameInsertCacheMut.RLock()
	cache, cached := dtbClassNameInsertCache[key]
	dtbClassNameInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dtbClassNameColumns,
			dtbClassNameColumnsWithDefault,
			dtbClassNameColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dtbClassNameType, dtbClassNameMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dtbClassNameType, dtbClassNameMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `dtb_class_name` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `dtb_class_name` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `dtb_class_name` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dtbClassNamePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into dtb_class_name")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == dtbClassNameMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for dtb_class_name")
	}

CacheNoHooks:
	if !cached {
		dtbClassNameInsertCacheMut.Lock()
		dtbClassNameInsertCache[key] = cache
		dtbClassNameInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DTBClassName.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DTBClassName) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dtbClassNameUpdateCacheMut.RLock()
	cache, cached := dtbClassNameUpdateCache[key]
	dtbClassNameUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dtbClassNameColumns,
			dtbClassNamePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update dtb_class_name, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `dtb_class_name` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dtbClassNamePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dtbClassNameType, dtbClassNameMapping, append(wl, dtbClassNamePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update dtb_class_name row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for dtb_class_name")
	}

	if !cached {
		dtbClassNameUpdateCacheMut.Lock()
		dtbClassNameUpdateCache[key] = cache
		dtbClassNameUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dtbClassNameQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for dtb_class_name")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for dtb_class_name")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DTBClassNameSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbClassNamePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `dtb_class_name` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbClassNamePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in dtbClassName slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all dtbClassName")
	}
	return rowsAff, nil
}

var mySQLDTBClassNameUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DTBClassName) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no dtb_class_name provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dtbClassNameColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDTBClassNameUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dtbClassNameUpsertCacheMut.RLock()
	cache, cached := dtbClassNameUpsertCache[key]
	dtbClassNameUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dtbClassNameColumns,
			dtbClassNameColumnsWithDefault,
			dtbClassNameColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			dtbClassNameColumns,
			dtbClassNamePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("model: unable to upsert dtb_class_name, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "dtb_class_name", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `dtb_class_name` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dtbClassNameType, dtbClassNameMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dtbClassNameType, dtbClassNameMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for dtb_class_name")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == dtbClassNameMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dtbClassNameType, dtbClassNameMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for dtb_class_name")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for dtb_class_name")
	}

CacheNoHooks:
	if !cached {
		dtbClassNameUpsertCacheMut.Lock()
		dtbClassNameUpsertCache[key] = cache
		dtbClassNameUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DTBClassName record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DTBClassName) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no DTBClassName provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dtbClassNamePrimaryKeyMapping)
	sql := "DELETE FROM `dtb_class_name` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from dtb_class_name")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for dtb_class_name")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dtbClassNameQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no dtbClassNameQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from dtb_class_name")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for dtb_class_name")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DTBClassNameSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no DTBClassName slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(dtbClassNameBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbClassNamePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `dtb_class_name` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbClassNamePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from dtbClassName slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for dtb_class_name")
	}

	if len(dtbClassNameAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DTBClassName) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDTBClassName(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DTBClassNameSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DTBClassNameSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbClassNamePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `dtb_class_name`.* FROM `dtb_class_name` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbClassNamePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in DTBClassNameSlice")
	}

	*o = slice

	return nil
}

// DTBClassNameExists checks if the DTBClassName row exists.
func DTBClassNameExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `dtb_class_name` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if dtb_class_name exists")
	}

	return exists, nil
}
