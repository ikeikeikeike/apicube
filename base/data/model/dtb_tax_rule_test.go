// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDTBTaxRules(t *testing.T) {
	t.Parallel()

	query := DTBTaxRules()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDTBTaxRulesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBTaxRule{}
	if err = randomize.Struct(seed, o, dtbTaxRuleDBTypes, true, dtbTaxRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTaxRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBTaxRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBTaxRulesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBTaxRule{}
	if err = randomize.Struct(seed, o, dtbTaxRuleDBTypes, true, dtbTaxRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTaxRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DTBTaxRules().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBTaxRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBTaxRulesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBTaxRule{}
	if err = randomize.Struct(seed, o, dtbTaxRuleDBTypes, true, dtbTaxRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTaxRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBTaxRuleSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBTaxRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBTaxRulesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBTaxRule{}
	if err = randomize.Struct(seed, o, dtbTaxRuleDBTypes, true, dtbTaxRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTaxRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DTBTaxRuleExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DTBTaxRule exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DTBTaxRuleExists to return true, but got false.")
	}
}

func testDTBTaxRulesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBTaxRule{}
	if err = randomize.Struct(seed, o, dtbTaxRuleDBTypes, true, dtbTaxRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTaxRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dtbTaxRuleFound, err := FindDTBTaxRule(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if dtbTaxRuleFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDTBTaxRulesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBTaxRule{}
	if err = randomize.Struct(seed, o, dtbTaxRuleDBTypes, true, dtbTaxRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTaxRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DTBTaxRules().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDTBTaxRulesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBTaxRule{}
	if err = randomize.Struct(seed, o, dtbTaxRuleDBTypes, true, dtbTaxRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTaxRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DTBTaxRules().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDTBTaxRulesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtbTaxRuleOne := &DTBTaxRule{}
	dtbTaxRuleTwo := &DTBTaxRule{}
	if err = randomize.Struct(seed, dtbTaxRuleOne, dtbTaxRuleDBTypes, false, dtbTaxRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTaxRule struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbTaxRuleTwo, dtbTaxRuleDBTypes, false, dtbTaxRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTaxRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbTaxRuleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbTaxRuleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBTaxRules().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDTBTaxRulesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dtbTaxRuleOne := &DTBTaxRule{}
	dtbTaxRuleTwo := &DTBTaxRule{}
	if err = randomize.Struct(seed, dtbTaxRuleOne, dtbTaxRuleDBTypes, false, dtbTaxRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTaxRule struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbTaxRuleTwo, dtbTaxRuleDBTypes, false, dtbTaxRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTaxRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbTaxRuleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbTaxRuleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBTaxRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dtbTaxRuleBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBTaxRule) error {
	*o = DTBTaxRule{}
	return nil
}

func dtbTaxRuleAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBTaxRule) error {
	*o = DTBTaxRule{}
	return nil
}

func dtbTaxRuleAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DTBTaxRule) error {
	*o = DTBTaxRule{}
	return nil
}

func dtbTaxRuleBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBTaxRule) error {
	*o = DTBTaxRule{}
	return nil
}

func dtbTaxRuleAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBTaxRule) error {
	*o = DTBTaxRule{}
	return nil
}

func dtbTaxRuleBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBTaxRule) error {
	*o = DTBTaxRule{}
	return nil
}

func dtbTaxRuleAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBTaxRule) error {
	*o = DTBTaxRule{}
	return nil
}

func dtbTaxRuleBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBTaxRule) error {
	*o = DTBTaxRule{}
	return nil
}

func dtbTaxRuleAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBTaxRule) error {
	*o = DTBTaxRule{}
	return nil
}

func testDTBTaxRulesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DTBTaxRule{}
	o := &DTBTaxRule{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dtbTaxRuleDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBTaxRule object: %s", err)
	}

	AddDTBTaxRuleHook(boil.BeforeInsertHook, dtbTaxRuleBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dtbTaxRuleBeforeInsertHooks = []DTBTaxRuleHook{}

	AddDTBTaxRuleHook(boil.AfterInsertHook, dtbTaxRuleAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dtbTaxRuleAfterInsertHooks = []DTBTaxRuleHook{}

	AddDTBTaxRuleHook(boil.AfterSelectHook, dtbTaxRuleAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dtbTaxRuleAfterSelectHooks = []DTBTaxRuleHook{}

	AddDTBTaxRuleHook(boil.BeforeUpdateHook, dtbTaxRuleBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dtbTaxRuleBeforeUpdateHooks = []DTBTaxRuleHook{}

	AddDTBTaxRuleHook(boil.AfterUpdateHook, dtbTaxRuleAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dtbTaxRuleAfterUpdateHooks = []DTBTaxRuleHook{}

	AddDTBTaxRuleHook(boil.BeforeDeleteHook, dtbTaxRuleBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dtbTaxRuleBeforeDeleteHooks = []DTBTaxRuleHook{}

	AddDTBTaxRuleHook(boil.AfterDeleteHook, dtbTaxRuleAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dtbTaxRuleAfterDeleteHooks = []DTBTaxRuleHook{}

	AddDTBTaxRuleHook(boil.BeforeUpsertHook, dtbTaxRuleBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dtbTaxRuleBeforeUpsertHooks = []DTBTaxRuleHook{}

	AddDTBTaxRuleHook(boil.AfterUpsertHook, dtbTaxRuleAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dtbTaxRuleAfterUpsertHooks = []DTBTaxRuleHook{}
}

func testDTBTaxRulesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBTaxRule{}
	if err = randomize.Struct(seed, o, dtbTaxRuleDBTypes, true, dtbTaxRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTaxRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBTaxRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBTaxRulesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBTaxRule{}
	if err = randomize.Struct(seed, o, dtbTaxRuleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DTBTaxRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dtbTaxRuleColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DTBTaxRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBTaxRuleToOneMTBRoundingTypeUsingRoundingType(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBTaxRule
	var foreign MTBRoundingType

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbTaxRuleDBTypes, true, dtbTaxRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTaxRule struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, mtbRoundingTypeDBTypes, false, mtbRoundingTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBRoundingType struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.RoundingTypeID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.RoundingType().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBTaxRuleSlice{&local}
	if err = local.L.LoadRoundingType(ctx, tx, false, (*[]*DTBTaxRule)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RoundingType == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.RoundingType = nil
	if err = local.L.LoadRoundingType(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RoundingType == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBTaxRuleToOneDTBProductClassUsingProductClass(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBTaxRule
	var foreign DTBProductClass

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbTaxRuleDBTypes, true, dtbTaxRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTaxRule struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dtbProductClassDBTypes, false, dtbProductClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProductClass struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ProductClassID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ProductClass().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBTaxRuleSlice{&local}
	if err = local.L.LoadProductClass(ctx, tx, false, (*[]*DTBTaxRule)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ProductClass == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ProductClass = nil
	if err = local.L.LoadProductClass(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ProductClass == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBTaxRuleToOneDTBProductUsingProduct(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBTaxRule
	var foreign DTBProduct

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbTaxRuleDBTypes, true, dtbTaxRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTaxRule struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dtbProductDBTypes, false, dtbProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBProduct struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ProductID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Product().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBTaxRuleSlice{&local}
	if err = local.L.LoadProduct(ctx, tx, false, (*[]*DTBTaxRule)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Product == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Product = nil
	if err = local.L.LoadProduct(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Product == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBTaxRuleToOneDTBMemberUsingCreator(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBTaxRule
	var foreign DTBMember

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbTaxRuleDBTypes, true, dtbTaxRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTaxRule struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dtbMemberDBTypes, false, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CreatorID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Creator().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBTaxRuleSlice{&local}
	if err = local.L.LoadCreator(ctx, tx, false, (*[]*DTBTaxRule)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Creator == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Creator = nil
	if err = local.L.LoadCreator(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Creator == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBTaxRuleToOneMTBPrefUsingPref(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBTaxRule
	var foreign MTBPref

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbTaxRuleDBTypes, true, dtbTaxRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTaxRule struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, mtbPrefDBTypes, false, mtbPrefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPref struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.PrefID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Pref().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBTaxRuleSlice{&local}
	if err = local.L.LoadPref(ctx, tx, false, (*[]*DTBTaxRule)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Pref == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Pref = nil
	if err = local.L.LoadPref(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Pref == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBTaxRuleToOneMTBCountryUsingCountry(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBTaxRule
	var foreign MTBCountry

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbTaxRuleDBTypes, true, dtbTaxRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTaxRule struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, mtbCountryDBTypes, false, mtbCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCountry struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CountryID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Country().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBTaxRuleSlice{&local}
	if err = local.L.LoadCountry(ctx, tx, false, (*[]*DTBTaxRule)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Country == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Country = nil
	if err = local.L.LoadCountry(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Country == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBTaxRuleToOneSetOpMTBRoundingTypeUsingRoundingType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBTaxRule
	var b, c MTBRoundingType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbTaxRuleDBTypes, false, strmangle.SetComplement(dtbTaxRulePrimaryKeyColumns, dtbTaxRuleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbRoundingTypeDBTypes, false, strmangle.SetComplement(mtbRoundingTypePrimaryKeyColumns, mtbRoundingTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mtbRoundingTypeDBTypes, false, strmangle.SetComplement(mtbRoundingTypePrimaryKeyColumns, mtbRoundingTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MTBRoundingType{&b, &c} {
		err = a.SetRoundingType(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.RoundingType != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RoundingTypeDTBTaxRules[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.RoundingTypeID, x.ID) {
			t.Error("foreign key was wrong value", a.RoundingTypeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RoundingTypeID))
		reflect.Indirect(reflect.ValueOf(&a.RoundingTypeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.RoundingTypeID, x.ID) {
			t.Error("foreign key was wrong value", a.RoundingTypeID, x.ID)
		}
	}
}

func testDTBTaxRuleToOneRemoveOpMTBRoundingTypeUsingRoundingType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBTaxRule
	var b MTBRoundingType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbTaxRuleDBTypes, false, strmangle.SetComplement(dtbTaxRulePrimaryKeyColumns, dtbTaxRuleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbRoundingTypeDBTypes, false, strmangle.SetComplement(mtbRoundingTypePrimaryKeyColumns, mtbRoundingTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetRoundingType(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveRoundingType(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.RoundingType().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.RoundingType != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.RoundingTypeID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.RoundingTypeDTBTaxRules) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBTaxRuleToOneSetOpDTBProductClassUsingProductClass(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBTaxRule
	var b, c DTBProductClass

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbTaxRuleDBTypes, false, strmangle.SetComplement(dtbTaxRulePrimaryKeyColumns, dtbTaxRuleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbProductClassDBTypes, false, strmangle.SetComplement(dtbProductClassPrimaryKeyColumns, dtbProductClassColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbProductClassDBTypes, false, strmangle.SetComplement(dtbProductClassPrimaryKeyColumns, dtbProductClassColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DTBProductClass{&b, &c} {
		err = a.SetProductClass(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ProductClass != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProductClassDTBTaxRules[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ProductClassID, x.ID) {
			t.Error("foreign key was wrong value", a.ProductClassID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProductClassID))
		reflect.Indirect(reflect.ValueOf(&a.ProductClassID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ProductClassID, x.ID) {
			t.Error("foreign key was wrong value", a.ProductClassID, x.ID)
		}
	}
}

func testDTBTaxRuleToOneRemoveOpDTBProductClassUsingProductClass(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBTaxRule
	var b DTBProductClass

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbTaxRuleDBTypes, false, strmangle.SetComplement(dtbTaxRulePrimaryKeyColumns, dtbTaxRuleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbProductClassDBTypes, false, strmangle.SetComplement(dtbProductClassPrimaryKeyColumns, dtbProductClassColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetProductClass(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveProductClass(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ProductClass().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ProductClass != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ProductClassID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ProductClassDTBTaxRules) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBTaxRuleToOneSetOpDTBProductUsingProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBTaxRule
	var b, c DTBProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbTaxRuleDBTypes, false, strmangle.SetComplement(dtbTaxRulePrimaryKeyColumns, dtbTaxRuleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbProductDBTypes, false, strmangle.SetComplement(dtbProductPrimaryKeyColumns, dtbProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbProductDBTypes, false, strmangle.SetComplement(dtbProductPrimaryKeyColumns, dtbProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DTBProduct{&b, &c} {
		err = a.SetProduct(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Product != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProductDTBTaxRules[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ProductID, x.ID) {
			t.Error("foreign key was wrong value", a.ProductID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProductID))
		reflect.Indirect(reflect.ValueOf(&a.ProductID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ProductID, x.ID) {
			t.Error("foreign key was wrong value", a.ProductID, x.ID)
		}
	}
}

func testDTBTaxRuleToOneRemoveOpDTBProductUsingProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBTaxRule
	var b DTBProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbTaxRuleDBTypes, false, strmangle.SetComplement(dtbTaxRulePrimaryKeyColumns, dtbTaxRuleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbProductDBTypes, false, strmangle.SetComplement(dtbProductPrimaryKeyColumns, dtbProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetProduct(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveProduct(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Product().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Product != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ProductID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ProductDTBTaxRules) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBTaxRuleToOneSetOpDTBMemberUsingCreator(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBTaxRule
	var b, c DTBMember

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbTaxRuleDBTypes, false, strmangle.SetComplement(dtbTaxRulePrimaryKeyColumns, dtbTaxRuleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DTBMember{&b, &c} {
		err = a.SetCreator(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Creator != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CreatorDTBTaxRules[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CreatorID, x.ID) {
			t.Error("foreign key was wrong value", a.CreatorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CreatorID))
		reflect.Indirect(reflect.ValueOf(&a.CreatorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CreatorID, x.ID) {
			t.Error("foreign key was wrong value", a.CreatorID, x.ID)
		}
	}
}

func testDTBTaxRuleToOneRemoveOpDTBMemberUsingCreator(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBTaxRule
	var b DTBMember

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbTaxRuleDBTypes, false, strmangle.SetComplement(dtbTaxRulePrimaryKeyColumns, dtbTaxRuleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCreator(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCreator(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Creator().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Creator != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CreatorID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CreatorDTBTaxRules) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBTaxRuleToOneSetOpMTBPrefUsingPref(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBTaxRule
	var b, c MTBPref

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbTaxRuleDBTypes, false, strmangle.SetComplement(dtbTaxRulePrimaryKeyColumns, dtbTaxRuleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MTBPref{&b, &c} {
		err = a.SetPref(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Pref != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PrefDTBTaxRules[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.PrefID, x.ID) {
			t.Error("foreign key was wrong value", a.PrefID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PrefID))
		reflect.Indirect(reflect.ValueOf(&a.PrefID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.PrefID, x.ID) {
			t.Error("foreign key was wrong value", a.PrefID, x.ID)
		}
	}
}

func testDTBTaxRuleToOneRemoveOpMTBPrefUsingPref(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBTaxRule
	var b MTBPref

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbTaxRuleDBTypes, false, strmangle.SetComplement(dtbTaxRulePrimaryKeyColumns, dtbTaxRuleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetPref(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemovePref(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Pref().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Pref != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.PrefID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.PrefDTBTaxRules) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBTaxRuleToOneSetOpMTBCountryUsingCountry(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBTaxRule
	var b, c MTBCountry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbTaxRuleDBTypes, false, strmangle.SetComplement(dtbTaxRulePrimaryKeyColumns, dtbTaxRuleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbCountryDBTypes, false, strmangle.SetComplement(mtbCountryPrimaryKeyColumns, mtbCountryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mtbCountryDBTypes, false, strmangle.SetComplement(mtbCountryPrimaryKeyColumns, mtbCountryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MTBCountry{&b, &c} {
		err = a.SetCountry(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Country != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CountryDTBTaxRules[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CountryID, x.ID) {
			t.Error("foreign key was wrong value", a.CountryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CountryID))
		reflect.Indirect(reflect.ValueOf(&a.CountryID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CountryID, x.ID) {
			t.Error("foreign key was wrong value", a.CountryID, x.ID)
		}
	}
}

func testDTBTaxRuleToOneRemoveOpMTBCountryUsingCountry(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBTaxRule
	var b MTBCountry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbTaxRuleDBTypes, false, strmangle.SetComplement(dtbTaxRulePrimaryKeyColumns, dtbTaxRuleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbCountryDBTypes, false, strmangle.SetComplement(mtbCountryPrimaryKeyColumns, mtbCountryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCountry(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCountry(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Country().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Country != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CountryID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CountryDTBTaxRules) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBTaxRulesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBTaxRule{}
	if err = randomize.Struct(seed, o, dtbTaxRuleDBTypes, true, dtbTaxRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTaxRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBTaxRulesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBTaxRule{}
	if err = randomize.Struct(seed, o, dtbTaxRuleDBTypes, true, dtbTaxRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTaxRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBTaxRuleSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBTaxRulesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBTaxRule{}
	if err = randomize.Struct(seed, o, dtbTaxRuleDBTypes, true, dtbTaxRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTaxRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBTaxRules().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dtbTaxRuleDBTypes = map[string]string{`ID`: `int`, `ProductClassID`: `int`, `CreatorID`: `int`, `CountryID`: `smallint`, `PrefID`: `smallint`, `ProductID`: `int`, `RoundingTypeID`: `smallint`, `TaxRate`: `decimal`, `TaxAdjust`: `decimal`, `ApplyDate`: `datetime`, `CreateDate`: `datetime`, `UpdateDate`: `datetime`, `DiscriminatorType`: `varchar`}
	_                 = bytes.MinRead
)

func testDTBTaxRulesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dtbTaxRulePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dtbTaxRuleColumns) == len(dtbTaxRulePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBTaxRule{}
	if err = randomize.Struct(seed, o, dtbTaxRuleDBTypes, true, dtbTaxRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTaxRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBTaxRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbTaxRuleDBTypes, true, dtbTaxRulePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBTaxRule struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDTBTaxRulesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dtbTaxRuleColumns) == len(dtbTaxRulePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBTaxRule{}
	if err = randomize.Struct(seed, o, dtbTaxRuleDBTypes, true, dtbTaxRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBTaxRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBTaxRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbTaxRuleDBTypes, true, dtbTaxRulePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBTaxRule struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dtbTaxRuleColumns, dtbTaxRulePrimaryKeyColumns) {
		fields = dtbTaxRuleColumns
	} else {
		fields = strmangle.SetComplement(
			dtbTaxRuleColumns,
			dtbTaxRulePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DTBTaxRuleSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDTBTaxRulesUpsert(t *testing.T) {
	t.Parallel()

	if len(dtbTaxRuleColumns) == len(dtbTaxRulePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDTBTaxRuleUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DTBTaxRule{}
	if err = randomize.Struct(seed, &o, dtbTaxRuleDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBTaxRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBTaxRule: %s", err)
	}

	count, err := DTBTaxRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dtbTaxRuleDBTypes, false, dtbTaxRulePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBTaxRule struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBTaxRule: %s", err)
	}

	count, err = DTBTaxRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
