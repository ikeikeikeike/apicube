// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("DTBProducts", testDTBProducts)
	t.Run("DTBProductCategories", testDTBProductCategories)
	t.Run("DTBProductClasses", testDTBProductClasses)
	t.Run("DTBProductImages", testDTBProductImages)
	t.Run("DTBProductStocks", testDTBProductStocks)
	t.Run("DTBProductTags", testDTBProductTags)
}

func TestDelete(t *testing.T) {
	t.Run("DTBProducts", testDTBProductsDelete)
	t.Run("DTBProductCategories", testDTBProductCategoriesDelete)
	t.Run("DTBProductClasses", testDTBProductClassesDelete)
	t.Run("DTBProductImages", testDTBProductImagesDelete)
	t.Run("DTBProductStocks", testDTBProductStocksDelete)
	t.Run("DTBProductTags", testDTBProductTagsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("DTBProducts", testDTBProductsQueryDeleteAll)
	t.Run("DTBProductCategories", testDTBProductCategoriesQueryDeleteAll)
	t.Run("DTBProductClasses", testDTBProductClassesQueryDeleteAll)
	t.Run("DTBProductImages", testDTBProductImagesQueryDeleteAll)
	t.Run("DTBProductStocks", testDTBProductStocksQueryDeleteAll)
	t.Run("DTBProductTags", testDTBProductTagsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("DTBProducts", testDTBProductsSliceDeleteAll)
	t.Run("DTBProductCategories", testDTBProductCategoriesSliceDeleteAll)
	t.Run("DTBProductClasses", testDTBProductClassesSliceDeleteAll)
	t.Run("DTBProductImages", testDTBProductImagesSliceDeleteAll)
	t.Run("DTBProductStocks", testDTBProductStocksSliceDeleteAll)
	t.Run("DTBProductTags", testDTBProductTagsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("DTBProducts", testDTBProductsExists)
	t.Run("DTBProductCategories", testDTBProductCategoriesExists)
	t.Run("DTBProductClasses", testDTBProductClassesExists)
	t.Run("DTBProductImages", testDTBProductImagesExists)
	t.Run("DTBProductStocks", testDTBProductStocksExists)
	t.Run("DTBProductTags", testDTBProductTagsExists)
}

func TestFind(t *testing.T) {
	t.Run("DTBProducts", testDTBProductsFind)
	t.Run("DTBProductCategories", testDTBProductCategoriesFind)
	t.Run("DTBProductClasses", testDTBProductClassesFind)
	t.Run("DTBProductImages", testDTBProductImagesFind)
	t.Run("DTBProductStocks", testDTBProductStocksFind)
	t.Run("DTBProductTags", testDTBProductTagsFind)
}

func TestBind(t *testing.T) {
	t.Run("DTBProducts", testDTBProductsBind)
	t.Run("DTBProductCategories", testDTBProductCategoriesBind)
	t.Run("DTBProductClasses", testDTBProductClassesBind)
	t.Run("DTBProductImages", testDTBProductImagesBind)
	t.Run("DTBProductStocks", testDTBProductStocksBind)
	t.Run("DTBProductTags", testDTBProductTagsBind)
}

func TestOne(t *testing.T) {
	t.Run("DTBProducts", testDTBProductsOne)
	t.Run("DTBProductCategories", testDTBProductCategoriesOne)
	t.Run("DTBProductClasses", testDTBProductClassesOne)
	t.Run("DTBProductImages", testDTBProductImagesOne)
	t.Run("DTBProductStocks", testDTBProductStocksOne)
	t.Run("DTBProductTags", testDTBProductTagsOne)
}

func TestAll(t *testing.T) {
	t.Run("DTBProducts", testDTBProductsAll)
	t.Run("DTBProductCategories", testDTBProductCategoriesAll)
	t.Run("DTBProductClasses", testDTBProductClassesAll)
	t.Run("DTBProductImages", testDTBProductImagesAll)
	t.Run("DTBProductStocks", testDTBProductStocksAll)
	t.Run("DTBProductTags", testDTBProductTagsAll)
}

func TestCount(t *testing.T) {
	t.Run("DTBProducts", testDTBProductsCount)
	t.Run("DTBProductCategories", testDTBProductCategoriesCount)
	t.Run("DTBProductClasses", testDTBProductClassesCount)
	t.Run("DTBProductImages", testDTBProductImagesCount)
	t.Run("DTBProductStocks", testDTBProductStocksCount)
	t.Run("DTBProductTags", testDTBProductTagsCount)
}

func TestHooks(t *testing.T) {
	t.Run("DTBProducts", testDTBProductsHooks)
	t.Run("DTBProductCategories", testDTBProductCategoriesHooks)
	t.Run("DTBProductClasses", testDTBProductClassesHooks)
	t.Run("DTBProductImages", testDTBProductImagesHooks)
	t.Run("DTBProductStocks", testDTBProductStocksHooks)
	t.Run("DTBProductTags", testDTBProductTagsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("DTBProducts", testDTBProductsInsert)
	t.Run("DTBProducts", testDTBProductsInsertWhitelist)
	t.Run("DTBProductCategories", testDTBProductCategoriesInsert)
	t.Run("DTBProductCategories", testDTBProductCategoriesInsertWhitelist)
	t.Run("DTBProductClasses", testDTBProductClassesInsert)
	t.Run("DTBProductClasses", testDTBProductClassesInsertWhitelist)
	t.Run("DTBProductImages", testDTBProductImagesInsert)
	t.Run("DTBProductImages", testDTBProductImagesInsertWhitelist)
	t.Run("DTBProductStocks", testDTBProductStocksInsert)
	t.Run("DTBProductStocks", testDTBProductStocksInsertWhitelist)
	t.Run("DTBProductTags", testDTBProductTagsInsert)
	t.Run("DTBProductTags", testDTBProductTagsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("DTBProductCategoryToDTBProductUsingProduct", testDTBProductCategoryToOneDTBProductUsingProduct)
	t.Run("DTBProductClassToDTBProductUsingProduct", testDTBProductClassToOneDTBProductUsingProduct)
	t.Run("DTBProductImageToDTBProductUsingProduct", testDTBProductImageToOneDTBProductUsingProduct)
	t.Run("DTBProductStockToDTBProductClassUsingProductClass", testDTBProductStockToOneDTBProductClassUsingProductClass)
	t.Run("DTBProductTagToDTBProductUsingProduct", testDTBProductTagToOneDTBProductUsingProduct)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("DTBProductToProductDTBProductCategories", testDTBProductToManyProductDTBProductCategories)
	t.Run("DTBProductToProductDTBProductClasses", testDTBProductToManyProductDTBProductClasses)
	t.Run("DTBProductToProductDTBProductImages", testDTBProductToManyProductDTBProductImages)
	t.Run("DTBProductToProductDTBProductTags", testDTBProductToManyProductDTBProductTags)
	t.Run("DTBProductClassToProductClassDTBProductStocks", testDTBProductClassToManyProductClassDTBProductStocks)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("DTBProductCategoryToDTBProductUsingProductDTBProductCategories", testDTBProductCategoryToOneSetOpDTBProductUsingProduct)
	t.Run("DTBProductClassToDTBProductUsingProductDTBProductClasses", testDTBProductClassToOneSetOpDTBProductUsingProduct)
	t.Run("DTBProductImageToDTBProductUsingProductDTBProductImages", testDTBProductImageToOneSetOpDTBProductUsingProduct)
	t.Run("DTBProductStockToDTBProductClassUsingProductClassDTBProductStocks", testDTBProductStockToOneSetOpDTBProductClassUsingProductClass)
	t.Run("DTBProductTagToDTBProductUsingProductDTBProductTags", testDTBProductTagToOneSetOpDTBProductUsingProduct)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("DTBProductClassToDTBProductUsingProductDTBProductClasses", testDTBProductClassToOneRemoveOpDTBProductUsingProduct)
	t.Run("DTBProductImageToDTBProductUsingProductDTBProductImages", testDTBProductImageToOneRemoveOpDTBProductUsingProduct)
	t.Run("DTBProductStockToDTBProductClassUsingProductClassDTBProductStocks", testDTBProductStockToOneRemoveOpDTBProductClassUsingProductClass)
	t.Run("DTBProductTagToDTBProductUsingProductDTBProductTags", testDTBProductTagToOneRemoveOpDTBProductUsingProduct)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("DTBProductToProductDTBProductCategories", testDTBProductToManyAddOpProductDTBProductCategories)
	t.Run("DTBProductToProductDTBProductClasses", testDTBProductToManyAddOpProductDTBProductClasses)
	t.Run("DTBProductToProductDTBProductImages", testDTBProductToManyAddOpProductDTBProductImages)
	t.Run("DTBProductToProductDTBProductTags", testDTBProductToManyAddOpProductDTBProductTags)
	t.Run("DTBProductClassToProductClassDTBProductStocks", testDTBProductClassToManyAddOpProductClassDTBProductStocks)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("DTBProductToProductDTBProductClasses", testDTBProductToManySetOpProductDTBProductClasses)
	t.Run("DTBProductToProductDTBProductImages", testDTBProductToManySetOpProductDTBProductImages)
	t.Run("DTBProductToProductDTBProductTags", testDTBProductToManySetOpProductDTBProductTags)
	t.Run("DTBProductClassToProductClassDTBProductStocks", testDTBProductClassToManySetOpProductClassDTBProductStocks)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("DTBProductToProductDTBProductClasses", testDTBProductToManyRemoveOpProductDTBProductClasses)
	t.Run("DTBProductToProductDTBProductImages", testDTBProductToManyRemoveOpProductDTBProductImages)
	t.Run("DTBProductToProductDTBProductTags", testDTBProductToManyRemoveOpProductDTBProductTags)
	t.Run("DTBProductClassToProductClassDTBProductStocks", testDTBProductClassToManyRemoveOpProductClassDTBProductStocks)
}

func TestReload(t *testing.T) {
	t.Run("DTBProducts", testDTBProductsReload)
	t.Run("DTBProductCategories", testDTBProductCategoriesReload)
	t.Run("DTBProductClasses", testDTBProductClassesReload)
	t.Run("DTBProductImages", testDTBProductImagesReload)
	t.Run("DTBProductStocks", testDTBProductStocksReload)
	t.Run("DTBProductTags", testDTBProductTagsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("DTBProducts", testDTBProductsReloadAll)
	t.Run("DTBProductCategories", testDTBProductCategoriesReloadAll)
	t.Run("DTBProductClasses", testDTBProductClassesReloadAll)
	t.Run("DTBProductImages", testDTBProductImagesReloadAll)
	t.Run("DTBProductStocks", testDTBProductStocksReloadAll)
	t.Run("DTBProductTags", testDTBProductTagsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("DTBProducts", testDTBProductsSelect)
	t.Run("DTBProductCategories", testDTBProductCategoriesSelect)
	t.Run("DTBProductClasses", testDTBProductClassesSelect)
	t.Run("DTBProductImages", testDTBProductImagesSelect)
	t.Run("DTBProductStocks", testDTBProductStocksSelect)
	t.Run("DTBProductTags", testDTBProductTagsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("DTBProducts", testDTBProductsUpdate)
	t.Run("DTBProductCategories", testDTBProductCategoriesUpdate)
	t.Run("DTBProductClasses", testDTBProductClassesUpdate)
	t.Run("DTBProductImages", testDTBProductImagesUpdate)
	t.Run("DTBProductStocks", testDTBProductStocksUpdate)
	t.Run("DTBProductTags", testDTBProductTagsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("DTBProducts", testDTBProductsSliceUpdateAll)
	t.Run("DTBProductCategories", testDTBProductCategoriesSliceUpdateAll)
	t.Run("DTBProductClasses", testDTBProductClassesSliceUpdateAll)
	t.Run("DTBProductImages", testDTBProductImagesSliceUpdateAll)
	t.Run("DTBProductStocks", testDTBProductStocksSliceUpdateAll)
	t.Run("DTBProductTags", testDTBProductTagsSliceUpdateAll)
}
