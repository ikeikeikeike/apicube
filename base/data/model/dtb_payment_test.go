// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDTBPayments(t *testing.T) {
	t.Parallel()

	query := DTBPayments()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDTBPaymentsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPayment{}
	if err = randomize.Struct(seed, o, dtbPaymentDBTypes, true, dtbPaymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPayment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBPayments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBPaymentsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPayment{}
	if err = randomize.Struct(seed, o, dtbPaymentDBTypes, true, dtbPaymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPayment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DTBPayments().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBPayments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBPaymentsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPayment{}
	if err = randomize.Struct(seed, o, dtbPaymentDBTypes, true, dtbPaymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPayment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBPaymentSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBPayments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBPaymentsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPayment{}
	if err = randomize.Struct(seed, o, dtbPaymentDBTypes, true, dtbPaymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPayment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DTBPaymentExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DTBPayment exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DTBPaymentExists to return true, but got false.")
	}
}

func testDTBPaymentsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPayment{}
	if err = randomize.Struct(seed, o, dtbPaymentDBTypes, true, dtbPaymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPayment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dtbPaymentFound, err := FindDTBPayment(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if dtbPaymentFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDTBPaymentsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPayment{}
	if err = randomize.Struct(seed, o, dtbPaymentDBTypes, true, dtbPaymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPayment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DTBPayments().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDTBPaymentsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPayment{}
	if err = randomize.Struct(seed, o, dtbPaymentDBTypes, true, dtbPaymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPayment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DTBPayments().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDTBPaymentsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtbPaymentOne := &DTBPayment{}
	dtbPaymentTwo := &DTBPayment{}
	if err = randomize.Struct(seed, dtbPaymentOne, dtbPaymentDBTypes, false, dtbPaymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPayment struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbPaymentTwo, dtbPaymentDBTypes, false, dtbPaymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPayment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbPaymentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbPaymentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBPayments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDTBPaymentsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dtbPaymentOne := &DTBPayment{}
	dtbPaymentTwo := &DTBPayment{}
	if err = randomize.Struct(seed, dtbPaymentOne, dtbPaymentDBTypes, false, dtbPaymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPayment struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbPaymentTwo, dtbPaymentDBTypes, false, dtbPaymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPayment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbPaymentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbPaymentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBPayments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dtbPaymentBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBPayment) error {
	*o = DTBPayment{}
	return nil
}

func dtbPaymentAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBPayment) error {
	*o = DTBPayment{}
	return nil
}

func dtbPaymentAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DTBPayment) error {
	*o = DTBPayment{}
	return nil
}

func dtbPaymentBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBPayment) error {
	*o = DTBPayment{}
	return nil
}

func dtbPaymentAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBPayment) error {
	*o = DTBPayment{}
	return nil
}

func dtbPaymentBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBPayment) error {
	*o = DTBPayment{}
	return nil
}

func dtbPaymentAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBPayment) error {
	*o = DTBPayment{}
	return nil
}

func dtbPaymentBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBPayment) error {
	*o = DTBPayment{}
	return nil
}

func dtbPaymentAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBPayment) error {
	*o = DTBPayment{}
	return nil
}

func testDTBPaymentsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DTBPayment{}
	o := &DTBPayment{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dtbPaymentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBPayment object: %s", err)
	}

	AddDTBPaymentHook(boil.BeforeInsertHook, dtbPaymentBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dtbPaymentBeforeInsertHooks = []DTBPaymentHook{}

	AddDTBPaymentHook(boil.AfterInsertHook, dtbPaymentAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dtbPaymentAfterInsertHooks = []DTBPaymentHook{}

	AddDTBPaymentHook(boil.AfterSelectHook, dtbPaymentAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dtbPaymentAfterSelectHooks = []DTBPaymentHook{}

	AddDTBPaymentHook(boil.BeforeUpdateHook, dtbPaymentBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dtbPaymentBeforeUpdateHooks = []DTBPaymentHook{}

	AddDTBPaymentHook(boil.AfterUpdateHook, dtbPaymentAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dtbPaymentAfterUpdateHooks = []DTBPaymentHook{}

	AddDTBPaymentHook(boil.BeforeDeleteHook, dtbPaymentBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dtbPaymentBeforeDeleteHooks = []DTBPaymentHook{}

	AddDTBPaymentHook(boil.AfterDeleteHook, dtbPaymentAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dtbPaymentAfterDeleteHooks = []DTBPaymentHook{}

	AddDTBPaymentHook(boil.BeforeUpsertHook, dtbPaymentBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dtbPaymentBeforeUpsertHooks = []DTBPaymentHook{}

	AddDTBPaymentHook(boil.AfterUpsertHook, dtbPaymentAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dtbPaymentAfterUpsertHooks = []DTBPaymentHook{}
}

func testDTBPaymentsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPayment{}
	if err = randomize.Struct(seed, o, dtbPaymentDBTypes, true, dtbPaymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPayment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBPayments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBPaymentsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPayment{}
	if err = randomize.Struct(seed, o, dtbPaymentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DTBPayment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dtbPaymentColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DTBPayments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBPaymentToManyPaymentDTBOrders(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBPayment
	var b, c DTBOrder

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbPaymentDBTypes, true, dtbPaymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPayment struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbOrderDBTypes, false, dtbOrderColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbOrderDBTypes, false, dtbOrderColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.PaymentID, a.ID)
	queries.Assign(&c.PaymentID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PaymentDTBOrders().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.PaymentID, b.PaymentID) {
			bFound = true
		}
		if queries.Equal(v.PaymentID, c.PaymentID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBPaymentSlice{&a}
	if err = a.L.LoadPaymentDTBOrders(ctx, tx, false, (*[]*DTBPayment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PaymentDTBOrders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PaymentDTBOrders = nil
	if err = a.L.LoadPaymentDTBOrders(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PaymentDTBOrders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBPaymentToManyPaymentDTBPaymentOptions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBPayment
	var b, c DTBPaymentOption

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbPaymentDBTypes, true, dtbPaymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPayment struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbPaymentOptionDBTypes, false, dtbPaymentOptionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbPaymentOptionDBTypes, false, dtbPaymentOptionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PaymentID = a.ID
	c.PaymentID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PaymentDTBPaymentOptions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PaymentID == b.PaymentID {
			bFound = true
		}
		if v.PaymentID == c.PaymentID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBPaymentSlice{&a}
	if err = a.L.LoadPaymentDTBPaymentOptions(ctx, tx, false, (*[]*DTBPayment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PaymentDTBPaymentOptions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PaymentDTBPaymentOptions = nil
	if err = a.L.LoadPaymentDTBPaymentOptions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PaymentDTBPaymentOptions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBPaymentToManyAddOpPaymentDTBOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBPayment
	var b, c, d, e DTBOrder

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbPaymentDBTypes, false, strmangle.SetComplement(dtbPaymentPrimaryKeyColumns, dtbPaymentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBOrder{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBOrder{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPaymentDTBOrders(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.PaymentID) {
			t.Error("foreign key was wrong value", a.ID, first.PaymentID)
		}
		if !queries.Equal(a.ID, second.PaymentID) {
			t.Error("foreign key was wrong value", a.ID, second.PaymentID)
		}

		if first.R.Payment != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Payment != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PaymentDTBOrders[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PaymentDTBOrders[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PaymentDTBOrders().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDTBPaymentToManySetOpPaymentDTBOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBPayment
	var b, c, d, e DTBOrder

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbPaymentDBTypes, false, strmangle.SetComplement(dtbPaymentPrimaryKeyColumns, dtbPaymentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBOrder{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetPaymentDTBOrders(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PaymentDTBOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetPaymentDTBOrders(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PaymentDTBOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PaymentID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PaymentID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.PaymentID) {
		t.Error("foreign key was wrong value", a.ID, d.PaymentID)
	}
	if !queries.Equal(a.ID, e.PaymentID) {
		t.Error("foreign key was wrong value", a.ID, e.PaymentID)
	}

	if b.R.Payment != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Payment != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Payment != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Payment != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.PaymentDTBOrders[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.PaymentDTBOrders[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDTBPaymentToManyRemoveOpPaymentDTBOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBPayment
	var b, c, d, e DTBOrder

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbPaymentDBTypes, false, strmangle.SetComplement(dtbPaymentPrimaryKeyColumns, dtbPaymentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBOrder{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddPaymentDTBOrders(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PaymentDTBOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemovePaymentDTBOrders(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PaymentDTBOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PaymentID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PaymentID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Payment != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Payment != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Payment != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Payment != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.PaymentDTBOrders) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.PaymentDTBOrders[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.PaymentDTBOrders[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDTBPaymentToManyAddOpPaymentDTBPaymentOptions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBPayment
	var b, c, d, e DTBPaymentOption

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbPaymentDBTypes, false, strmangle.SetComplement(dtbPaymentPrimaryKeyColumns, dtbPaymentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBPaymentOption{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbPaymentOptionDBTypes, false, strmangle.SetComplement(dtbPaymentOptionPrimaryKeyColumns, dtbPaymentOptionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBPaymentOption{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPaymentDTBPaymentOptions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.PaymentID {
			t.Error("foreign key was wrong value", a.ID, first.PaymentID)
		}
		if a.ID != second.PaymentID {
			t.Error("foreign key was wrong value", a.ID, second.PaymentID)
		}

		if first.R.Payment != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Payment != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PaymentDTBPaymentOptions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PaymentDTBPaymentOptions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PaymentDTBPaymentOptions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testDTBPaymentToOneDTBMemberUsingCreator(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBPayment
	var foreign DTBMember

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbPaymentDBTypes, true, dtbPaymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPayment struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dtbMemberDBTypes, false, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CreatorID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Creator().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBPaymentSlice{&local}
	if err = local.L.LoadCreator(ctx, tx, false, (*[]*DTBPayment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Creator == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Creator = nil
	if err = local.L.LoadCreator(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Creator == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBPaymentToOneSetOpDTBMemberUsingCreator(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBPayment
	var b, c DTBMember

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbPaymentDBTypes, false, strmangle.SetComplement(dtbPaymentPrimaryKeyColumns, dtbPaymentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DTBMember{&b, &c} {
		err = a.SetCreator(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Creator != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CreatorDTBPayments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CreatorID, x.ID) {
			t.Error("foreign key was wrong value", a.CreatorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CreatorID))
		reflect.Indirect(reflect.ValueOf(&a.CreatorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CreatorID, x.ID) {
			t.Error("foreign key was wrong value", a.CreatorID, x.ID)
		}
	}
}

func testDTBPaymentToOneRemoveOpDTBMemberUsingCreator(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBPayment
	var b DTBMember

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbPaymentDBTypes, false, strmangle.SetComplement(dtbPaymentPrimaryKeyColumns, dtbPaymentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCreator(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCreator(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Creator().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Creator != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CreatorID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CreatorDTBPayments) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBPaymentsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPayment{}
	if err = randomize.Struct(seed, o, dtbPaymentDBTypes, true, dtbPaymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPayment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBPaymentsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPayment{}
	if err = randomize.Struct(seed, o, dtbPaymentDBTypes, true, dtbPaymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPayment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBPaymentSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBPaymentsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPayment{}
	if err = randomize.Struct(seed, o, dtbPaymentDBTypes, true, dtbPaymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPayment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBPayments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dtbPaymentDBTypes = map[string]string{`ID`: `int`, `CreatorID`: `int`, `PaymentMethod`: `varchar`, `Charge`: `decimal`, `RuleMax`: `decimal`, `SortNo`: `smallint`, `Fixed`: `tinyint`, `PaymentImage`: `varchar`, `RuleMin`: `decimal`, `MethodClass`: `varchar`, `Visible`: `tinyint`, `CreateDate`: `datetime`, `UpdateDate`: `datetime`, `DiscriminatorType`: `varchar`}
	_                 = bytes.MinRead
)

func testDTBPaymentsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dtbPaymentPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dtbPaymentColumns) == len(dtbPaymentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBPayment{}
	if err = randomize.Struct(seed, o, dtbPaymentDBTypes, true, dtbPaymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPayment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBPayments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbPaymentDBTypes, true, dtbPaymentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBPayment struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDTBPaymentsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dtbPaymentColumns) == len(dtbPaymentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBPayment{}
	if err = randomize.Struct(seed, o, dtbPaymentDBTypes, true, dtbPaymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPayment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBPayments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbPaymentDBTypes, true, dtbPaymentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBPayment struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dtbPaymentColumns, dtbPaymentPrimaryKeyColumns) {
		fields = dtbPaymentColumns
	} else {
		fields = strmangle.SetComplement(
			dtbPaymentColumns,
			dtbPaymentPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DTBPaymentSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDTBPaymentsUpsert(t *testing.T) {
	t.Parallel()

	if len(dtbPaymentColumns) == len(dtbPaymentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDTBPaymentUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DTBPayment{}
	if err = randomize.Struct(seed, &o, dtbPaymentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBPayment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBPayment: %s", err)
	}

	count, err := DTBPayments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dtbPaymentDBTypes, false, dtbPaymentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBPayment struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBPayment: %s", err)
	}

	count, err = DTBPayments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
