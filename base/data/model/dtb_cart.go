// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// DTBCart is an object representing the database table.
type DTBCart struct {
	ID                uint          `boil:"id" json:"id" toml:"id" yaml:"id"`
	CustomerID        null.Uint     `boil:"customer_id" json:"customer_id,omitempty" toml:"customer_id" yaml:"customer_id,omitempty"`
	CartKey           null.String   `boil:"cart_key" json:"cart_key,omitempty" toml:"cart_key" yaml:"cart_key,omitempty"`
	PreOrderID        null.String   `boil:"pre_order_id" json:"pre_order_id,omitempty" toml:"pre_order_id" yaml:"pre_order_id,omitempty"`
	TotalPrice        types.Decimal `boil:"total_price" json:"total_price" toml:"total_price" yaml:"total_price"`
	DeliveryFeeTotal  types.Decimal `boil:"delivery_fee_total" json:"delivery_fee_total" toml:"delivery_fee_total" yaml:"delivery_fee_total"`
	SortNo            null.Uint16   `boil:"sort_no" json:"sort_no,omitempty" toml:"sort_no" yaml:"sort_no,omitempty"`
	CreateDate        time.Time     `boil:"create_date" json:"create_date" toml:"create_date" yaml:"create_date"`
	UpdateDate        time.Time     `boil:"update_date" json:"update_date" toml:"update_date" yaml:"update_date"`
	AddPoint          types.Decimal `boil:"add_point" json:"add_point" toml:"add_point" yaml:"add_point"`
	UsePoint          types.Decimal `boil:"use_point" json:"use_point" toml:"use_point" yaml:"use_point"`
	DiscriminatorType string        `boil:"discriminator_type" json:"discriminator_type" toml:"discriminator_type" yaml:"discriminator_type"`

	R *dtbCartR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dtbCartL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DTBCartColumns = struct {
	ID                string
	CustomerID        string
	CartKey           string
	PreOrderID        string
	TotalPrice        string
	DeliveryFeeTotal  string
	SortNo            string
	CreateDate        string
	UpdateDate        string
	AddPoint          string
	UsePoint          string
	DiscriminatorType string
}{
	ID:                "id",
	CustomerID:        "customer_id",
	CartKey:           "cart_key",
	PreOrderID:        "pre_order_id",
	TotalPrice:        "total_price",
	DeliveryFeeTotal:  "delivery_fee_total",
	SortNo:            "sort_no",
	CreateDate:        "create_date",
	UpdateDate:        "update_date",
	AddPoint:          "add_point",
	UsePoint:          "use_point",
	DiscriminatorType: "discriminator_type",
}

// Generated where

type whereHelpertypes_Decimal struct{ field string }

func (w whereHelpertypes_Decimal) EQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_Decimal) NEQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_Decimal) LT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Decimal) LTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Decimal) GT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Decimal) GTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var DTBCartWhere = struct {
	ID                whereHelperuint
	CustomerID        whereHelpernull_Uint
	CartKey           whereHelpernull_String
	PreOrderID        whereHelpernull_String
	TotalPrice        whereHelpertypes_Decimal
	DeliveryFeeTotal  whereHelpertypes_Decimal
	SortNo            whereHelpernull_Uint16
	CreateDate        whereHelpertime_Time
	UpdateDate        whereHelpertime_Time
	AddPoint          whereHelpertypes_Decimal
	UsePoint          whereHelpertypes_Decimal
	DiscriminatorType whereHelperstring
}{
	ID:                whereHelperuint{field: `id`},
	CustomerID:        whereHelpernull_Uint{field: `customer_id`},
	CartKey:           whereHelpernull_String{field: `cart_key`},
	PreOrderID:        whereHelpernull_String{field: `pre_order_id`},
	TotalPrice:        whereHelpertypes_Decimal{field: `total_price`},
	DeliveryFeeTotal:  whereHelpertypes_Decimal{field: `delivery_fee_total`},
	SortNo:            whereHelpernull_Uint16{field: `sort_no`},
	CreateDate:        whereHelpertime_Time{field: `create_date`},
	UpdateDate:        whereHelpertime_Time{field: `update_date`},
	AddPoint:          whereHelpertypes_Decimal{field: `add_point`},
	UsePoint:          whereHelpertypes_Decimal{field: `use_point`},
	DiscriminatorType: whereHelperstring{field: `discriminator_type`},
}

// DTBCartRels is where relationship names are stored.
var DTBCartRels = struct {
	Customer         string
	CartDTBCartItems string
}{
	Customer:         "Customer",
	CartDTBCartItems: "CartDTBCartItems",
}

// dtbCartR is where relationships are stored.
type dtbCartR struct {
	Customer         *DTBCustomer
	CartDTBCartItems DTBCartItemSlice
}

// NewStruct creates a new relationship struct
func (*dtbCartR) NewStruct() *dtbCartR {
	return &dtbCartR{}
}

// dtbCartL is where Load methods for each relationship are stored.
type dtbCartL struct{}

var (
	dtbCartColumns               = []string{"id", "customer_id", "cart_key", "pre_order_id", "total_price", "delivery_fee_total", "sort_no", "create_date", "update_date", "add_point", "use_point", "discriminator_type"}
	dtbCartColumnsWithoutDefault = []string{"customer_id", "cart_key", "pre_order_id", "sort_no", "create_date", "update_date", "discriminator_type"}
	dtbCartColumnsWithDefault    = []string{"id", "total_price", "delivery_fee_total", "add_point", "use_point"}
	dtbCartPrimaryKeyColumns     = []string{"id"}
)

type (
	// DTBCartSlice is an alias for a slice of pointers to DTBCart.
	// This should generally be used opposed to []DTBCart.
	DTBCartSlice []*DTBCart
	// DTBCartHook is the signature for custom DTBCart hook methods
	DTBCartHook func(context.Context, boil.ContextExecutor, *DTBCart) error

	dtbCartQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dtbCartType                 = reflect.TypeOf(&DTBCart{})
	dtbCartMapping              = queries.MakeStructMapping(dtbCartType)
	dtbCartPrimaryKeyMapping, _ = queries.BindMapping(dtbCartType, dtbCartMapping, dtbCartPrimaryKeyColumns)
	dtbCartInsertCacheMut       sync.RWMutex
	dtbCartInsertCache          = make(map[string]insertCache)
	dtbCartUpdateCacheMut       sync.RWMutex
	dtbCartUpdateCache          = make(map[string]updateCache)
	dtbCartUpsertCacheMut       sync.RWMutex
	dtbCartUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dtbCartBeforeInsertHooks []DTBCartHook
var dtbCartBeforeUpdateHooks []DTBCartHook
var dtbCartBeforeDeleteHooks []DTBCartHook
var dtbCartBeforeUpsertHooks []DTBCartHook

var dtbCartAfterInsertHooks []DTBCartHook
var dtbCartAfterSelectHooks []DTBCartHook
var dtbCartAfterUpdateHooks []DTBCartHook
var dtbCartAfterDeleteHooks []DTBCartHook
var dtbCartAfterUpsertHooks []DTBCartHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DTBCart) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCartBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DTBCart) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCartBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DTBCart) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCartBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DTBCart) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCartBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DTBCart) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCartAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DTBCart) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCartAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DTBCart) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCartAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DTBCart) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCartAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DTBCart) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dtbCartAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDTBCartHook registers your hook function for all future operations.
func AddDTBCartHook(hookPoint boil.HookPoint, dtbCartHook DTBCartHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		dtbCartBeforeInsertHooks = append(dtbCartBeforeInsertHooks, dtbCartHook)
	case boil.BeforeUpdateHook:
		dtbCartBeforeUpdateHooks = append(dtbCartBeforeUpdateHooks, dtbCartHook)
	case boil.BeforeDeleteHook:
		dtbCartBeforeDeleteHooks = append(dtbCartBeforeDeleteHooks, dtbCartHook)
	case boil.BeforeUpsertHook:
		dtbCartBeforeUpsertHooks = append(dtbCartBeforeUpsertHooks, dtbCartHook)
	case boil.AfterInsertHook:
		dtbCartAfterInsertHooks = append(dtbCartAfterInsertHooks, dtbCartHook)
	case boil.AfterSelectHook:
		dtbCartAfterSelectHooks = append(dtbCartAfterSelectHooks, dtbCartHook)
	case boil.AfterUpdateHook:
		dtbCartAfterUpdateHooks = append(dtbCartAfterUpdateHooks, dtbCartHook)
	case boil.AfterDeleteHook:
		dtbCartAfterDeleteHooks = append(dtbCartAfterDeleteHooks, dtbCartHook)
	case boil.AfterUpsertHook:
		dtbCartAfterUpsertHooks = append(dtbCartAfterUpsertHooks, dtbCartHook)
	}
}

// One returns a single dtbCart record from the query.
func (q dtbCartQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DTBCart, error) {
	o := &DTBCart{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for dtb_cart")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DTBCart records from the query.
func (q dtbCartQuery) All(ctx context.Context, exec boil.ContextExecutor) (DTBCartSlice, error) {
	var o []*DTBCart

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to DTBCart slice")
	}

	if len(dtbCartAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DTBCart records in the query.
func (q dtbCartQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count dtb_cart rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dtbCartQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if dtb_cart exists")
	}

	return count > 0, nil
}

// Customer pointed to by the foreign key.
func (o *DTBCart) Customer(mods ...qm.QueryMod) dtbCustomerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.CustomerID),
	}

	queryMods = append(queryMods, mods...)

	query := DTBCustomers(queryMods...)
	queries.SetFrom(query.Query, "`dtb_customer`")

	return query
}

// CartDTBCartItems retrieves all the dtb_cart_item's DTBCartItems with an executor via cart_id column.
func (o *DTBCart) CartDTBCartItems(mods ...qm.QueryMod) dtbCartItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`dtb_cart_item`.`cart_id`=?", o.ID),
	)

	query := DTBCartItems(queryMods...)
	queries.SetFrom(query.Query, "`dtb_cart_item`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`dtb_cart_item`.*"})
	}

	return query
}

// LoadCustomer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dtbCartL) LoadCustomer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBCart interface{}, mods queries.Applicator) error {
	var slice []*DTBCart
	var object *DTBCart

	if singular {
		object = maybeDTBCart.(*DTBCart)
	} else {
		slice = *maybeDTBCart.(*[]*DTBCart)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbCartR{}
		}
		if !queries.IsNil(object.CustomerID) {
			args = append(args, object.CustomerID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbCartR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CustomerID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CustomerID) {
				args = append(args, obj.CustomerID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_customer`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DTBCustomer")
	}

	var resultSlice []*DTBCustomer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DTBCustomer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dtb_customer")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_customer")
	}

	if len(dtbCartAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Customer = foreign
		if foreign.R == nil {
			foreign.R = &dtbCustomerR{}
		}
		foreign.R.CustomerDTBCarts = append(foreign.R.CustomerDTBCarts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CustomerID, foreign.ID) {
				local.R.Customer = foreign
				if foreign.R == nil {
					foreign.R = &dtbCustomerR{}
				}
				foreign.R.CustomerDTBCarts = append(foreign.R.CustomerDTBCarts, local)
				break
			}
		}
	}

	return nil
}

// LoadCartDTBCartItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dtbCartL) LoadCartDTBCartItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDTBCart interface{}, mods queries.Applicator) error {
	var slice []*DTBCart
	var object *DTBCart

	if singular {
		object = maybeDTBCart.(*DTBCart)
	} else {
		slice = *maybeDTBCart.(*[]*DTBCart)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dtbCartR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dtbCartR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dtb_cart_item`), qm.WhereIn(`cart_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dtb_cart_item")
	}

	var resultSlice []*DTBCartItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dtb_cart_item")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dtb_cart_item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dtb_cart_item")
	}

	if len(dtbCartItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CartDTBCartItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dtbCartItemR{}
			}
			foreign.R.Cart = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CartID) {
				local.R.CartDTBCartItems = append(local.R.CartDTBCartItems, foreign)
				if foreign.R == nil {
					foreign.R = &dtbCartItemR{}
				}
				foreign.R.Cart = local
				break
			}
		}
	}

	return nil
}

// SetCustomer of the dtbCart to the related item.
// Sets o.R.Customer to related.
// Adds o to related.R.CustomerDTBCarts.
func (o *DTBCart) SetCustomer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DTBCustomer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `dtb_cart` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"customer_id"}),
		strmangle.WhereClause("`", "`", 0, dtbCartPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CustomerID, related.ID)
	if o.R == nil {
		o.R = &dtbCartR{
			Customer: related,
		}
	} else {
		o.R.Customer = related
	}

	if related.R == nil {
		related.R = &dtbCustomerR{
			CustomerDTBCarts: DTBCartSlice{o},
		}
	} else {
		related.R.CustomerDTBCarts = append(related.R.CustomerDTBCarts, o)
	}

	return nil
}

// RemoveCustomer relationship.
// Sets o.R.Customer to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *DTBCart) RemoveCustomer(ctx context.Context, exec boil.ContextExecutor, related *DTBCustomer) error {
	var err error

	queries.SetScanner(&o.CustomerID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("customer_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Customer = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CustomerDTBCarts {
		if queries.Equal(o.CustomerID, ri.CustomerID) {
			continue
		}

		ln := len(related.R.CustomerDTBCarts)
		if ln > 1 && i < ln-1 {
			related.R.CustomerDTBCarts[i] = related.R.CustomerDTBCarts[ln-1]
		}
		related.R.CustomerDTBCarts = related.R.CustomerDTBCarts[:ln-1]
		break
	}
	return nil
}

// AddCartDTBCartItems adds the given related objects to the existing relationships
// of the dtb_cart, optionally inserting them as new records.
// Appends related to o.R.CartDTBCartItems.
// Sets related.R.Cart appropriately.
func (o *DTBCart) AddCartDTBCartItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBCartItem) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CartID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `dtb_cart_item` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"cart_id"}),
				strmangle.WhereClause("`", "`", 0, dtbCartItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CartID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &dtbCartR{
			CartDTBCartItems: related,
		}
	} else {
		o.R.CartDTBCartItems = append(o.R.CartDTBCartItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dtbCartItemR{
				Cart: o,
			}
		} else {
			rel.R.Cart = o
		}
	}
	return nil
}

// SetCartDTBCartItems removes all previously related items of the
// dtb_cart replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Cart's CartDTBCartItems accordingly.
// Replaces o.R.CartDTBCartItems with related.
// Sets related.R.Cart's CartDTBCartItems accordingly.
func (o *DTBCart) SetCartDTBCartItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DTBCartItem) error {
	query := "update `dtb_cart_item` set `cart_id` = null where `cart_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CartDTBCartItems {
			queries.SetScanner(&rel.CartID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Cart = nil
		}

		o.R.CartDTBCartItems = nil
	}
	return o.AddCartDTBCartItems(ctx, exec, insert, related...)
}

// RemoveCartDTBCartItems relationships from objects passed in.
// Removes related items from R.CartDTBCartItems (uses pointer comparison, removal does not keep order)
// Sets related.R.Cart.
func (o *DTBCart) RemoveCartDTBCartItems(ctx context.Context, exec boil.ContextExecutor, related ...*DTBCartItem) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CartID, nil)
		if rel.R != nil {
			rel.R.Cart = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("cart_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CartDTBCartItems {
			if rel != ri {
				continue
			}

			ln := len(o.R.CartDTBCartItems)
			if ln > 1 && i < ln-1 {
				o.R.CartDTBCartItems[i] = o.R.CartDTBCartItems[ln-1]
			}
			o.R.CartDTBCartItems = o.R.CartDTBCartItems[:ln-1]
			break
		}
	}

	return nil
}

// DTBCarts retrieves all the records using an executor.
func DTBCarts(mods ...qm.QueryMod) dtbCartQuery {
	mods = append(mods, qm.From("`dtb_cart`"))
	return dtbCartQuery{NewQuery(mods...)}
}

// FindDTBCart retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDTBCart(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*DTBCart, error) {
	dtbCartObj := &DTBCart{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `dtb_cart` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, dtbCartObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from dtb_cart")
	}

	return dtbCartObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DTBCart) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no dtb_cart provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dtbCartColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dtbCartInsertCacheMut.RLock()
	cache, cached := dtbCartInsertCache[key]
	dtbCartInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dtbCartColumns,
			dtbCartColumnsWithDefault,
			dtbCartColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dtbCartType, dtbCartMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dtbCartType, dtbCartMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `dtb_cart` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `dtb_cart` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `dtb_cart` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dtbCartPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into dtb_cart")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == dtbCartMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for dtb_cart")
	}

CacheNoHooks:
	if !cached {
		dtbCartInsertCacheMut.Lock()
		dtbCartInsertCache[key] = cache
		dtbCartInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DTBCart.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DTBCart) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dtbCartUpdateCacheMut.RLock()
	cache, cached := dtbCartUpdateCache[key]
	dtbCartUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dtbCartColumns,
			dtbCartPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update dtb_cart, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `dtb_cart` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dtbCartPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dtbCartType, dtbCartMapping, append(wl, dtbCartPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update dtb_cart row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for dtb_cart")
	}

	if !cached {
		dtbCartUpdateCacheMut.Lock()
		dtbCartUpdateCache[key] = cache
		dtbCartUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dtbCartQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for dtb_cart")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for dtb_cart")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DTBCartSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbCartPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `dtb_cart` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbCartPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in dtbCart slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all dtbCart")
	}
	return rowsAff, nil
}

var mySQLDTBCartUniqueColumns = []string{
	"id",
	"pre_order_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DTBCart) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no dtb_cart provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dtbCartColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDTBCartUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dtbCartUpsertCacheMut.RLock()
	cache, cached := dtbCartUpsertCache[key]
	dtbCartUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dtbCartColumns,
			dtbCartColumnsWithDefault,
			dtbCartColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			dtbCartColumns,
			dtbCartPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("model: unable to upsert dtb_cart, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "dtb_cart", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `dtb_cart` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dtbCartType, dtbCartMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dtbCartType, dtbCartMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for dtb_cart")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == dtbCartMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dtbCartType, dtbCartMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for dtb_cart")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for dtb_cart")
	}

CacheNoHooks:
	if !cached {
		dtbCartUpsertCacheMut.Lock()
		dtbCartUpsertCache[key] = cache
		dtbCartUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DTBCart record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DTBCart) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no DTBCart provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dtbCartPrimaryKeyMapping)
	sql := "DELETE FROM `dtb_cart` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from dtb_cart")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for dtb_cart")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dtbCartQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no dtbCartQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from dtb_cart")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for dtb_cart")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DTBCartSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no DTBCart slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(dtbCartBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbCartPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `dtb_cart` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbCartPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from dtbCart slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for dtb_cart")
	}

	if len(dtbCartAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DTBCart) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDTBCart(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DTBCartSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DTBCartSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dtbCartPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `dtb_cart`.* FROM `dtb_cart` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dtbCartPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in DTBCartSlice")
	}

	*o = slice

	return nil
}

// DTBCartExists checks if the DTBCart row exists.
func DTBCartExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `dtb_cart` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if dtb_cart exists")
	}

	return exists, nil
}
