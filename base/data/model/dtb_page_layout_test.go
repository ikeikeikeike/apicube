// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDTBPageLayouts(t *testing.T) {
	t.Parallel()

	query := DTBPageLayouts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDTBPageLayoutsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPageLayout{}
	if err = randomize.Struct(seed, o, dtbPageLayoutDBTypes, true, dtbPageLayoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPageLayout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBPageLayouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBPageLayoutsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPageLayout{}
	if err = randomize.Struct(seed, o, dtbPageLayoutDBTypes, true, dtbPageLayoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPageLayout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DTBPageLayouts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBPageLayouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBPageLayoutsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPageLayout{}
	if err = randomize.Struct(seed, o, dtbPageLayoutDBTypes, true, dtbPageLayoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPageLayout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBPageLayoutSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBPageLayouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBPageLayoutsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPageLayout{}
	if err = randomize.Struct(seed, o, dtbPageLayoutDBTypes, true, dtbPageLayoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPageLayout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DTBPageLayoutExists(ctx, tx, o.PageID, o.LayoutID)
	if err != nil {
		t.Errorf("Unable to check if DTBPageLayout exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DTBPageLayoutExists to return true, but got false.")
	}
}

func testDTBPageLayoutsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPageLayout{}
	if err = randomize.Struct(seed, o, dtbPageLayoutDBTypes, true, dtbPageLayoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPageLayout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dtbPageLayoutFound, err := FindDTBPageLayout(ctx, tx, o.PageID, o.LayoutID)
	if err != nil {
		t.Error(err)
	}

	if dtbPageLayoutFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDTBPageLayoutsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPageLayout{}
	if err = randomize.Struct(seed, o, dtbPageLayoutDBTypes, true, dtbPageLayoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPageLayout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DTBPageLayouts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDTBPageLayoutsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPageLayout{}
	if err = randomize.Struct(seed, o, dtbPageLayoutDBTypes, true, dtbPageLayoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPageLayout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DTBPageLayouts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDTBPageLayoutsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtbPageLayoutOne := &DTBPageLayout{}
	dtbPageLayoutTwo := &DTBPageLayout{}
	if err = randomize.Struct(seed, dtbPageLayoutOne, dtbPageLayoutDBTypes, false, dtbPageLayoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPageLayout struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbPageLayoutTwo, dtbPageLayoutDBTypes, false, dtbPageLayoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPageLayout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbPageLayoutOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbPageLayoutTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBPageLayouts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDTBPageLayoutsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dtbPageLayoutOne := &DTBPageLayout{}
	dtbPageLayoutTwo := &DTBPageLayout{}
	if err = randomize.Struct(seed, dtbPageLayoutOne, dtbPageLayoutDBTypes, false, dtbPageLayoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPageLayout struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbPageLayoutTwo, dtbPageLayoutDBTypes, false, dtbPageLayoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPageLayout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbPageLayoutOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbPageLayoutTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBPageLayouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dtbPageLayoutBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBPageLayout) error {
	*o = DTBPageLayout{}
	return nil
}

func dtbPageLayoutAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBPageLayout) error {
	*o = DTBPageLayout{}
	return nil
}

func dtbPageLayoutAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DTBPageLayout) error {
	*o = DTBPageLayout{}
	return nil
}

func dtbPageLayoutBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBPageLayout) error {
	*o = DTBPageLayout{}
	return nil
}

func dtbPageLayoutAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBPageLayout) error {
	*o = DTBPageLayout{}
	return nil
}

func dtbPageLayoutBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBPageLayout) error {
	*o = DTBPageLayout{}
	return nil
}

func dtbPageLayoutAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBPageLayout) error {
	*o = DTBPageLayout{}
	return nil
}

func dtbPageLayoutBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBPageLayout) error {
	*o = DTBPageLayout{}
	return nil
}

func dtbPageLayoutAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBPageLayout) error {
	*o = DTBPageLayout{}
	return nil
}

func testDTBPageLayoutsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DTBPageLayout{}
	o := &DTBPageLayout{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dtbPageLayoutDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBPageLayout object: %s", err)
	}

	AddDTBPageLayoutHook(boil.BeforeInsertHook, dtbPageLayoutBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dtbPageLayoutBeforeInsertHooks = []DTBPageLayoutHook{}

	AddDTBPageLayoutHook(boil.AfterInsertHook, dtbPageLayoutAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dtbPageLayoutAfterInsertHooks = []DTBPageLayoutHook{}

	AddDTBPageLayoutHook(boil.AfterSelectHook, dtbPageLayoutAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dtbPageLayoutAfterSelectHooks = []DTBPageLayoutHook{}

	AddDTBPageLayoutHook(boil.BeforeUpdateHook, dtbPageLayoutBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dtbPageLayoutBeforeUpdateHooks = []DTBPageLayoutHook{}

	AddDTBPageLayoutHook(boil.AfterUpdateHook, dtbPageLayoutAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dtbPageLayoutAfterUpdateHooks = []DTBPageLayoutHook{}

	AddDTBPageLayoutHook(boil.BeforeDeleteHook, dtbPageLayoutBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dtbPageLayoutBeforeDeleteHooks = []DTBPageLayoutHook{}

	AddDTBPageLayoutHook(boil.AfterDeleteHook, dtbPageLayoutAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dtbPageLayoutAfterDeleteHooks = []DTBPageLayoutHook{}

	AddDTBPageLayoutHook(boil.BeforeUpsertHook, dtbPageLayoutBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dtbPageLayoutBeforeUpsertHooks = []DTBPageLayoutHook{}

	AddDTBPageLayoutHook(boil.AfterUpsertHook, dtbPageLayoutAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dtbPageLayoutAfterUpsertHooks = []DTBPageLayoutHook{}
}

func testDTBPageLayoutsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPageLayout{}
	if err = randomize.Struct(seed, o, dtbPageLayoutDBTypes, true, dtbPageLayoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPageLayout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBPageLayouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBPageLayoutsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPageLayout{}
	if err = randomize.Struct(seed, o, dtbPageLayoutDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DTBPageLayout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dtbPageLayoutColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DTBPageLayouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBPageLayoutToOneDTBLayoutUsingLayout(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBPageLayout
	var foreign DTBLayout

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbPageLayoutDBTypes, false, dtbPageLayoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPageLayout struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dtbLayoutDBTypes, false, dtbLayoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBLayout struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.LayoutID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Layout().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBPageLayoutSlice{&local}
	if err = local.L.LoadLayout(ctx, tx, false, (*[]*DTBPageLayout)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Layout == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Layout = nil
	if err = local.L.LoadLayout(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Layout == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBPageLayoutToOneDTBPageUsingPage(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBPageLayout
	var foreign DTBPage

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbPageLayoutDBTypes, false, dtbPageLayoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPageLayout struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dtbPageDBTypes, false, dtbPageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPage struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PageID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Page().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBPageLayoutSlice{&local}
	if err = local.L.LoadPage(ctx, tx, false, (*[]*DTBPageLayout)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Page == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Page = nil
	if err = local.L.LoadPage(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Page == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBPageLayoutToOneSetOpDTBLayoutUsingLayout(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBPageLayout
	var b, c DTBLayout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbPageLayoutDBTypes, false, strmangle.SetComplement(dtbPageLayoutPrimaryKeyColumns, dtbPageLayoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbLayoutDBTypes, false, strmangle.SetComplement(dtbLayoutPrimaryKeyColumns, dtbLayoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbLayoutDBTypes, false, strmangle.SetComplement(dtbLayoutPrimaryKeyColumns, dtbLayoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DTBLayout{&b, &c} {
		err = a.SetLayout(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Layout != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.LayoutDTBPageLayouts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.LayoutID != x.ID {
			t.Error("foreign key was wrong value", a.LayoutID)
		}

		if exists, err := DTBPageLayoutExists(ctx, tx, a.PageID, a.LayoutID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testDTBPageLayoutToOneSetOpDTBPageUsingPage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBPageLayout
	var b, c DTBPage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbPageLayoutDBTypes, false, strmangle.SetComplement(dtbPageLayoutPrimaryKeyColumns, dtbPageLayoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbPageDBTypes, false, strmangle.SetComplement(dtbPagePrimaryKeyColumns, dtbPageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbPageDBTypes, false, strmangle.SetComplement(dtbPagePrimaryKeyColumns, dtbPageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DTBPage{&b, &c} {
		err = a.SetPage(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Page != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PageDTBPageLayouts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PageID != x.ID {
			t.Error("foreign key was wrong value", a.PageID)
		}

		if exists, err := DTBPageLayoutExists(ctx, tx, a.PageID, a.LayoutID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testDTBPageLayoutsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPageLayout{}
	if err = randomize.Struct(seed, o, dtbPageLayoutDBTypes, true, dtbPageLayoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPageLayout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBPageLayoutsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPageLayout{}
	if err = randomize.Struct(seed, o, dtbPageLayoutDBTypes, true, dtbPageLayoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPageLayout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBPageLayoutSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBPageLayoutsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBPageLayout{}
	if err = randomize.Struct(seed, o, dtbPageLayoutDBTypes, true, dtbPageLayoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPageLayout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBPageLayouts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dtbPageLayoutDBTypes = map[string]string{`PageID`: `int`, `LayoutID`: `int`, `SortNo`: `smallint`, `DiscriminatorType`: `varchar`}
	_                    = bytes.MinRead
)

func testDTBPageLayoutsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dtbPageLayoutPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dtbPageLayoutColumns) == len(dtbPageLayoutPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBPageLayout{}
	if err = randomize.Struct(seed, o, dtbPageLayoutDBTypes, true, dtbPageLayoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPageLayout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBPageLayouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbPageLayoutDBTypes, true, dtbPageLayoutPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBPageLayout struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDTBPageLayoutsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dtbPageLayoutColumns) == len(dtbPageLayoutPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBPageLayout{}
	if err = randomize.Struct(seed, o, dtbPageLayoutDBTypes, true, dtbPageLayoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBPageLayout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBPageLayouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbPageLayoutDBTypes, true, dtbPageLayoutPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBPageLayout struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dtbPageLayoutColumns, dtbPageLayoutPrimaryKeyColumns) {
		fields = dtbPageLayoutColumns
	} else {
		fields = strmangle.SetComplement(
			dtbPageLayoutColumns,
			dtbPageLayoutPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DTBPageLayoutSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDTBPageLayoutsUpsert(t *testing.T) {
	t.Parallel()

	if len(dtbPageLayoutColumns) == len(dtbPageLayoutPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDTBPageLayoutUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DTBPageLayout{}
	if err = randomize.Struct(seed, &o, dtbPageLayoutDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBPageLayout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBPageLayout: %s", err)
	}

	count, err := DTBPageLayouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dtbPageLayoutDBTypes, false, dtbPageLayoutPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBPageLayout struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBPageLayout: %s", err)
	}

	count, err = DTBPageLayouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
