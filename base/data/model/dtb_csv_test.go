// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDTBCSVS(t *testing.T) {
	t.Parallel()

	query := DTBCSVS()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDTBCSVSDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBCSV{}
	if err = randomize.Struct(seed, o, dtbCSVDBTypes, true, dtbCSVColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCSV struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBCSVS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBCSVSQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBCSV{}
	if err = randomize.Struct(seed, o, dtbCSVDBTypes, true, dtbCSVColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCSV struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DTBCSVS().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBCSVS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBCSVSSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBCSV{}
	if err = randomize.Struct(seed, o, dtbCSVDBTypes, true, dtbCSVColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCSV struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBCSVSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBCSVS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBCSVSExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBCSV{}
	if err = randomize.Struct(seed, o, dtbCSVDBTypes, true, dtbCSVColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCSV struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DTBCSVExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DTBCSV exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DTBCSVExists to return true, but got false.")
	}
}

func testDTBCSVSFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBCSV{}
	if err = randomize.Struct(seed, o, dtbCSVDBTypes, true, dtbCSVColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCSV struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dtbCSVFound, err := FindDTBCSV(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if dtbCSVFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDTBCSVSBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBCSV{}
	if err = randomize.Struct(seed, o, dtbCSVDBTypes, true, dtbCSVColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCSV struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DTBCSVS().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDTBCSVSOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBCSV{}
	if err = randomize.Struct(seed, o, dtbCSVDBTypes, true, dtbCSVColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCSV struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DTBCSVS().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDTBCSVSAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtbCSVOne := &DTBCSV{}
	dtbCSVTwo := &DTBCSV{}
	if err = randomize.Struct(seed, dtbCSVOne, dtbCSVDBTypes, false, dtbCSVColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCSV struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbCSVTwo, dtbCSVDBTypes, false, dtbCSVColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCSV struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbCSVOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbCSVTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBCSVS().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDTBCSVSCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dtbCSVOne := &DTBCSV{}
	dtbCSVTwo := &DTBCSV{}
	if err = randomize.Struct(seed, dtbCSVOne, dtbCSVDBTypes, false, dtbCSVColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCSV struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbCSVTwo, dtbCSVDBTypes, false, dtbCSVColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCSV struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbCSVOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbCSVTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBCSVS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dtbCSVBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBCSV) error {
	*o = DTBCSV{}
	return nil
}

func dtbCSVAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBCSV) error {
	*o = DTBCSV{}
	return nil
}

func dtbCSVAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DTBCSV) error {
	*o = DTBCSV{}
	return nil
}

func dtbCSVBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBCSV) error {
	*o = DTBCSV{}
	return nil
}

func dtbCSVAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBCSV) error {
	*o = DTBCSV{}
	return nil
}

func dtbCSVBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBCSV) error {
	*o = DTBCSV{}
	return nil
}

func dtbCSVAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBCSV) error {
	*o = DTBCSV{}
	return nil
}

func dtbCSVBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBCSV) error {
	*o = DTBCSV{}
	return nil
}

func dtbCSVAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBCSV) error {
	*o = DTBCSV{}
	return nil
}

func testDTBCSVSHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DTBCSV{}
	o := &DTBCSV{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dtbCSVDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBCSV object: %s", err)
	}

	AddDTBCSVHook(boil.BeforeInsertHook, dtbCSVBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dtbCSVBeforeInsertHooks = []DTBCSVHook{}

	AddDTBCSVHook(boil.AfterInsertHook, dtbCSVAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dtbCSVAfterInsertHooks = []DTBCSVHook{}

	AddDTBCSVHook(boil.AfterSelectHook, dtbCSVAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dtbCSVAfterSelectHooks = []DTBCSVHook{}

	AddDTBCSVHook(boil.BeforeUpdateHook, dtbCSVBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dtbCSVBeforeUpdateHooks = []DTBCSVHook{}

	AddDTBCSVHook(boil.AfterUpdateHook, dtbCSVAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dtbCSVAfterUpdateHooks = []DTBCSVHook{}

	AddDTBCSVHook(boil.BeforeDeleteHook, dtbCSVBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dtbCSVBeforeDeleteHooks = []DTBCSVHook{}

	AddDTBCSVHook(boil.AfterDeleteHook, dtbCSVAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dtbCSVAfterDeleteHooks = []DTBCSVHook{}

	AddDTBCSVHook(boil.BeforeUpsertHook, dtbCSVBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dtbCSVBeforeUpsertHooks = []DTBCSVHook{}

	AddDTBCSVHook(boil.AfterUpsertHook, dtbCSVAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dtbCSVAfterUpsertHooks = []DTBCSVHook{}
}

func testDTBCSVSInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBCSV{}
	if err = randomize.Struct(seed, o, dtbCSVDBTypes, true, dtbCSVColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCSV struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBCSVS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBCSVSInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBCSV{}
	if err = randomize.Struct(seed, o, dtbCSVDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DTBCSV struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dtbCSVColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DTBCSVS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBCSVToOneDTBMemberUsingCreator(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBCSV
	var foreign DTBMember

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbCSVDBTypes, true, dtbCSVColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCSV struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dtbMemberDBTypes, false, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CreatorID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Creator().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBCSVSlice{&local}
	if err = local.L.LoadCreator(ctx, tx, false, (*[]*DTBCSV)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Creator == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Creator = nil
	if err = local.L.LoadCreator(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Creator == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBCSVToOneMTBCSVTypeUsingCSVType(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBCSV
	var foreign MTBCSVType

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbCSVDBTypes, true, dtbCSVColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCSV struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, mtbCSVTypeDBTypes, false, mtbCSVTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCSVType struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CSVTypeID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.CSVType().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBCSVSlice{&local}
	if err = local.L.LoadCSVType(ctx, tx, false, (*[]*DTBCSV)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CSVType == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.CSVType = nil
	if err = local.L.LoadCSVType(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CSVType == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBCSVToOneSetOpDTBMemberUsingCreator(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBCSV
	var b, c DTBMember

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbCSVDBTypes, false, strmangle.SetComplement(dtbCSVPrimaryKeyColumns, dtbCSVColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DTBMember{&b, &c} {
		err = a.SetCreator(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Creator != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CreatorDTBCSVS[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CreatorID, x.ID) {
			t.Error("foreign key was wrong value", a.CreatorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CreatorID))
		reflect.Indirect(reflect.ValueOf(&a.CreatorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CreatorID, x.ID) {
			t.Error("foreign key was wrong value", a.CreatorID, x.ID)
		}
	}
}

func testDTBCSVToOneRemoveOpDTBMemberUsingCreator(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBCSV
	var b DTBMember

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbCSVDBTypes, false, strmangle.SetComplement(dtbCSVPrimaryKeyColumns, dtbCSVColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCreator(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCreator(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Creator().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Creator != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CreatorID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CreatorDTBCSVS) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBCSVToOneSetOpMTBCSVTypeUsingCSVType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBCSV
	var b, c MTBCSVType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbCSVDBTypes, false, strmangle.SetComplement(dtbCSVPrimaryKeyColumns, dtbCSVColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbCSVTypeDBTypes, false, strmangle.SetComplement(mtbCSVTypePrimaryKeyColumns, mtbCSVTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mtbCSVTypeDBTypes, false, strmangle.SetComplement(mtbCSVTypePrimaryKeyColumns, mtbCSVTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MTBCSVType{&b, &c} {
		err = a.SetCSVType(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.CSVType != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CSVTypeDTBCSVS[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CSVTypeID, x.ID) {
			t.Error("foreign key was wrong value", a.CSVTypeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CSVTypeID))
		reflect.Indirect(reflect.ValueOf(&a.CSVTypeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CSVTypeID, x.ID) {
			t.Error("foreign key was wrong value", a.CSVTypeID, x.ID)
		}
	}
}

func testDTBCSVToOneRemoveOpMTBCSVTypeUsingCSVType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBCSV
	var b MTBCSVType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbCSVDBTypes, false, strmangle.SetComplement(dtbCSVPrimaryKeyColumns, dtbCSVColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbCSVTypeDBTypes, false, strmangle.SetComplement(mtbCSVTypePrimaryKeyColumns, mtbCSVTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCSVType(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCSVType(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.CSVType().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.CSVType != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CSVTypeID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CSVTypeDTBCSVS) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBCSVSReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBCSV{}
	if err = randomize.Struct(seed, o, dtbCSVDBTypes, true, dtbCSVColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCSV struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBCSVSReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBCSV{}
	if err = randomize.Struct(seed, o, dtbCSVDBTypes, true, dtbCSVColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCSV struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBCSVSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBCSVSSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBCSV{}
	if err = randomize.Struct(seed, o, dtbCSVDBTypes, true, dtbCSVColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCSV struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBCSVS().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dtbCSVDBTypes = map[string]string{`ID`: `int`, `CSVTypeID`: `smallint`, `CreatorID`: `int`, `EntityName`: `varchar`, `FieldName`: `varchar`, `ReferenceFieldName`: `varchar`, `DispName`: `varchar`, `SortNo`: `smallint`, `Enabled`: `tinyint`, `CreateDate`: `datetime`, `UpdateDate`: `datetime`, `DiscriminatorType`: `varchar`}
	_             = bytes.MinRead
)

func testDTBCSVSUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dtbCSVPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dtbCSVColumns) == len(dtbCSVPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBCSV{}
	if err = randomize.Struct(seed, o, dtbCSVDBTypes, true, dtbCSVColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCSV struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBCSVS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbCSVDBTypes, true, dtbCSVPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBCSV struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDTBCSVSSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dtbCSVColumns) == len(dtbCSVPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBCSV{}
	if err = randomize.Struct(seed, o, dtbCSVDBTypes, true, dtbCSVColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBCSV struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBCSVS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbCSVDBTypes, true, dtbCSVPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBCSV struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dtbCSVColumns, dtbCSVPrimaryKeyColumns) {
		fields = dtbCSVColumns
	} else {
		fields = strmangle.SetComplement(
			dtbCSVColumns,
			dtbCSVPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DTBCSVSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDTBCSVSUpsert(t *testing.T) {
	t.Parallel()

	if len(dtbCSVColumns) == len(dtbCSVPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDTBCSVUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DTBCSV{}
	if err = randomize.Struct(seed, &o, dtbCSVDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBCSV struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBCSV: %s", err)
	}

	count, err := DTBCSVS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dtbCSVDBTypes, false, dtbCSVPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBCSV struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBCSV: %s", err)
	}

	count, err = DTBCSVS().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
