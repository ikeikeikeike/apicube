// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDTBBlocks(t *testing.T) {
	t.Parallel()

	query := DTBBlocks()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDTBBlocksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBBlock{}
	if err = randomize.Struct(seed, o, dtbBlockDBTypes, true, dtbBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBBlocksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBBlock{}
	if err = randomize.Struct(seed, o, dtbBlockDBTypes, true, dtbBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DTBBlocks().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBBlocksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBBlock{}
	if err = randomize.Struct(seed, o, dtbBlockDBTypes, true, dtbBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBBlockSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBBlocksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBBlock{}
	if err = randomize.Struct(seed, o, dtbBlockDBTypes, true, dtbBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DTBBlockExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DTBBlock exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DTBBlockExists to return true, but got false.")
	}
}

func testDTBBlocksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBBlock{}
	if err = randomize.Struct(seed, o, dtbBlockDBTypes, true, dtbBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dtbBlockFound, err := FindDTBBlock(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if dtbBlockFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDTBBlocksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBBlock{}
	if err = randomize.Struct(seed, o, dtbBlockDBTypes, true, dtbBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DTBBlocks().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDTBBlocksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBBlock{}
	if err = randomize.Struct(seed, o, dtbBlockDBTypes, true, dtbBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DTBBlocks().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDTBBlocksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtbBlockOne := &DTBBlock{}
	dtbBlockTwo := &DTBBlock{}
	if err = randomize.Struct(seed, dtbBlockOne, dtbBlockDBTypes, false, dtbBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlock struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbBlockTwo, dtbBlockDBTypes, false, dtbBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbBlockOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbBlockTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBBlocks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDTBBlocksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dtbBlockOne := &DTBBlock{}
	dtbBlockTwo := &DTBBlock{}
	if err = randomize.Struct(seed, dtbBlockOne, dtbBlockDBTypes, false, dtbBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlock struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbBlockTwo, dtbBlockDBTypes, false, dtbBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbBlockOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbBlockTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dtbBlockBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBBlock) error {
	*o = DTBBlock{}
	return nil
}

func dtbBlockAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBBlock) error {
	*o = DTBBlock{}
	return nil
}

func dtbBlockAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DTBBlock) error {
	*o = DTBBlock{}
	return nil
}

func dtbBlockBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBBlock) error {
	*o = DTBBlock{}
	return nil
}

func dtbBlockAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBBlock) error {
	*o = DTBBlock{}
	return nil
}

func dtbBlockBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBBlock) error {
	*o = DTBBlock{}
	return nil
}

func dtbBlockAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBBlock) error {
	*o = DTBBlock{}
	return nil
}

func dtbBlockBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBBlock) error {
	*o = DTBBlock{}
	return nil
}

func dtbBlockAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBBlock) error {
	*o = DTBBlock{}
	return nil
}

func testDTBBlocksHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DTBBlock{}
	o := &DTBBlock{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dtbBlockDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBBlock object: %s", err)
	}

	AddDTBBlockHook(boil.BeforeInsertHook, dtbBlockBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dtbBlockBeforeInsertHooks = []DTBBlockHook{}

	AddDTBBlockHook(boil.AfterInsertHook, dtbBlockAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dtbBlockAfterInsertHooks = []DTBBlockHook{}

	AddDTBBlockHook(boil.AfterSelectHook, dtbBlockAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dtbBlockAfterSelectHooks = []DTBBlockHook{}

	AddDTBBlockHook(boil.BeforeUpdateHook, dtbBlockBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dtbBlockBeforeUpdateHooks = []DTBBlockHook{}

	AddDTBBlockHook(boil.AfterUpdateHook, dtbBlockAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dtbBlockAfterUpdateHooks = []DTBBlockHook{}

	AddDTBBlockHook(boil.BeforeDeleteHook, dtbBlockBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dtbBlockBeforeDeleteHooks = []DTBBlockHook{}

	AddDTBBlockHook(boil.AfterDeleteHook, dtbBlockAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dtbBlockAfterDeleteHooks = []DTBBlockHook{}

	AddDTBBlockHook(boil.BeforeUpsertHook, dtbBlockBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dtbBlockBeforeUpsertHooks = []DTBBlockHook{}

	AddDTBBlockHook(boil.AfterUpsertHook, dtbBlockAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dtbBlockAfterUpsertHooks = []DTBBlockHook{}
}

func testDTBBlocksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBBlock{}
	if err = randomize.Struct(seed, o, dtbBlockDBTypes, true, dtbBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBBlocksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBBlock{}
	if err = randomize.Struct(seed, o, dtbBlockDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DTBBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dtbBlockColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DTBBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBBlockToManyBlockDTBBlockPositions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBBlock
	var b, c DTBBlockPosition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbBlockDBTypes, true, dtbBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlock struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbBlockPositionDBTypes, false, dtbBlockPositionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbBlockPositionDBTypes, false, dtbBlockPositionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.BlockID = a.ID
	c.BlockID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.BlockDTBBlockPositions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.BlockID == b.BlockID {
			bFound = true
		}
		if v.BlockID == c.BlockID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBBlockSlice{&a}
	if err = a.L.LoadBlockDTBBlockPositions(ctx, tx, false, (*[]*DTBBlock)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.BlockDTBBlockPositions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.BlockDTBBlockPositions = nil
	if err = a.L.LoadBlockDTBBlockPositions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.BlockDTBBlockPositions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBBlockToManyAddOpBlockDTBBlockPositions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBBlock
	var b, c, d, e DTBBlockPosition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbBlockDBTypes, false, strmangle.SetComplement(dtbBlockPrimaryKeyColumns, dtbBlockColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBBlockPosition{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbBlockPositionDBTypes, false, strmangle.SetComplement(dtbBlockPositionPrimaryKeyColumns, dtbBlockPositionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBBlockPosition{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddBlockDTBBlockPositions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.BlockID {
			t.Error("foreign key was wrong value", a.ID, first.BlockID)
		}
		if a.ID != second.BlockID {
			t.Error("foreign key was wrong value", a.ID, second.BlockID)
		}

		if first.R.Block != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Block != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.BlockDTBBlockPositions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.BlockDTBBlockPositions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.BlockDTBBlockPositions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testDTBBlockToOneMTBDeviceTypeUsingDeviceType(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBBlock
	var foreign MTBDeviceType

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbBlockDBTypes, true, dtbBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlock struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, mtbDeviceTypeDBTypes, false, mtbDeviceTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBDeviceType struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.DeviceTypeID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.DeviceType().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBBlockSlice{&local}
	if err = local.L.LoadDeviceType(ctx, tx, false, (*[]*DTBBlock)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DeviceType == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.DeviceType = nil
	if err = local.L.LoadDeviceType(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DeviceType == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBBlockToOneSetOpMTBDeviceTypeUsingDeviceType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBBlock
	var b, c MTBDeviceType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbBlockDBTypes, false, strmangle.SetComplement(dtbBlockPrimaryKeyColumns, dtbBlockColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbDeviceTypeDBTypes, false, strmangle.SetComplement(mtbDeviceTypePrimaryKeyColumns, mtbDeviceTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mtbDeviceTypeDBTypes, false, strmangle.SetComplement(mtbDeviceTypePrimaryKeyColumns, mtbDeviceTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MTBDeviceType{&b, &c} {
		err = a.SetDeviceType(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.DeviceType != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DeviceTypeDTBBlocks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.DeviceTypeID, x.ID) {
			t.Error("foreign key was wrong value", a.DeviceTypeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DeviceTypeID))
		reflect.Indirect(reflect.ValueOf(&a.DeviceTypeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.DeviceTypeID, x.ID) {
			t.Error("foreign key was wrong value", a.DeviceTypeID, x.ID)
		}
	}
}

func testDTBBlockToOneRemoveOpMTBDeviceTypeUsingDeviceType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBBlock
	var b MTBDeviceType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbBlockDBTypes, false, strmangle.SetComplement(dtbBlockPrimaryKeyColumns, dtbBlockColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbDeviceTypeDBTypes, false, strmangle.SetComplement(mtbDeviceTypePrimaryKeyColumns, mtbDeviceTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetDeviceType(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveDeviceType(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.DeviceType().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.DeviceType != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.DeviceTypeID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.DeviceTypeDTBBlocks) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBBlocksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBBlock{}
	if err = randomize.Struct(seed, o, dtbBlockDBTypes, true, dtbBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBBlocksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBBlock{}
	if err = randomize.Struct(seed, o, dtbBlockDBTypes, true, dtbBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBBlockSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBBlocksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBBlock{}
	if err = randomize.Struct(seed, o, dtbBlockDBTypes, true, dtbBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBBlocks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dtbBlockDBTypes = map[string]string{`ID`: `int`, `DeviceTypeID`: `smallint`, `BlockName`: `varchar`, `FileName`: `varchar`, `UseController`: `tinyint`, `Deletable`: `tinyint`, `CreateDate`: `datetime`, `UpdateDate`: `datetime`, `DiscriminatorType`: `varchar`}
	_               = bytes.MinRead
)

func testDTBBlocksUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dtbBlockPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dtbBlockColumns) == len(dtbBlockPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBBlock{}
	if err = randomize.Struct(seed, o, dtbBlockDBTypes, true, dtbBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbBlockDBTypes, true, dtbBlockPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBBlock struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDTBBlocksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dtbBlockColumns) == len(dtbBlockPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBBlock{}
	if err = randomize.Struct(seed, o, dtbBlockDBTypes, true, dtbBlockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbBlockDBTypes, true, dtbBlockPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBBlock struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dtbBlockColumns, dtbBlockPrimaryKeyColumns) {
		fields = dtbBlockColumns
	} else {
		fields = strmangle.SetComplement(
			dtbBlockColumns,
			dtbBlockPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DTBBlockSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDTBBlocksUpsert(t *testing.T) {
	t.Parallel()

	if len(dtbBlockColumns) == len(dtbBlockPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDTBBlockUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DTBBlock{}
	if err = randomize.Struct(seed, &o, dtbBlockDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBBlock struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBBlock: %s", err)
	}

	count, err := DTBBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dtbBlockDBTypes, false, dtbBlockPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBBlock struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBBlock: %s", err)
	}

	count, err = DTBBlocks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
