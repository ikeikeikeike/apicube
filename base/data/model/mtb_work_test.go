// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMTBWorks(t *testing.T) {
	t.Parallel()

	query := MTBWorks()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMTBWorksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBWork{}
	if err = randomize.Struct(seed, o, mtbWorkDBTypes, true, mtbWorkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBWork struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MTBWorks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMTBWorksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBWork{}
	if err = randomize.Struct(seed, o, mtbWorkDBTypes, true, mtbWorkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBWork struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MTBWorks().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MTBWorks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMTBWorksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBWork{}
	if err = randomize.Struct(seed, o, mtbWorkDBTypes, true, mtbWorkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBWork struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MTBWorkSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MTBWorks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMTBWorksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBWork{}
	if err = randomize.Struct(seed, o, mtbWorkDBTypes, true, mtbWorkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBWork struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MTBWorkExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if MTBWork exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MTBWorkExists to return true, but got false.")
	}
}

func testMTBWorksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBWork{}
	if err = randomize.Struct(seed, o, mtbWorkDBTypes, true, mtbWorkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBWork struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	mtbWorkFound, err := FindMTBWork(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if mtbWorkFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMTBWorksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBWork{}
	if err = randomize.Struct(seed, o, mtbWorkDBTypes, true, mtbWorkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBWork struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MTBWorks().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMTBWorksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBWork{}
	if err = randomize.Struct(seed, o, mtbWorkDBTypes, true, mtbWorkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBWork struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MTBWorks().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMTBWorksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	mtbWorkOne := &MTBWork{}
	mtbWorkTwo := &MTBWork{}
	if err = randomize.Struct(seed, mtbWorkOne, mtbWorkDBTypes, false, mtbWorkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBWork struct: %s", err)
	}
	if err = randomize.Struct(seed, mtbWorkTwo, mtbWorkDBTypes, false, mtbWorkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBWork struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mtbWorkOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mtbWorkTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MTBWorks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMTBWorksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	mtbWorkOne := &MTBWork{}
	mtbWorkTwo := &MTBWork{}
	if err = randomize.Struct(seed, mtbWorkOne, mtbWorkDBTypes, false, mtbWorkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBWork struct: %s", err)
	}
	if err = randomize.Struct(seed, mtbWorkTwo, mtbWorkDBTypes, false, mtbWorkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBWork struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mtbWorkOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mtbWorkTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MTBWorks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func mtbWorkBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *MTBWork) error {
	*o = MTBWork{}
	return nil
}

func mtbWorkAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *MTBWork) error {
	*o = MTBWork{}
	return nil
}

func mtbWorkAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *MTBWork) error {
	*o = MTBWork{}
	return nil
}

func mtbWorkBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MTBWork) error {
	*o = MTBWork{}
	return nil
}

func mtbWorkAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MTBWork) error {
	*o = MTBWork{}
	return nil
}

func mtbWorkBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MTBWork) error {
	*o = MTBWork{}
	return nil
}

func mtbWorkAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MTBWork) error {
	*o = MTBWork{}
	return nil
}

func mtbWorkBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MTBWork) error {
	*o = MTBWork{}
	return nil
}

func mtbWorkAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MTBWork) error {
	*o = MTBWork{}
	return nil
}

func testMTBWorksHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &MTBWork{}
	o := &MTBWork{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, mtbWorkDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MTBWork object: %s", err)
	}

	AddMTBWorkHook(boil.BeforeInsertHook, mtbWorkBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	mtbWorkBeforeInsertHooks = []MTBWorkHook{}

	AddMTBWorkHook(boil.AfterInsertHook, mtbWorkAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	mtbWorkAfterInsertHooks = []MTBWorkHook{}

	AddMTBWorkHook(boil.AfterSelectHook, mtbWorkAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	mtbWorkAfterSelectHooks = []MTBWorkHook{}

	AddMTBWorkHook(boil.BeforeUpdateHook, mtbWorkBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	mtbWorkBeforeUpdateHooks = []MTBWorkHook{}

	AddMTBWorkHook(boil.AfterUpdateHook, mtbWorkAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	mtbWorkAfterUpdateHooks = []MTBWorkHook{}

	AddMTBWorkHook(boil.BeforeDeleteHook, mtbWorkBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	mtbWorkBeforeDeleteHooks = []MTBWorkHook{}

	AddMTBWorkHook(boil.AfterDeleteHook, mtbWorkAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	mtbWorkAfterDeleteHooks = []MTBWorkHook{}

	AddMTBWorkHook(boil.BeforeUpsertHook, mtbWorkBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	mtbWorkBeforeUpsertHooks = []MTBWorkHook{}

	AddMTBWorkHook(boil.AfterUpsertHook, mtbWorkAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	mtbWorkAfterUpsertHooks = []MTBWorkHook{}
}

func testMTBWorksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBWork{}
	if err = randomize.Struct(seed, o, mtbWorkDBTypes, true, mtbWorkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBWork struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MTBWorks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMTBWorksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBWork{}
	if err = randomize.Struct(seed, o, mtbWorkDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MTBWork struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(mtbWorkColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MTBWorks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMTBWorksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBWork{}
	if err = randomize.Struct(seed, o, mtbWorkDBTypes, true, mtbWorkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBWork struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMTBWorksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBWork{}
	if err = randomize.Struct(seed, o, mtbWorkDBTypes, true, mtbWorkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBWork struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MTBWorkSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMTBWorksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBWork{}
	if err = randomize.Struct(seed, o, mtbWorkDBTypes, true, mtbWorkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBWork struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MTBWorks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	mtbWorkDBTypes = map[string]string{`ID`: `smallint`, `Name`: `varchar`, `SortNo`: `smallint`, `DiscriminatorType`: `varchar`}
	_              = bytes.MinRead
)

func testMTBWorksUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(mtbWorkPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(mtbWorkColumns) == len(mtbWorkPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MTBWork{}
	if err = randomize.Struct(seed, o, mtbWorkDBTypes, true, mtbWorkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBWork struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MTBWorks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mtbWorkDBTypes, true, mtbWorkPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MTBWork struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMTBWorksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(mtbWorkColumns) == len(mtbWorkPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MTBWork{}
	if err = randomize.Struct(seed, o, mtbWorkDBTypes, true, mtbWorkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBWork struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MTBWorks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mtbWorkDBTypes, true, mtbWorkPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MTBWork struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(mtbWorkColumns, mtbWorkPrimaryKeyColumns) {
		fields = mtbWorkColumns
	} else {
		fields = strmangle.SetComplement(
			mtbWorkColumns,
			mtbWorkPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MTBWorkSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMTBWorksUpsert(t *testing.T) {
	t.Parallel()

	if len(mtbWorkColumns) == len(mtbWorkPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLMTBWorkUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MTBWork{}
	if err = randomize.Struct(seed, &o, mtbWorkDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MTBWork struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MTBWork: %s", err)
	}

	count, err := MTBWorks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, mtbWorkDBTypes, false, mtbWorkPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MTBWork struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MTBWork: %s", err)
	}

	count, err = MTBWorks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
