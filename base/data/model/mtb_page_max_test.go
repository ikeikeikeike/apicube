// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMTBPageMaxes(t *testing.T) {
	t.Parallel()

	query := MTBPageMaxes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMTBPageMaxesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBPageMax{}
	if err = randomize.Struct(seed, o, mtbPageMaxDBTypes, true, mtbPageMaxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPageMax struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MTBPageMaxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMTBPageMaxesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBPageMax{}
	if err = randomize.Struct(seed, o, mtbPageMaxDBTypes, true, mtbPageMaxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPageMax struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MTBPageMaxes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MTBPageMaxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMTBPageMaxesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBPageMax{}
	if err = randomize.Struct(seed, o, mtbPageMaxDBTypes, true, mtbPageMaxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPageMax struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MTBPageMaxSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MTBPageMaxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMTBPageMaxesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBPageMax{}
	if err = randomize.Struct(seed, o, mtbPageMaxDBTypes, true, mtbPageMaxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPageMax struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MTBPageMaxExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if MTBPageMax exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MTBPageMaxExists to return true, but got false.")
	}
}

func testMTBPageMaxesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBPageMax{}
	if err = randomize.Struct(seed, o, mtbPageMaxDBTypes, true, mtbPageMaxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPageMax struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	mtbPageMaxFound, err := FindMTBPageMax(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if mtbPageMaxFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMTBPageMaxesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBPageMax{}
	if err = randomize.Struct(seed, o, mtbPageMaxDBTypes, true, mtbPageMaxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPageMax struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MTBPageMaxes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMTBPageMaxesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBPageMax{}
	if err = randomize.Struct(seed, o, mtbPageMaxDBTypes, true, mtbPageMaxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPageMax struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MTBPageMaxes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMTBPageMaxesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	mtbPageMaxOne := &MTBPageMax{}
	mtbPageMaxTwo := &MTBPageMax{}
	if err = randomize.Struct(seed, mtbPageMaxOne, mtbPageMaxDBTypes, false, mtbPageMaxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPageMax struct: %s", err)
	}
	if err = randomize.Struct(seed, mtbPageMaxTwo, mtbPageMaxDBTypes, false, mtbPageMaxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPageMax struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mtbPageMaxOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mtbPageMaxTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MTBPageMaxes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMTBPageMaxesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	mtbPageMaxOne := &MTBPageMax{}
	mtbPageMaxTwo := &MTBPageMax{}
	if err = randomize.Struct(seed, mtbPageMaxOne, mtbPageMaxDBTypes, false, mtbPageMaxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPageMax struct: %s", err)
	}
	if err = randomize.Struct(seed, mtbPageMaxTwo, mtbPageMaxDBTypes, false, mtbPageMaxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPageMax struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mtbPageMaxOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mtbPageMaxTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MTBPageMaxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func mtbPageMaxBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *MTBPageMax) error {
	*o = MTBPageMax{}
	return nil
}

func mtbPageMaxAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *MTBPageMax) error {
	*o = MTBPageMax{}
	return nil
}

func mtbPageMaxAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *MTBPageMax) error {
	*o = MTBPageMax{}
	return nil
}

func mtbPageMaxBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MTBPageMax) error {
	*o = MTBPageMax{}
	return nil
}

func mtbPageMaxAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MTBPageMax) error {
	*o = MTBPageMax{}
	return nil
}

func mtbPageMaxBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MTBPageMax) error {
	*o = MTBPageMax{}
	return nil
}

func mtbPageMaxAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MTBPageMax) error {
	*o = MTBPageMax{}
	return nil
}

func mtbPageMaxBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MTBPageMax) error {
	*o = MTBPageMax{}
	return nil
}

func mtbPageMaxAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MTBPageMax) error {
	*o = MTBPageMax{}
	return nil
}

func testMTBPageMaxesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &MTBPageMax{}
	o := &MTBPageMax{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, mtbPageMaxDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MTBPageMax object: %s", err)
	}

	AddMTBPageMaxHook(boil.BeforeInsertHook, mtbPageMaxBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	mtbPageMaxBeforeInsertHooks = []MTBPageMaxHook{}

	AddMTBPageMaxHook(boil.AfterInsertHook, mtbPageMaxAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	mtbPageMaxAfterInsertHooks = []MTBPageMaxHook{}

	AddMTBPageMaxHook(boil.AfterSelectHook, mtbPageMaxAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	mtbPageMaxAfterSelectHooks = []MTBPageMaxHook{}

	AddMTBPageMaxHook(boil.BeforeUpdateHook, mtbPageMaxBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	mtbPageMaxBeforeUpdateHooks = []MTBPageMaxHook{}

	AddMTBPageMaxHook(boil.AfterUpdateHook, mtbPageMaxAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	mtbPageMaxAfterUpdateHooks = []MTBPageMaxHook{}

	AddMTBPageMaxHook(boil.BeforeDeleteHook, mtbPageMaxBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	mtbPageMaxBeforeDeleteHooks = []MTBPageMaxHook{}

	AddMTBPageMaxHook(boil.AfterDeleteHook, mtbPageMaxAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	mtbPageMaxAfterDeleteHooks = []MTBPageMaxHook{}

	AddMTBPageMaxHook(boil.BeforeUpsertHook, mtbPageMaxBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	mtbPageMaxBeforeUpsertHooks = []MTBPageMaxHook{}

	AddMTBPageMaxHook(boil.AfterUpsertHook, mtbPageMaxAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	mtbPageMaxAfterUpsertHooks = []MTBPageMaxHook{}
}

func testMTBPageMaxesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBPageMax{}
	if err = randomize.Struct(seed, o, mtbPageMaxDBTypes, true, mtbPageMaxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPageMax struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MTBPageMaxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMTBPageMaxesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBPageMax{}
	if err = randomize.Struct(seed, o, mtbPageMaxDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MTBPageMax struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(mtbPageMaxColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MTBPageMaxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMTBPageMaxesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBPageMax{}
	if err = randomize.Struct(seed, o, mtbPageMaxDBTypes, true, mtbPageMaxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPageMax struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMTBPageMaxesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBPageMax{}
	if err = randomize.Struct(seed, o, mtbPageMaxDBTypes, true, mtbPageMaxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPageMax struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MTBPageMaxSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMTBPageMaxesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MTBPageMax{}
	if err = randomize.Struct(seed, o, mtbPageMaxDBTypes, true, mtbPageMaxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPageMax struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MTBPageMaxes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	mtbPageMaxDBTypes = map[string]string{`ID`: `smallint`, `Name`: `varchar`, `SortNo`: `smallint`, `DiscriminatorType`: `varchar`}
	_                 = bytes.MinRead
)

func testMTBPageMaxesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(mtbPageMaxPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(mtbPageMaxColumns) == len(mtbPageMaxPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MTBPageMax{}
	if err = randomize.Struct(seed, o, mtbPageMaxDBTypes, true, mtbPageMaxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPageMax struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MTBPageMaxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mtbPageMaxDBTypes, true, mtbPageMaxPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MTBPageMax struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMTBPageMaxesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(mtbPageMaxColumns) == len(mtbPageMaxPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MTBPageMax{}
	if err = randomize.Struct(seed, o, mtbPageMaxDBTypes, true, mtbPageMaxColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPageMax struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MTBPageMaxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mtbPageMaxDBTypes, true, mtbPageMaxPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MTBPageMax struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(mtbPageMaxColumns, mtbPageMaxPrimaryKeyColumns) {
		fields = mtbPageMaxColumns
	} else {
		fields = strmangle.SetComplement(
			mtbPageMaxColumns,
			mtbPageMaxPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MTBPageMaxSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMTBPageMaxesUpsert(t *testing.T) {
	t.Parallel()

	if len(mtbPageMaxColumns) == len(mtbPageMaxPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLMTBPageMaxUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MTBPageMax{}
	if err = randomize.Struct(seed, &o, mtbPageMaxDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MTBPageMax struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MTBPageMax: %s", err)
	}

	count, err := MTBPageMaxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, mtbPageMaxDBTypes, false, mtbPageMaxPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MTBPageMax struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MTBPageMax: %s", err)
	}

	count, err = MTBPageMaxes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
