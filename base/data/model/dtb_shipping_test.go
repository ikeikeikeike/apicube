// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDTBShippings(t *testing.T) {
	t.Parallel()

	query := DTBShippings()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDTBShippingsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBShipping{}
	if err = randomize.Struct(seed, o, dtbShippingDBTypes, true, dtbShippingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBShipping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBShippings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBShippingsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBShipping{}
	if err = randomize.Struct(seed, o, dtbShippingDBTypes, true, dtbShippingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBShipping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DTBShippings().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBShippings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBShippingsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBShipping{}
	if err = randomize.Struct(seed, o, dtbShippingDBTypes, true, dtbShippingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBShipping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBShippingSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DTBShippings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDTBShippingsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBShipping{}
	if err = randomize.Struct(seed, o, dtbShippingDBTypes, true, dtbShippingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBShipping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DTBShippingExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DTBShipping exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DTBShippingExists to return true, but got false.")
	}
}

func testDTBShippingsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBShipping{}
	if err = randomize.Struct(seed, o, dtbShippingDBTypes, true, dtbShippingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBShipping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dtbShippingFound, err := FindDTBShipping(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if dtbShippingFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDTBShippingsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBShipping{}
	if err = randomize.Struct(seed, o, dtbShippingDBTypes, true, dtbShippingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBShipping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DTBShippings().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDTBShippingsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBShipping{}
	if err = randomize.Struct(seed, o, dtbShippingDBTypes, true, dtbShippingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBShipping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DTBShippings().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDTBShippingsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dtbShippingOne := &DTBShipping{}
	dtbShippingTwo := &DTBShipping{}
	if err = randomize.Struct(seed, dtbShippingOne, dtbShippingDBTypes, false, dtbShippingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBShipping struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbShippingTwo, dtbShippingDBTypes, false, dtbShippingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBShipping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbShippingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbShippingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBShippings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDTBShippingsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dtbShippingOne := &DTBShipping{}
	dtbShippingTwo := &DTBShipping{}
	if err = randomize.Struct(seed, dtbShippingOne, dtbShippingDBTypes, false, dtbShippingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBShipping struct: %s", err)
	}
	if err = randomize.Struct(seed, dtbShippingTwo, dtbShippingDBTypes, false, dtbShippingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBShipping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dtbShippingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dtbShippingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBShippings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dtbShippingBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBShipping) error {
	*o = DTBShipping{}
	return nil
}

func dtbShippingAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBShipping) error {
	*o = DTBShipping{}
	return nil
}

func dtbShippingAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DTBShipping) error {
	*o = DTBShipping{}
	return nil
}

func dtbShippingBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBShipping) error {
	*o = DTBShipping{}
	return nil
}

func dtbShippingAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DTBShipping) error {
	*o = DTBShipping{}
	return nil
}

func dtbShippingBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBShipping) error {
	*o = DTBShipping{}
	return nil
}

func dtbShippingAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DTBShipping) error {
	*o = DTBShipping{}
	return nil
}

func dtbShippingBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBShipping) error {
	*o = DTBShipping{}
	return nil
}

func dtbShippingAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DTBShipping) error {
	*o = DTBShipping{}
	return nil
}

func testDTBShippingsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DTBShipping{}
	o := &DTBShipping{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dtbShippingDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBShipping object: %s", err)
	}

	AddDTBShippingHook(boil.BeforeInsertHook, dtbShippingBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dtbShippingBeforeInsertHooks = []DTBShippingHook{}

	AddDTBShippingHook(boil.AfterInsertHook, dtbShippingAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dtbShippingAfterInsertHooks = []DTBShippingHook{}

	AddDTBShippingHook(boil.AfterSelectHook, dtbShippingAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dtbShippingAfterSelectHooks = []DTBShippingHook{}

	AddDTBShippingHook(boil.BeforeUpdateHook, dtbShippingBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dtbShippingBeforeUpdateHooks = []DTBShippingHook{}

	AddDTBShippingHook(boil.AfterUpdateHook, dtbShippingAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dtbShippingAfterUpdateHooks = []DTBShippingHook{}

	AddDTBShippingHook(boil.BeforeDeleteHook, dtbShippingBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dtbShippingBeforeDeleteHooks = []DTBShippingHook{}

	AddDTBShippingHook(boil.AfterDeleteHook, dtbShippingAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dtbShippingAfterDeleteHooks = []DTBShippingHook{}

	AddDTBShippingHook(boil.BeforeUpsertHook, dtbShippingBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dtbShippingBeforeUpsertHooks = []DTBShippingHook{}

	AddDTBShippingHook(boil.AfterUpsertHook, dtbShippingAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dtbShippingAfterUpsertHooks = []DTBShippingHook{}
}

func testDTBShippingsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBShipping{}
	if err = randomize.Struct(seed, o, dtbShippingDBTypes, true, dtbShippingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBShipping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBShippings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBShippingsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBShipping{}
	if err = randomize.Struct(seed, o, dtbShippingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DTBShipping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dtbShippingColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DTBShippings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDTBShippingToManyShippingDTBOrderItems(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBShipping
	var b, c DTBOrderItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbShippingDBTypes, true, dtbShippingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBShipping struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dtbOrderItemDBTypes, false, dtbOrderItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbOrderItemDBTypes, false, dtbOrderItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ShippingID, a.ID)
	queries.Assign(&c.ShippingID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ShippingDTBOrderItems().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ShippingID, b.ShippingID) {
			bFound = true
		}
		if queries.Equal(v.ShippingID, c.ShippingID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DTBShippingSlice{&a}
	if err = a.L.LoadShippingDTBOrderItems(ctx, tx, false, (*[]*DTBShipping)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ShippingDTBOrderItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ShippingDTBOrderItems = nil
	if err = a.L.LoadShippingDTBOrderItems(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ShippingDTBOrderItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDTBShippingToManyAddOpShippingDTBOrderItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBShipping
	var b, c, d, e DTBOrderItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbShippingDBTypes, false, strmangle.SetComplement(dtbShippingPrimaryKeyColumns, dtbShippingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBOrderItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbOrderItemDBTypes, false, strmangle.SetComplement(dtbOrderItemPrimaryKeyColumns, dtbOrderItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DTBOrderItem{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddShippingDTBOrderItems(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ShippingID) {
			t.Error("foreign key was wrong value", a.ID, first.ShippingID)
		}
		if !queries.Equal(a.ID, second.ShippingID) {
			t.Error("foreign key was wrong value", a.ID, second.ShippingID)
		}

		if first.R.Shipping != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Shipping != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ShippingDTBOrderItems[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ShippingDTBOrderItems[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ShippingDTBOrderItems().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDTBShippingToManySetOpShippingDTBOrderItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBShipping
	var b, c, d, e DTBOrderItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbShippingDBTypes, false, strmangle.SetComplement(dtbShippingPrimaryKeyColumns, dtbShippingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBOrderItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbOrderItemDBTypes, false, strmangle.SetComplement(dtbOrderItemPrimaryKeyColumns, dtbOrderItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetShippingDTBOrderItems(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ShippingDTBOrderItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetShippingDTBOrderItems(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ShippingDTBOrderItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ShippingID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ShippingID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ShippingID) {
		t.Error("foreign key was wrong value", a.ID, d.ShippingID)
	}
	if !queries.Equal(a.ID, e.ShippingID) {
		t.Error("foreign key was wrong value", a.ID, e.ShippingID)
	}

	if b.R.Shipping != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Shipping != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Shipping != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Shipping != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ShippingDTBOrderItems[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ShippingDTBOrderItems[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDTBShippingToManyRemoveOpShippingDTBOrderItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBShipping
	var b, c, d, e DTBOrderItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbShippingDBTypes, false, strmangle.SetComplement(dtbShippingPrimaryKeyColumns, dtbShippingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DTBOrderItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dtbOrderItemDBTypes, false, strmangle.SetComplement(dtbOrderItemPrimaryKeyColumns, dtbOrderItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddShippingDTBOrderItems(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ShippingDTBOrderItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveShippingDTBOrderItems(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ShippingDTBOrderItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ShippingID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ShippingID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Shipping != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Shipping != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Shipping != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Shipping != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ShippingDTBOrderItems) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ShippingDTBOrderItems[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ShippingDTBOrderItems[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDTBShippingToOneDTBDeliveryUsingDelivery(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBShipping
	var foreign DTBDelivery

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbShippingDBTypes, true, dtbShippingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBShipping struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dtbDeliveryDBTypes, false, dtbDeliveryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBDelivery struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.DeliveryID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Delivery().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBShippingSlice{&local}
	if err = local.L.LoadDelivery(ctx, tx, false, (*[]*DTBShipping)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Delivery == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Delivery = nil
	if err = local.L.LoadDelivery(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Delivery == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBShippingToOneDTBMemberUsingCreator(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBShipping
	var foreign DTBMember

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbShippingDBTypes, true, dtbShippingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBShipping struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dtbMemberDBTypes, false, dtbMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBMember struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CreatorID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Creator().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBShippingSlice{&local}
	if err = local.L.LoadCreator(ctx, tx, false, (*[]*DTBShipping)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Creator == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Creator = nil
	if err = local.L.LoadCreator(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Creator == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBShippingToOneDTBOrderUsingOrder(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBShipping
	var foreign DTBOrder

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbShippingDBTypes, true, dtbShippingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBShipping struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dtbOrderDBTypes, false, dtbOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBOrder struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.OrderID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Order().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBShippingSlice{&local}
	if err = local.L.LoadOrder(ctx, tx, false, (*[]*DTBShipping)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Order == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Order = nil
	if err = local.L.LoadOrder(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Order == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBShippingToOneMTBPrefUsingPref(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBShipping
	var foreign MTBPref

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbShippingDBTypes, true, dtbShippingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBShipping struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, mtbPrefDBTypes, false, mtbPrefColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBPref struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.PrefID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Pref().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBShippingSlice{&local}
	if err = local.L.LoadPref(ctx, tx, false, (*[]*DTBShipping)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Pref == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Pref = nil
	if err = local.L.LoadPref(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Pref == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBShippingToOneMTBCountryUsingCountry(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DTBShipping
	var foreign MTBCountry

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dtbShippingDBTypes, true, dtbShippingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBShipping struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, mtbCountryDBTypes, false, mtbCountryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MTBCountry struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CountryID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Country().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DTBShippingSlice{&local}
	if err = local.L.LoadCountry(ctx, tx, false, (*[]*DTBShipping)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Country == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Country = nil
	if err = local.L.LoadCountry(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Country == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDTBShippingToOneSetOpDTBDeliveryUsingDelivery(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBShipping
	var b, c DTBDelivery

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbShippingDBTypes, false, strmangle.SetComplement(dtbShippingPrimaryKeyColumns, dtbShippingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbDeliveryDBTypes, false, strmangle.SetComplement(dtbDeliveryPrimaryKeyColumns, dtbDeliveryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbDeliveryDBTypes, false, strmangle.SetComplement(dtbDeliveryPrimaryKeyColumns, dtbDeliveryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DTBDelivery{&b, &c} {
		err = a.SetDelivery(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Delivery != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DeliveryDTBShippings[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.DeliveryID, x.ID) {
			t.Error("foreign key was wrong value", a.DeliveryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DeliveryID))
		reflect.Indirect(reflect.ValueOf(&a.DeliveryID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.DeliveryID, x.ID) {
			t.Error("foreign key was wrong value", a.DeliveryID, x.ID)
		}
	}
}

func testDTBShippingToOneRemoveOpDTBDeliveryUsingDelivery(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBShipping
	var b DTBDelivery

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbShippingDBTypes, false, strmangle.SetComplement(dtbShippingPrimaryKeyColumns, dtbShippingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbDeliveryDBTypes, false, strmangle.SetComplement(dtbDeliveryPrimaryKeyColumns, dtbDeliveryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetDelivery(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveDelivery(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Delivery().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Delivery != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.DeliveryID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.DeliveryDTBShippings) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBShippingToOneSetOpDTBMemberUsingCreator(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBShipping
	var b, c DTBMember

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbShippingDBTypes, false, strmangle.SetComplement(dtbShippingPrimaryKeyColumns, dtbShippingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DTBMember{&b, &c} {
		err = a.SetCreator(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Creator != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CreatorDTBShippings[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CreatorID, x.ID) {
			t.Error("foreign key was wrong value", a.CreatorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CreatorID))
		reflect.Indirect(reflect.ValueOf(&a.CreatorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CreatorID, x.ID) {
			t.Error("foreign key was wrong value", a.CreatorID, x.ID)
		}
	}
}

func testDTBShippingToOneRemoveOpDTBMemberUsingCreator(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBShipping
	var b DTBMember

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbShippingDBTypes, false, strmangle.SetComplement(dtbShippingPrimaryKeyColumns, dtbShippingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbMemberDBTypes, false, strmangle.SetComplement(dtbMemberPrimaryKeyColumns, dtbMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCreator(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCreator(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Creator().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Creator != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CreatorID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CreatorDTBShippings) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBShippingToOneSetOpDTBOrderUsingOrder(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBShipping
	var b, c DTBOrder

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbShippingDBTypes, false, strmangle.SetComplement(dtbShippingPrimaryKeyColumns, dtbShippingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DTBOrder{&b, &c} {
		err = a.SetOrder(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Order != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OrderDTBShippings[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.OrderID, x.ID) {
			t.Error("foreign key was wrong value", a.OrderID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OrderID))
		reflect.Indirect(reflect.ValueOf(&a.OrderID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.OrderID, x.ID) {
			t.Error("foreign key was wrong value", a.OrderID, x.ID)
		}
	}
}

func testDTBShippingToOneRemoveOpDTBOrderUsingOrder(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBShipping
	var b DTBOrder

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbShippingDBTypes, false, strmangle.SetComplement(dtbShippingPrimaryKeyColumns, dtbShippingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dtbOrderDBTypes, false, strmangle.SetComplement(dtbOrderPrimaryKeyColumns, dtbOrderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetOrder(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveOrder(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Order().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Order != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.OrderID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.OrderDTBShippings) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBShippingToOneSetOpMTBPrefUsingPref(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBShipping
	var b, c MTBPref

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbShippingDBTypes, false, strmangle.SetComplement(dtbShippingPrimaryKeyColumns, dtbShippingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MTBPref{&b, &c} {
		err = a.SetPref(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Pref != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PrefDTBShippings[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.PrefID, x.ID) {
			t.Error("foreign key was wrong value", a.PrefID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PrefID))
		reflect.Indirect(reflect.ValueOf(&a.PrefID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.PrefID, x.ID) {
			t.Error("foreign key was wrong value", a.PrefID, x.ID)
		}
	}
}

func testDTBShippingToOneRemoveOpMTBPrefUsingPref(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBShipping
	var b MTBPref

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbShippingDBTypes, false, strmangle.SetComplement(dtbShippingPrimaryKeyColumns, dtbShippingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbPrefDBTypes, false, strmangle.SetComplement(mtbPrefPrimaryKeyColumns, mtbPrefColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetPref(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemovePref(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Pref().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Pref != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.PrefID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.PrefDTBShippings) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBShippingToOneSetOpMTBCountryUsingCountry(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBShipping
	var b, c MTBCountry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbShippingDBTypes, false, strmangle.SetComplement(dtbShippingPrimaryKeyColumns, dtbShippingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbCountryDBTypes, false, strmangle.SetComplement(mtbCountryPrimaryKeyColumns, mtbCountryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mtbCountryDBTypes, false, strmangle.SetComplement(mtbCountryPrimaryKeyColumns, mtbCountryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MTBCountry{&b, &c} {
		err = a.SetCountry(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Country != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CountryDTBShippings[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CountryID, x.ID) {
			t.Error("foreign key was wrong value", a.CountryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CountryID))
		reflect.Indirect(reflect.ValueOf(&a.CountryID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CountryID, x.ID) {
			t.Error("foreign key was wrong value", a.CountryID, x.ID)
		}
	}
}

func testDTBShippingToOneRemoveOpMTBCountryUsingCountry(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DTBShipping
	var b MTBCountry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dtbShippingDBTypes, false, strmangle.SetComplement(dtbShippingPrimaryKeyColumns, dtbShippingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mtbCountryDBTypes, false, strmangle.SetComplement(mtbCountryPrimaryKeyColumns, mtbCountryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCountry(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCountry(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Country().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Country != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CountryID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CountryDTBShippings) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDTBShippingsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBShipping{}
	if err = randomize.Struct(seed, o, dtbShippingDBTypes, true, dtbShippingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBShipping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBShippingsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBShipping{}
	if err = randomize.Struct(seed, o, dtbShippingDBTypes, true, dtbShippingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBShipping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DTBShippingSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDTBShippingsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DTBShipping{}
	if err = randomize.Struct(seed, o, dtbShippingDBTypes, true, dtbShippingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBShipping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DTBShippings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dtbShippingDBTypes = map[string]string{`ID`: `int`, `OrderID`: `int`, `CountryID`: `smallint`, `PrefID`: `smallint`, `DeliveryID`: `int`, `CreatorID`: `int`, `Name01`: `varchar`, `Name02`: `varchar`, `Kana01`: `varchar`, `Kana02`: `varchar`, `CompanyName`: `varchar`, `PhoneNumber`: `varchar`, `PostalCode`: `varchar`, `Addr01`: `varchar`, `Addr02`: `varchar`, `DeliveryName`: `varchar`, `TimeID`: `int`, `DeliveryTime`: `varchar`, `DeliveryDate`: `datetime`, `ShippingDate`: `datetime`, `TrackingNumber`: `varchar`, `Note`: `varchar`, `SortNo`: `smallint`, `CreateDate`: `datetime`, `UpdateDate`: `datetime`, `MailSendDate`: `datetime`, `DiscriminatorType`: `varchar`}
	_                  = bytes.MinRead
)

func testDTBShippingsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dtbShippingPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dtbShippingColumns) == len(dtbShippingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBShipping{}
	if err = randomize.Struct(seed, o, dtbShippingDBTypes, true, dtbShippingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBShipping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBShippings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbShippingDBTypes, true, dtbShippingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBShipping struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDTBShippingsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dtbShippingColumns) == len(dtbShippingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DTBShipping{}
	if err = randomize.Struct(seed, o, dtbShippingDBTypes, true, dtbShippingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DTBShipping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DTBShippings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dtbShippingDBTypes, true, dtbShippingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBShipping struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dtbShippingColumns, dtbShippingPrimaryKeyColumns) {
		fields = dtbShippingColumns
	} else {
		fields = strmangle.SetComplement(
			dtbShippingColumns,
			dtbShippingPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DTBShippingSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDTBShippingsUpsert(t *testing.T) {
	t.Parallel()

	if len(dtbShippingColumns) == len(dtbShippingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDTBShippingUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DTBShipping{}
	if err = randomize.Struct(seed, &o, dtbShippingDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DTBShipping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBShipping: %s", err)
	}

	count, err := DTBShippings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dtbShippingDBTypes, false, dtbShippingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DTBShipping struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DTBShipping: %s", err)
	}

	count, err = DTBShippings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
